{"SUMMARY.html":{"url":"SUMMARY.html","title":"目 录","keywords":"","body":"目录 目 录 DevOps 应用部署 Ansible 简介 Docker Docker Prometheus Nginx Consul PMM Redis in Docker LDAP Harbor Apollo Kubernetes K8s 安装 Kubespray RKE Rancher Kubeadm 部署 K8s Dashboard ELK Prometheus NFS动态PV Rancher Helm&Tiller 其它 MySQL主从复制 Percona toolkit yum安装MySQL yum安装RabbitMQ yum安装Redis 安装ruby和redis dump Y-API的安装步骤 GitLab升级 dataX示例 git分支重置 修复mysql主从 磁盘扩容 docker若干 HiS 监控报警 Alerts 系统监控 Consul Consul Consul-template Nginx-Consul-template Consul-ACL Consul APIs Prometheus Prometheus 核心组件——prometheus 告警组件——alertmanager 联邦 自动发现 Grafana K8s ELK MySQL-Replication PMM MySQL RabbitMQ Cluster RabbitMQ Redis 常用软件接入Prometheus监控 MySQL MySQL主从同步 MongoDB Redis RabbitMQ NginX 自研应用接入Prometheus监控 Zabbix 自动发现 日志分析 ELK X-pack权限控制版ES ELK账号权限分组管理 ELK若干问题 清理ES索引 K8s部署ELK并启用AD认证 ELK部署整改 使用Grafana ES APIs 持续集成 CI/CD GitLab CI/CD GitLab Runner GitLab CI/CD 配置管理 CMDB Ansible Tower BlueKing 任务调度 简介 XXL-JOB XXL-JOB升级 关于本书 制作 发布 官方示例 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"./":{"url":"./","title":"DevOps","keywords":"","body":" 自动化运维 [x] 批量运维：减少重复劳动和人为失误 [x] 监控报警：发现异常并报警 [x] 持续集成：通过CI/CD工具，结合Docker、K8s，运用自动部署工具或API等手段，完成项目持续迭代，应用的持续部署 [x] 日志平台：性能分析、故障定位 [ ] 配置管理：通过代码使基础架构的配置和管理自动化 [ ] 代码审查：保证代码质量、代码安全 [ ] ... DevOps DevOps 是一种文化、一种理念。 or DevOps 的核心价值观 是 团队文化(Culture)、 自动化(Automation)、 评估(Measurement)和 分享(Sharing)（CAMS），同时，团队对 DevOps 的执行力也是 DevOps 能否成功的重要因素。 团队文化让大家团结一致 自动化是 DevOps 的基础 评估保证了及时的改进 分享让 CAMS 成为一个完整的循环过程 DevOps 的另一个思想是任何东西，包括服务器、数据库、网络、日志文件、应用配置、文档、自动化测试、部署流程等，都可以通过代码来管理。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/ansible/":{"url":"docs/deployment/ansible/","title":"Ansible","keywords":"","body":" Ansible is an IT automation tool. It can configure systems, deploy software, and orchestrate more advanced IT tasks such as continuous deployments or zero downtime rolling updates. Ansible 是一个IT自动化工具。它可以配置系统，部署软件以及编排更高级的IT任务，例如持续部署或零停机滚动更新。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/ansible/ansible-intro.html":{"url":"docs/deployment/ansible/ansible-intro.html","title":"简介","keywords":"","body":"Ansible简介 正如Ansible官网的标题“Ansible is Simple IT Automation”含义，Ansible简化了IT自动化的实现，是高效运维的一个重要工具。 Ansible的设计初衷就是在若干服务器上从零开始执行所有必需的配置与操作。例如，在启动Web 服务器之前先启动数据库，或者为了实现零停机升级，将Web 服务器逐一从负载均衡上摘除并升级。Ansible通过极简的模型来控制各种操作按照所需顺序执行。其它同类工具有：Chef、Puppet 及Saltstack。 架构 组件 功能 ansible core ansible自身核心模块 host inventory 主机清单，定义可管控的主机列表 connection plugins 连接插件，一般默认基于ssh协议连接 modules core modules（自带的核心模块）、custom modules（自定义模块） playbooks 剧本，按照所设定编排的顺序执行命令 特性 基于Python语言实现，由Paramiko（Python的一个可并发连接ssh主机功能库），PyYAML和Jinja2（模板化）三个关键模块实现 模块化设计，ansible自身是一个核心组件，调用特定的模块来完成特定任务 基于SSH协议工作，免客户端，有两种认证方式：密码、公钥 使用yaml语言编排剧本，连续任务按先后设置顺序完成 是一个声明式的管理工具，在编写脚本时使用的是声明式语言 声明式语言表示“期望目标是什么状态”，如果已经是则返回\"ok\"，否则改变目标状态并返回\"changed\"。 具有幂等性的特点，执行一次或多次，安装出来的环境是一样的 HTTP/1.1中对“幂等性”的定义是：一次和多次请求某一个资源对于资源本身应该具有同样的结果（网络超时等问题除外）。 也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。 与SaltStack比较： 共同点： Ansible和SaltStack都是的目前最流行的自动化运维工具，能满足企业IT系统的自动化运维管理。这两个工具都是用python开发的，可以部署到不同的系统环境中和具有良好的二次开发特性。 在执行的命令的时候，Ansible和SaltStack都支持Ad-hoc操作模式，也可以支持将命令写入yaml格式文件中再批量执行。 在处理返回结果方面，Ansible和SaltStack的返回结果格式都是JSON格式，比较易懂和方便解析。 差异： 响应速度：SaltStack更快，在文件传输方面快一个量级，但在批量脚本执行、多机器部署方面相近 SaltStack的master和minion主机是通过ZeroMQ传输数据，而Ansible是通过标准SSH进行数据传输，SaltStack的响应速度要比Ansible快很多。标准SSH连接的时候比较耗费时间，ZeroMQ传输的速度会快很多，所以单单从响应速度方面考虑SaltStack会是更好的选择。但是在一般的运维场景下Ansible的响应速度也可以满足需求。 有测试数据表明，在执行命令、分发文件、读取文件方面，SaltStack的响应速度是Ansible的10倍左右。但在批量脚本执行、多机器部署方面，二者速度相当。 安全性：Ansible更安全 Ansible使用标准SSH连接传输数据，不需要在远程主机上启动守护进程，并且标准SSH数据传输本身就是加密传输，这样远程主机不容易被攻击。 自身运维：Ansible更友好 Ansible和远端主机之间的通过标准SSH通信，远程主机上只需要运行SSH进程就可以进行运维操作，而SSH是机房主机中一般都安装和启动的进程，所以Ansible对机房运维不会增加过多的运维成本。 基础知识 常用模块 Ansible的常用模块主要有以下十来个： 模块名称 功能 ping 尝试连接主机，如果测试成功会返回\"pong\" command 在远程节点执行命令 yum 使用yum软件包管理工具管理软件包 shell 和command模块类似，执行命令，支持变量等符号 cron 管理定时任务 service 管理程序服务 file 设置文件属性 copy 复制本地文件到远程主机 script 传送本地的一个脚本并在远程主机上执行 setup 获取远程主机的参数信息 user 管理用户账户 group 添加或者删除用户组 ... ... 配置文件 Ansible配置是以ini格式存储数据的，在Ansible中，几乎所有配置都可以通过Playbook或环境变量来重新赋值。加载配置文件的优先顺序如下： ANSIBLE_CONFIG：优先查找环境变量ANSIBLE_CONFIG指向的配置文件 ./ansible.cfg：当前目录下的ansible.cfg配置文件 ~/.ansible.cfg：当前用户home目录下的.ansible.cfg配置文件 /etc/ansible/ansible.cfg：安装ansible生成的默认配置文件 Ansible按顺序查找并应用最先找到的ansible配置。ansible.cfg中的配置可被playbook中的自定义配置覆盖 常用的配置参数： 配置项 含义 inventory 资源清单文件，就是一些Ansible需要连接管理的主机列表 library Ansible模块的安装目录 forks 默认并发进程数5，可根据控制主机的性能和被管理节点的数量调整 sudo_user 执行命令的用户，可在playbook中重新设置 remote_port SSH连接端口一般是22，如有个别特殊的，可在inventory中单独指定 host_key_checking 是否检查公钥，一般设置为false timeout SSH连接的超时间隔，默认20s log_path ansible日志路径 ... ... 执行过程 加载自己的配置文件，默认/etc/ansible/ansible.cfg 查找对应的主机配置文件，找到要执行的主机或者组 加载自己对应的模块文件，如 command 通过ansible将模块或命令生成对应的临时py文件(python脚本)， 并将该文件传输至远程服务器 对应执行用户的家目录的.ansible/tmp/XXX/XXX.PY文件 给文件 +x 执行权限 执行并返回结果 删除临时py文件，sleep 0退出 剧本（Playbook） playbook的构成： Target section：定义将要执行 playbook 的远程主机组 Variable section：定义 playbook 运行时需要使用的变量 Task section：定义将要在远程主机上执行的任务列表 Handler section：定义 task 执行完成以后需要调用的任务 一般所需的目录层： vars：变量层 tasks：任务层 handlers：触发条件 files：文件 template：模板 安装 以root用户安装ansible为例，方式如下： 从Github获取源码安装 需预先安装好Python2.5以上版本。另外，对于Ansible，Windows系统不可以做控制主机。如果控制主机没有预装Python，从Python官网选择2.7.15版本的源码包，解压到控制主机执行安装即可。 安装过Python环境之后，更新以下模块： # 安装python的包管理工具pip [root@VM_0_6_centos ~]# easy_install pip # 通过pip安装ansible必需的若干python模块 [root@VM_0_6_centos ~]# pip install paramiko PyYAML Jinja2 httplib2 six 下载、安装ansible git clone git://github.com/ansible/ansible.git --recursive cd ./ansible # Bash命令 source ./hacking/env-setup Yum安装 Fedora 用户可直接安装Ansible，但RHEL或CentOS用户，需要 配置 EPEL。 更新EPEL源 # rpm方式安装EPEL源 rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm # 或者从阿里镜像源获取 wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo 然后更新一下缓存 [root@VM_0_6_centos ~]# yum clean all [root@VM_0_6_centos ~]# yum makecache 安装ansible [root@VM_0_6_centos ~]# yum install ansible -y 其它系统安装Ansible 其它操作系统，详见Ansible安装方法。 如何使用 我们主要使用ansible和ansible-playbook这两个命令。批量执行简单命令时，使用ansible；执行更复杂的批量安装部署时用ansible-playbook。以下是我在云主机上使用ansible的三个示例： 个人云主机主机环境如下： [root@VM_0_7_centos ~]# cat /etc/redhat-release CentOS Linux release 7.3.1611 (Core) [root@VM_0_7_centos ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/vda1 50G 6.8G 40G 15% / devtmpfs 911M 0 911M 0% /dev tmpfs 920M 24K 920M 1% /dev/shm tmpfs 920M 436K 920M 1% /run tmpfs 920M 0 920M 0% /sys/fs/cgroup tmpfs 184M 0 184M 0% /run/user/0 tmpfs 184M 0 184M 0% /run/user/1000 使用ansible 执行简单命令 安装好ansible之后，在当前目录编写一个hosts文件，定义一个主机群组vm，配置好待部署机器的主机别名、IP地址等信息，格式可以如下: cat myhosts [vm] vm01 ansible_host=192.168.xxx.xx1 # ansible2.0之前的版本应该使用ansible_ssh_host vm02 ansible_host=192.168.xxx.xx2 然后，通过指定-i参数指定自定义hosts文件执行一个简单的命令，如查询系统（redhat系列）版本：cat /etc/redhat-release 仅查询vm01 [root@VM_0_7_centos ~]# ansible -i myhosts vm01 -m shell -a \"cat /etc/redhat-release\" vm01 | CHANGED | rc=0 >> CentOS Linux release 7.3.1611 (Core) 查询主机群组vm中的所有主机 [root@VM_0_7_centos ~]# ansible -i myhosts vm -m shell -a \"cat /etc/redhat-release\" vm02 | CHANGED | rc=0 >> CentOS Linux release 7.3.1611 (Core) vm01 | CHANGED | rc=0 >> CentOS Linux release 7.3.1611 (Core) 查询hosts文件中的所有主机 [root@VM_0_7_centos ~]# ansible -i myhosts all -m shell -a \"cat /etc/redhat-release\" vm02 | CHANGED | rc=0 >> CentOS Linux release 7.3.1611 (Core) vm01 | CHANGED | rc=0 >> CentOS Linux release 7.3.1611 (Core) command模块不支持管道。例如，企图通过df -h |sed -n 2p获取第一个列出的文件系统的数据时，报错如下： [root@VM_0_7_centos ~]# ansible -i myhosts vm01 -m command -a \"df -h |sed -n 2p\" vm01 | FAILED | rc=1 >> df: invalid option -- 'n' Try 'df --help' for more information.non-zero return code 此时，可以使用shell模块替代，如下： [root@VM_0_7_centos ~]# ansible -i myhosts vm01 -m shell -a \"df -h | sed -n 2p\" vm01 | CHANGED | rc=0 >> /dev/vda1 50G 3.5G 44G 8% / 执行控制主机上的脚本 如果需要执行多条shell命令，而又不想编写playbook，可以将包含这些命令的shell脚本放在控制主机上，通过script模块执行。 cat /root/test.sh #!/bin/sh yum install httpd -y systemctl start httpd systemctl status httpd EOF # 在vm01上安装httpd并启动 [root@VM_0_7_centos ~]# ansible -i myhosts vm01 -m script -a \"/root/test.sh\" vm01 | CHANGED => { \"changed\": true, \"rc\": 0, ... 使用ansible-playbook 使用ansible-playbook部署一个tomcat集群 此例演示如何将一个Web应用部署到由 一个NginX节点 + 两个tomcat节点集群，然后模拟升级、回退过程： 1+2集群设定： 主机 应用 监听端口 版本 vm_nginx NginX 80 1.12 vm_tomcat_1 tomcat 8080 8.5.38 vm_tomcat_2 tomcat 8080 8.5.38 为了模拟升级、回退操作，准备两个Web应用： Web应用 版本 说明 examples.war 1.0 旧版本，回退用 examples.war 2.0 新版本，升级用 接下来，编写playbook。 在不是特别清楚每个步骤该如何编写的情况下，先一条一条以文字形式罗列出来： 更新所有节点的yum源 在NginX节点通过yum安装NginX 1.12 在tomcat节点通过yum安装Java 8 解压tomcat安装包到tomcat节点的安装目录 配置tomcat（添加环境变量、开机自启、开放8080端口等） 将examples.war v1.0发布到tomcat并启动tomcat（因初始已有examples，改为替换首页） 配置NginX并启动 停止vm_tomcat_1上的tomcat，将examples.war v2.0发布到tomcat并启动 等待vm_tomcat_1的tomcat启动正常 停止vm_tomcat_2上的tomcat，将examples.war v2.0发布到tomcat并启动 等待vm_tomcat_2的tomcat启动正常 重复步骤8~11，但改用examples.war v1.0，模拟回退过程 据此，可作以下规划。 角色设定： role 说明 包含步骤 tomcat 安装Java 8，tomcat 8，并替换examples首页 1，3 ~ 6 nginx 安装NginX 1.12 1，2，7 upgrade 升级到examples.war v2.0 8 ~ 11 rollback 回退到examples.war v1.0 12 主机组划分： group hosts roles lb vm_nginx nginx web vm_tomcat_1vm_tomcat_2 tomcatupgraderollback 入口playbook划分： name roles start.yml tomcatnginx upgrade.yml upgrade rollback.yml rollback 完整的playbook目录结构如下: [root@VM_0_7_centos test]# tree ansible_tomcat_cluster/ ansible_tomcat_cluster/ |-- ansible.cfg |-- group_vars | `-- web | `-- main.yaml # 对web组可见的变量（参数） |-- hosts `-- roles |-- nginx | |-- files | | `-- nginx.conf # 用于替换/etc/nginx/nginx.conf，已作好负载均衡配置 | `-- tasks | `-- main.yml # 每个tasks下的main.yml（或main.yaml)是对应role的主流程 |-- rollback | |-- files | | `-- examples.war # 此为1.0版本，真实环境中，一般会从远程版本库获取，此处是预先准备好 | |-- handlers | | `-- main.yml | `-- tasks | `-- main.yml |-- rollback.yml |-- start.yml # 执行此playbook，会对lb和web组分别执行nginx和tomcat role的主流程 |-- tomcat | |-- files | | `-- apache-tomcat-8.5.38.tar.gz # 预置的tomcat8解压安装包 | |-- tasks | | `-- main.yaml | |-- templates | | `-- index.html # 首页模板，用于替换examples的首页。此处演示模板的变量注入 | `-- vars | `-- main.yaml # 仅对role tomcat可见的变量（参数） |-- upgrade | |-- files | | `-- examples.war # 此为2.0版本 | |-- handlers | | `-- main.yml # 此处演示处理器的用法，由notify触发（见upgrade/tasks/main.yml） | `-- tasks | `-- main.yml `-- upgrade.yml inventory（即hosts文件）： [root@VM_0_7_centos test]# cat ansible_tomcat/hosts [web] vm_tomcat_1 ansible_host=118.24.217.91 mytitle=\"this is vm01\" vm_tomcat_2 ansible_host=188.131.133.107 mytitle=\"this is vm02\" [lb] vm_nginx ansible_host=188.131.133.107 role nginx的任务编排： --- - name: 安装NginX \"{{ nginx_version }}\" yum: name={{ item }} state=present with_items: - yum-utils - \"nginx-{{ nginx_version }}\" - name: 配置NginX copy: src=nginx.conf dest=/etc/nginx/ - name: 启动NginX service: name=nginx state=started enabled=yes - name: 启用防火墙 service: name=firewalld state=started enabled=yes - name: 开启80端口（临时） shell: firewall-cmd --zone=public --add-port=80/tcp - name: 等待80端口启动 wait_for: port: 80 state: started role tomcat的任务编排： [root@VM_0_7_centos test]# cat ansible_tomcat/roles/install/tasks/main.yaml --- - name: 安装Java8 yum: name={{ item }} state=present with_items: - yum-utils - java-1.8.0 - name: 将tomcat8解压缩到安装目录下 unarchive: src: \"{{ app_name }}.tar.gz\" dest: \"{{ install_path }}\" - name: 注册tomcat环境变量 lineinfile: dest: /etc/profile state: present line: \"{{ item }}\" with_items: - \"export CATALINA_HOME=/usr/local/apache-tomcat-8.5.38/\" - \"export PATH=$CATALINA_HOME/bin:$PATH\" - name: 检测tomcat安装目录是否存在 stat: path={{ tomcat_home }} # 此处演示register用法，可在后面的步骤中打印{{ check_tomcat_result }}以观察其值 register: check_tomcat_result failed_when: not check_tomcat_result.stat.exists - name: 替换examples首页 template: src=index.html dest=\"{{ tomcat_home }}/webapps/examples/index.html\" - name: 启动tomcat shell: nohup \"{{ tomcat_home }}/bin/startup.sh\" & - name: 启用防火墙 service: name=firewalld state=started enabled=yes - name: 开启8080端口（临时） shell: firewall-cmd --zone=public --add-port=8080/tcp - name: 等待8080端口启动 wait_for: port: 8080 state: started - name: 配置tomcat开机自启动 lineinfile: dest: /etc/profile state: present line: \"{{ item }}\" with_items: - \"{{ tomcat_home }}/bin/startup.sh &\" 执行nginx和tomcat的安装部署： [root@VM_0_7_centos test]# ansible-playbook roles/start.yml 结果如下图： 检验环境变量是否已写入/etc/profile： 检验tomcat开机自启动是否已写入/etc/rc.local： 检验index.html模板是否注入成功： 预置的index.html模板： 注入变量后，h3标签值变成了\"this is vm01\"（另一个节点是\"this is vm02\"）： 检验NginX负载均衡是否生效： 执行逐个节点升级： upgrade.yml： - hosts: web serial: 1 # serial值为1，表示一个一个节点地执行 roles: - { role: upgrade } upgrade/tasks/main.yml： - name: 升级 |关闭tomcat command: sh \"{{ tomcat_home }}/bin/shutdown.sh\" - name: 等待8080端口关闭 wait_for: port: 8080 state: stopped notify: clean tomcat cache # 通知handler \"clean tomcat cache\" 处理 （剩余略） handlers/main.yml： - name: clean tomcat cache file: path=\"{{ tomcat_home }}/work/Catalina\" state=absent ignore_errors: yes 模拟应用升级的过程过程如下： [root@VM_0_7_centos ansible_tomcat_cluster]# ansible-playbook roles/upgrade.yml 先对vm_tomat_1： 再对vm_tomcat_2： 升级后，从浏览器访问变成了2.0版本（两个节点的页面一致，未作区分）： 执行逐个节点回退： rollback剧本内容与upgrade相似，从略。 [root@VM_0_7_centos ansible_tomcat_cluster]# ansible-playbook roles/rollback.yml 回退过程类似升级过程，结果如下： 回退后，从浏览器访问变成了1.0版本： 一切符合预期。 至此，NginX 1 + Tomcat 2方式部署war包，然后模拟升级、回退的过程演示完毕。完整的playbook见gitlab仓库 P.s. 以上操作不是使用密码，需事先作SSH免密认证。 # 控制主机生成ssh密钥对，简单点，直接ssh-keygen不带任何参数 ssh-keygen # 发送给被控主机 ssh-copy-id root@localhost # 如果要在控制主机执行部署，需发送公钥给自己 ssh-copy-id root@ 其它模块的用法，及高级特性，请结合实际需求，阅读官方文档《Ansible User Guide》。 参考 Ansible User Guide Ansible中文权威指南 Ansible和SaltStack的比较和选型 （End） Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/docker/":{"url":"docs/deployment/docker/","title":"Docker","keywords":"","body":" Docker 使用客户端 - 服务器架构。Docker客户端与Docker守护进程通信，后者负责构建，运行和分发Docker容器。Docker客户端和守护程序可以在同一系统上运行，也可以将Docker客户端连接到远程Docker守护程序。Docker客户端和守护程序使用REST API，通过UNIX套接字或网络接口进行通信。 Docker vs VM docker-ce for centos Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/normal/docker-learning.html":{"url":"docs/normal/docker-learning.html","title":"Docker","keywords":"","body":"Docker 学习 Docker 是一种操作系统层面的虚拟化技术，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术对进程进行封装隔离 。 Docker是 C/S（客户端/服务器）架构。 Docker客户端与Docker守护进程通信，后者负责构建，运行和分发Docker容器。 Docker客户端和守护程序使用REST API，通过UNIX套接字或网络接口进行通信。 为什么使用Docker 更高效的利用系统资源 更快速的启动时间 一致的运行环境 持续交付和部署 更轻松的迁移 更轻松的维护和扩展 由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。 传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。 开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题。 对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。 使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 Dockerfile 来进行镜像构建，并结合 持续集成(Continuous Integration) 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment) 系统进行自动部署。 而且使用 Dockerfile使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。 由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。 Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。 Docker 与 VM 比较 特性 容器 虚拟机 启动 秒级 分钟级 硬盘使用 一般为 MB 一般为 GB 性能 接近原生 弱于 系统支持量 单机支持上千个容器 一般几十个 基本概念 镜像 Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 镜像采用分层存储，实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。这个特点也使得镜像的复用、定制变的更为容易 镜像在构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。 容器 镜像（Image）和容器（Container）的关系，好比面向对象程序设计中的 类 和 实例 。 容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。 每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，这个为容器运行时读写而准备的存储层叫 容器存储层。 容器存储层的生存周期和容器一样。 不随容器销毁的数据的读写，应该使用 数据卷（Volume）、或者绑定宿主目录。 仓库 仓库是镜像的版本库，不同的镜像标签代表该镜像的不同版本。Docker提供了Docker Registry作为镜像仓库管理服务，由于没有图形界面等原因，一般会使用Docker Hub （外部个人环境）或 Harbor（私服）托管Docker镜像。 常用命令 当前使用的docker版本： [root@VM_0_13_centos ~]# docker version Client: Version: 18.09.6 API version: 1.39 Go version: go1.10.8 Git commit: 481bc77156 Built: Sat May 4 02:34:58 2019 OS/Arch: linux/amd64 Experimental: false Server: Docker Engine - Community Engine: Version: 18.09.6 API version: 1.39 (minimum version 1.12) Go version: go1.10.8 Git commit: 481bc77 Built: Sat May 4 02:02:43 2019 OS/Arch: linux/amd64 Experimental: false 镜像操作 功能 命令 拉取镜像 docker pull [选项] [仓库地址[:端口号]/]仓库名[:标签] 列出镜像 docker images 或者 docker image ls 构建 docker build -t . [-f Dockerfile路径] 重命名 docker tag 推送 docker push 删除镜像 docker image rm [选项] [ ...] 或 docker rmi ... 查看镜像信息 docker inspect 部分示例如下： # docker pull alpine:latest latest: Pulling from library/alpine 188c0c94c7c5: Pull complete Digest: sha256:c0e9560cda118f9ec63ddefb4a173a2b2a0347082d7dff7dc14272e7841a5b5a Status: Downloaded newer image for alpine:latest # docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE alpine latest d6e46aa2470d 10 days ago 5.57MB # 查看镜像的分层信息，可以看到alpine镜像只有1层 # docker inspect alpine:latest |jq \".[0].RootFS\" { \"Type\": \"layers\", \"Layers\": [ \"sha256:ace0eda3e3be35a979cec764a3321b4c7d0b9e4bb3094d20d3ff6782961a8d54\" ] } # docker rmi alpine:latest Untagged: alpine:latest Untagged: alpine@sha256:c0e9560cda118f9ec63ddefb4a173a2b2a0347082d7dff7dc14272e7841a5b5a Deleted: sha256:d6e46aa2470df1d32034c6707c8041158b652f38d2a9ae3d7ad7e7532d22ebe0 Deleted: sha256:ace0eda3e3be35a979cec764a3321b4c7d0b9e4bb3094d20d3ff6782961a8d54 容器操作 功能 命令 运行容器 docker run [选项] [命令] 停止容器 docker stop 列出运行中的容器 docker ps 删除容器 docker rm 部分示例如下： # docker run -it --rm --name test_a alpine:3 sh #-i交互，-t终端，--rm退出即删除 / # ls bin dev etc home lib media mnt opt proc root run sbin srv sys tmp usr var / # exit # 在exit之前，另开一个ssh窗口查看 # docker ps |grep test_a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7495b9bd3c5e alpine:3 \"sh\" 15 seconds ago Up 14 seconds test_a # 退出后再查看，上面这个容器已消失 磁盘空间管理 docker system 命令用于管理磁盘空间。 查看docker磁盘占用 # docker system df TYPE TOTAL ACTIVE SIZE RECLAIMABLE Images 70 22 12.88GB 9.229GB (71%) Containers 36 21 1.924GB 1.281GB (66%) Local Volumes 86 22 1.546GB 7.825MB (0%) Build Cache 0 0 0B 0B 清理docker磁盘空间 docker system prune 命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像(即无tag的镜像)。 docker system prune -a 命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉。 注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉。 # docker system prune WARNING! This will remove: - all stopped containers - all networks not used by at least one container - all dangling images - all dangling build cache Are you sure you want to continue? [y/N] y Deleted Containers: （略） Deleted Networks: （略） Total reclaimed space: 2.627GB Dockerfile 部分常用指令： FROM：指定基础镜像 ARG：参数设置 ENV：环境变量设置 ADD：添加构建上下文 COPY：复制文件 RUN：编写一些shell命令 EXPOSE：暴露容器需监听的端口 CMD：容器启动后执行的命令 ENTRYPOINT：入口指令 有了 CMD 后，为什么还要有 ENTRYPOINT 呢？https://yeasy.gitbook.io/docker_practice/image/dockerfile/entrypoint VOLUME指令 可以通过docker run命令的 -v 参数创建volume挂载点。如果通过dockerfile的 VOLUME 指令可以在镜像中创建挂载点，那么通过该镜像创建容器时不指定 -v 参数时，会在宿主机上随机生成一个数据目录绑定到 VOLUME 所指定的容器内目录。 Dockerfile示例 FROM python:2.7-alpine ARG APP_HOME ENV APP_HOME=${APP_HOME:-/opt/apps} WORKDIR $APP_HOME COPY ./myweb myweb RUN echo \"https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/main/\" > /etc/apk/repositories && \\ echo \"https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/community/\" >> /etc/apk/repositories && \\ apk add gcc g++ make mysql-dev --no-cache && \\ pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple && \\ pip install -U pip && \\ pip install supervisor==4.2.0 && \\ /usr/local/bin/echo_supervisord_conf > /etc/supervisord.conf && \\ mkdir /etc/supervisord.d && \\ echo \"[include]\" >> /etc/supervisord.conf && \\ echo \"files = supervisord.d/*.conf\" >> /etc/supervisord.conf && \\ cd $APP_HOME/myweb && \\ pip install -r requirements.txt && \\ cp $APP_HOME/myweb/myweb_supervisord.conf /etc/supervisord.d/ EXPOSE $PORT CMD [\"supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\"] 构建、运行 发出docker build命令时，当前工作目录称为build context。默认情况下，Dockerfile假定位于此处，但可以使用文件标志（-f）指定其他位置。不管Dockerfile实际位于何处，当前目录中文件和目录的所有递归内容都将作为构建上下文发送到Docker守护进程。 Dockerfile文件名称不是Dockerfile时，需通过 -f 参数指定，点号 “.” 表示当前目录作为构建上下文。如果在demo的上一级目录执行构建，则命令可以这样写：docker build -f demo/Dockerfile-myweb -t myweb:0.1 demo 构建时打印的内容： [root@VM_0_13_centos demo]# docker build -f Dockerfile-myweb -t myweb:0.1 . Sending build context to Docker daemon 1.117MB Step 1/9 : FROM python:2.7-alpine ---> 8579e446340f Step 2/9 : ARG APP_HOME ---> Using cache ---> 9c173fd3707d Step 3/9 : ENV APP_HOME=${APP_HOME:-/opt/apps} ---> Using cache ---> 721207dba6e7 Step 4/9 : WORKDIR $APP_HOME ---> Using cache ---> 99a3b8ce16a1 Step 5/9 : COPY ./myweb myweb ---> 2e9790a1fa90 Step 6/9 : VOLUME [\"$APP_HOME/myweb\"] ---> Running in 1e647a4987d7 Removing intermediate container 1e647a4987d7 ---> dd03f21e2aa6 Step 7/9 : RUN echo \"https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/main/\" > /etc/apk/repositories && echo \"https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/community/\" >> /etc/apk/repositories && apk add gcc g++ make mysql-dev --no-cache && pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple && pip install -U pip && pip install supervisor==4.2.0 && /usr/local/bin/echo_supervisord_conf > /etc/supervisord.conf && mkdir /etc/supervisord.d && echo \"[include]\" >> /etc/supervisord.conf && echo \"files = supervisord.d/*.conf\" >> /etc/supervisord.conf && cd $APP_HOME/myweb && pip install -r requirements.txt && cp $APP_HOME/myweb/myweb_supervisord.conf /etc/supervisord.d/ ---> Running in 3b58653054de fetch https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/main/x86_64/APKINDEX.tar.gz fetch https://mirror.tuna.tsinghua.edu.cn/alpine/v3.11/community/x86_64/APKINDEX.tar.gz (1/27) Upgrading libcrypto1.1 (1.1.1d-r3 -> 1.1.1g-r0) (2/27) Upgrading libssl1.1 (1.1.1d-r3 -> 1.1.1g-r0) (3/27) Installing libgcc (9.3.0-r0) (4/27) Installing libstdc++ (9.3.0-r0) (5/27) Installing binutils (2.33.1-r0) (6/27) Installing gmp (6.1.2-r1) (7/27) Installing isl (0.18-r0) (8/27) Installing libgomp (9.3.0-r0) (9/27) Installing libatomic (9.3.0-r0) (10/27) Installing mpfr4 (4.0.2-r1) (11/27) Installing mpc1 (1.1.0-r1) (12/27) Installing gcc (9.3.0-r0) (13/27) Installing musl-dev (1.1.24-r2) (14/27) Installing libc-dev (0.7.2-r0) (15/27) Installing g++ (9.3.0-r0) (16/27) Installing make (4.2.1-r2) (17/27) Installing pkgconf (1.6.3-r0) (18/27) Installing openssl-dev (1.1.1g-r0) (19/27) Installing zlib-dev (1.2.11-r3) (20/27) Installing mariadb-connector-c (3.1.6-r0) (21/27) Installing mariadb-connector-c-dev (3.1.6-r0) (22/27) Installing mariadb-common (10.4.15-r0) (23/27) Installing libaio (0.3.112-r1) (24/27) Installing xz-libs (5.2.4-r0) (25/27) Installing pcre (8.43-r0) (26/27) Installing mariadb-embedded (10.4.15-r0) (27/27) Installing mariadb-dev (10.4.15-r0) Executing busybox-1.31.1-r9.trigger Executing ca-certificates-20191127-r1.trigger OK: 206 MiB in 57 packages Writing to /root/.config/pip/pip.conf DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple Collecting pip Downloading https://pypi.tuna.tsinghua.edu.cn/packages/cb/28/91f26bd088ce8e22169032100d4260614fc3da435025ff389ef1d396a433/pip-20.2.4-py2.py3-none-any.whl (1.5 MB) Installing collected packages: pip Attempting uninstall: pip Found existing installation: pip 20.0.2 Uninstalling pip-20.0.2: Successfully uninstalled pip-20.0.2 Successfully installed pip-20.2.4 DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality. Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple Collecting supervisor==4.2.0 Downloading https://pypi.tuna.tsinghua.edu.cn/packages/2f/43/130066cd6003233401142f5f98cd09c93165f5c6408f850dd965b4f2470e/supervisor-4.2.0-py2.py3-none-any.whl (738 kB) Installing collected packages: supervisor Successfully installed supervisor-4.2.0 DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality. Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple Collecting django==1.11 Downloading https://pypi.tuna.tsinghua.edu.cn/packages/47/a6/078ebcbd49b19e22fd560a2348cfc5cec9e5dcfe3c4fad8e64c9865135bb/Django-1.11-py2.py3-none-any.whl (6.9 MB) Collecting mysqlclient==1.3.12 Downloading https://pypi.tuna.tsinghua.edu.cn/packages/6f/86/bad31f1c1bb0cc99e88ca2adb7cb5c71f7a6540c1bb001480513de76a931/mysqlclient-1.3.12.tar.gz (89 kB) Collecting pytz Downloading https://pypi.tuna.tsinghua.edu.cn/packages/12/f8/ff09af6ff61a3efaad5f61ba5facdf17e7722c4393f7d8a66674d2dbd29f/pytz-2020.4-py2.py3-none-any.whl (509 kB) Building wheels for collected packages: mysqlclient Building wheel for mysqlclient (setup.py): started Building wheel for mysqlclient (setup.py): finished with status 'done' Created wheel for mysqlclient: filename=mysqlclient-1.3.12-cp27-cp27mu-linux_x86_64.whl size=114991 sha256=aaaaa66718424c6b59bf7d69bd448408c90f72b86fad837db5a0faeaf4755278 Stored in directory: /root/.cache/pip/wheels/ec/42/25/33153f9d017dea3007e9da4daa09ac5ab23e853ec2c2c6a14d Successfully built mysqlclient Installing collected packages: pytz, django, mysqlclient Successfully installed django-1.11 mysqlclient-1.3.12 pytz-2020.4 Removing intermediate container 3b58653054de ---> 74221bc92419 Step 8/9 : EXPOSE $PORT ---> Running in bc109d388ec3 Removing intermediate container bc109d388ec3 ---> 7f45f5e2be2c Step 9/9 : CMD [\"supervisord\", \"-n\", \"-c\", \"/etc/supervisord.conf\"] ---> Running in f0f4f867b879 Removing intermediate container f0f4f867b879 ---> 4eede34e1dad Successfully built 4eede34e1dad Successfully tagged myweb:0.1 查看容器进程 [root@VM_0_13_centos demo]# docker ps |grep myweb 9ad3a7949611 myweb:0.1 \"supervisord -n -c /…\" 7 minutes ago Up 7 minutes 0.0.0.0:8009->8000/tcp myweb 其中 9ad3a7949611 是容器id，也是容器的hostname 查看volume [root@VM_0_13_centos demo]# docker inspect 9ad3a7949611 |jq \".[0].Mounts\" [ { \"Type\": \"volume\", \"Name\": \"9bf8c23683f1d587c6184216377472ae5262a3f0a7f39794bb4e13124616bb2f\", \"Source\": \"/var/lib/docker/volumes/9bf8c23683f1d587c6184216377472ae5262a3f0a7f39794bb4e13124616bb2f/_data\", \"Destination\": \"/opt/apps/myweb\", \"Driver\": \"local\", \"Mode\": \"\", \"RW\": true, \"Propagation\": \"\" } ] [root@VM_0_13_centos demo]# ls /var/lib/docker/volumes/9bf8c23683f1d587c6184216377472ae5262a3f0a7f39794bb4e13124616bb2f/_data manage.py myweb myweb_supervisord.conf requirements.txt static templates visit 查看env [root@VM_0_13_centos demo]# docker inspect 9ad3a7949611 |jq \".[0].Config.Env\" [ \"PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\", \"LANG=C.UTF-8\", \"PYTHONIOENCODING=UTF-8\", \"GPG_KEY=C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF\", \"PYTHON_VERSION=2.7.18\", \"PYTHON_PIP_VERSION=20.0.2\", \"PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/d59197a3c169cef378a22428a3fa99d33e080a5d/get-pip.py\", \"PYTHON_GET_PIP_SHA256=421ac1d44c0cf9730a088e337867d974b91bdce4ea2636099275071878cc189e\", \"APP_HOME=/opt/apps\" ] 进入容器查看 [root@VM_0_13_centos demo]# docker exec -it myweb sh /opt/apps # hostname bc8b06c2c6a1 /opt/apps # env PYTHONIOENCODING=UTF-8 HOSTNAME=9ad3a7949611 PYTHON_PIP_VERSION=20.0.2 SHLVL=1 HOME=/root GPG_KEY=C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/d59197a3c169cef378a22428a3fa99d33e080a5d/get-pip.py TERM=xterm APP_HOME=/opt/apps PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin LANG=C.UTF-8 PYTHON_VERSION=2.7.18 PWD=/opt/apps PYTHON_GET_PIP_SHA256=421ac1d44c0cf9730a088e337867d974b91bdce4ea2636099275071878cc189e /opt/apps # ps -ef PID USER TIME COMMAND 1 root 0:01 {supervisord} /usr/local/bin/python /usr/local/bin/supervisord -n -c /etc/supervisord.conf 7 root 0:00 /usr/local/bin/python manage.py runserver 0.0.0.0:8000 17 root 0:56 /usr/local/bin/python manage.py runserver 0.0.0.0:8000 34 root 0:00 sh 40 root 0:00 ps -ef Dockerfile最佳实践 基础镜像 如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。 不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 swarm、etcd。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 FROM scratch 会让镜像体积更加小巧。使用 Go 语言 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。 多阶段构建 docker-compose Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。 Compose 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。 Compose 中有两个重要的概念： 服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。 项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。 Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。 安装 $ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose $ sudo chmod +x /usr/local/bin/docker-compose 或者通过pip安装 $ sudo pip install -U docker-compose docker-compose示例 —— WordPress docker-compose.yml version: \"3\" services: db: image: mysql:8.0 command: - --default_authentication_plugin=mysql_native_password - --character-set-server=utf8mb4 - --collation-server=utf8mb4_unicode_ci volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - db image: wordpress:latest ports: - \"8020:80\" restart: always environment: WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress volumes: db_data: 启动 [root@VM_0_13_centos wordpress-demo]# docker-compose up -d Creating network \"wordpress-demo_default\" with the default driver Creating wordpress-demo_db_1 ... done Creating wordpress-demo_wordpress_1 ... done [root@VM_0_13_centos wordpress-demo]# docker-compose ps Name Command State Ports ----------------------------------------------------------------------------------- wordpress-demo_db_1 docker-entrypoint.sh --def ... Up 3306/tcp, 33060/tcp wordpress-demo_wordpress_1 docker-entrypoint.sh apach ... Up 0.0.0.0:8020->80/tcp 查看db数据卷 [root@VM_0_13_centos wordpress-demo]# docker inspect wordpress-demo_db_1 |jq \".[0].Mounts\" [ { \"Type\": \"volume\", \"Name\": \"wordpress-demo_db_data\", \"Source\": \"/var/lib/docker/volumes/wordpress-demo_db_data/_data\", \"Destination\": \"/var/lib/mysql\", \"Driver\": \"local\", \"Mode\": \"rw\", \"RW\": true, \"Propagation\": \"\" } ] [root@VM_0_13_centos wordpress-demo]# ls /var/lib/docker/volumes/wordpress-demo_db_data/_data auto.cnf binlog.000004 client-cert.pem ib_buffer_pool ibtmp1 performance_schema server-key.pem wordpress binlog.000001 binlog.index client-key.pem ibdata1 #innodb_temp private_key.pem sys binlog.000002 ca-key.pem #ib_16384_0.dblwr ib_logfile0 mysql public_key.pem undo_001 binlog.000003 ca.pem #ib_16384_1.dblwr ib_logfile1 mysql.ibd server-cert.pem undo_002 进入容器查看 [root@VM_0_13_centos wordpress-demo]# docker-compose exec db sh # ls bin boot dev docker-entrypoint-initdb.d entrypoint.sh etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var # hostname 9a3da80a05ac # env HOSTNAME=9a3da80a05ac MYSQL_MAJOR=8.0 HOME=/root MYSQL_ROOT_PASSWORD=somewordpress TERM=xterm MYSQL_PASSWORD=wordpress PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin MYSQL_VERSION=8.0.22-1debian10 MYSQL_USER=wordpress GOSU_VERSION=1.12 PWD=/ MYSQL_DATABASE=wordpress # which mysqld /usr/sbin/mysqld # ls /var/lib/mysql '#ib_16384_0.dblwr' binlog.000001 binlog.index client-key.pem ibdata1 performance_schema server-key.pem wordpress '#ib_16384_1.dblwr' binlog.000002 ca-key.pem ib_buffer_pool ibtmp1 private_key.pem sys '#innodb_temp' binlog.000003 ca.pem ib_logfile0 mysql public_key.pem undo_001 auto.cnf binlog.000004 client-cert.pem ib_logfile1 mysql.ibd server-cert.pem undo_002 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/docker/docker-prometheus.html":{"url":"docs/deployment/docker/docker-prometheus.html","title":"Prometheus","keywords":"","body":"Prometheus version: '3.0' services: alertmanager: image: prom/alertmanager volumes: - ./config/alertmanager:/etc/alertmanager ports: - \"9093:9093\" environment: SERVICE_NAME: alertmanager SERVICE_TAGS: \"alertmanager,http\" prometheus: image: prom/prometheus volumes: - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml - ./config/prometheus/rules:/etc/prometheus/rules - /etc/localtime:/etc/localtime environment: SERVICE_NAME: prometheus SERVICE_TAGS: \"prometheus-target,prometheus,http\" ports: - \"9090:9090\" grafana: image: grafana/grafana volumes: - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini - /data/grafana:/var/lib/grafana environment: - \"GF_SERVER_ROOT_URL=http://home.grafana.com\" - \"GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}\" - \"SERVICE_NAME=grafana\" - \"SERVICE_TAGS=prometheus-target,grafana,http\" ports: - 3000:3000 node-exporter: image: prom/node-exporter volumes: - /proc:/host/proc:ro - /sys:/host/sys:ro - /:/rootfs:ro network_mode: host ports: - 9100:9100 environment: SERVICE_TAGS: \"prometheus-target\" command: - '--path.procfs=/host/proc' - '--path.sysfs=/host/sys' - '--collector.filesystem.ignored-mount-points=\"^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)\"' - '--collector.filesystem.ignored-fs-types=\"^(sys|proc|auto|cgroup|devpts|ns|au|fuse\\.lxc|mqueue)(fs|)$$\"' Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/docker/docker-nginx-consul.html":{"url":"docs/deployment/docker/docker-nginx-consul.html","title":"Nginx Consul","keywords":"","body":"Nginx + Consul version: '3' services: consul: image: consul environment: SERVICE_8500_NAME: \"consul-ui\" SERVICE_8500_TAGS: \"consul,http,ui\" ports: - 8500:8500 network_mode: host volumes: - /data/consul/data:/consul/data - ./conf.d:/consul/config command: \"agent -server -bootstrap-expect 1 -ui -disable-host-node-id -client 0.0.0.0 -bind 172.17.0.13\" registrator: image: gliderlabs/registrator depends_on: - consul volumes: - /var/run/docker.sock:/tmp/docker.sock network_mode: host environment: CONSUL_HTTP_TOKEN: ${CONSUL_HTTP_TOKEN} command: -internal consul://127.0.0.1:8500 nginx-consul: image: nginx-consul:alpine build: . depends_on: - consul - registrator ports: - 80:80 network_mode: host volumes: - ./files/nginx.conf.ctmpl:/etc/nginx/nginx.conf.ctmpl environment: HOST_TYPE: ${HOST_TYPE} CONSUL_HTTP_TOKEN: ${CONSUL_HTTP_TOKEN} command: -consul-addr=127.0.0.1:8500 -wait=5s -template /etc/nginx/nginx.conf.ctmpl:/etc/nginx/conf.d/app.conf:/etc/nginx/nginx.sh Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/docker/docker-pmm.html":{"url":"docs/deployment/docker/docker-pmm.html","title":"PMM","keywords":"","body":"PMM Percona Monitoring and Management (PMM)是一款开源的MySQL、MongoDB性能监控工具，PMM客户端负责收集DB监控数据，PMM服务端从已连接的客户端拉取数据，并通过第三方软件Grafana展示图表。 version: '2' services: pmm-data: image: percona/pmm-server:1.1.1 container_name: pmm-data volumes: - /opt/prometheus/data - /opt/consul-data - /var/lib/mysql - /var/lib/grafana entrypoint: /bin/true pmm-server: image: percona/pmm-server:1.1.1 container_name: pmm-server ports: - 8088:80 restart: always environment: - SERVICE_80_NAME=pmm - SERVICE_80_TAGS=pmm,http - SERVER_USER=admin - SERVER_PASSWORD=${PMM_SERVER_PASSWORD} - METRICS_RETENTION=720h - METRICS_MEMORY=4194304 - METRICS_RESOLUTION=5s - QUERIES_RETENTION=30 volumes_from: - pmm-data 或者 #!/bin/sh tag0=$1 tag=${tag0:=1.1.1} docker stop pmm-server docker rm pmm-server pmm-data docker create \\ -v /opt/prometheus/data \\ -v /opt/consul-data \\ -v /var/lib/mysql \\ -v /var/lib/grafana \\ --name pmm-data \\ percona/pmm-server:$tag /bin/true docker run -d \\ -p 8088:80 \\ --volumes-from pmm-data \\ --name pmm-server \\ -e SERVER_USER=admin \\ -e SERVICE_80_NAME=pmm \\ -e SERVICE_80_TAGS=pmm,http,ui \\ -e SERVER_PASSWORD=${PMM_SERVER_PASSWORD} \\ --restart always \\ percona/pmm-server:$tag Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/docker/docker-redis.html":{"url":"docs/deployment/docker/docker-redis.html","title":"Redis in Docker","keywords":"","body":"Redis [root@localhost redis]# docker inspect redis_redis_1 |grep net \"NetworkMode\": \"redis_localnet\", \"SandboxKey\": \"/var/run/docker/netns/a498b7651db0\", \"redis_localnet\": { [root@localhost redis]# docker run -it --network redis_localnet --rm redis redis-cli -h redis redis:6379> get k (nil) redis:6379> exit [root@localhost redis]# docker run -it --rm redis redis-cli -h 192.168.80.2 192.168.80.2:6379> set k abc OK 192.168.80.2:6379> get k \"abc\" 192.168.80.2:6379> exit [root@localhost redis]# docker run -it --network redis_localnet --rm redis redis-cli -h redis redis:6379> get k \"abc\" redis:6379> del k (integer) 1 redis:6379> 从其它节点访问： [root@localhost ~]# docker run -it --rm redis redis-cli -h 10.1.7.211 Unable to find image 'redis:latest' locally latest: Pulling from library/redis 27833a3ba0a5: Already exists cde8019a4b43: Pull complete 97a473b37fb2: Pull complete c6fe0dfbb7e3: Pull complete 39c8f5ba1240: Pull complete cfbdd870cf75: Pull complete Digest: sha256:000339fb57e0ddf2d48d72f3341e47a8ca3b1beae9bdcb25a96323095b72a79b Status: Downloaded newer image for redis:latest 10.1.7.211:6379> get k (nil) 10.1.7.211:6379> set k abcdefg OK 10.1.7.211:6379> exit 创建集群： #!/bin/sh para=\"\" port=8000 # 6个节点8001——8006 for i in `seq 1 6` do # host? 192.168.* # ipaddr=$(docker inspect new_redis_redis${i}_1 |jq '.[0].NetworkSettings.Networks.new_redis_default.IPAddress' |sed 's/\\\"//g') # bridge? 172.* ipaddr=$(docker inspect new_redis_redis${i}_1 |jq '.[0].NetworkSettings.Networks.bridge.IPAddress' |sed 's/\\\"//g') let port=port+1 echo $ipaddr:$port para=\"$para $ipaddr:$port\" done echo $para # 172.17.0.12:8001 172.17.0.8:8002 172.17.0.13:8003 172.17.0.9:8004 172.17.0.10:8005 172.17.0.11:8006 docker run --rm -it inem0o/redis-trib create --replicas 1 $para 查看集群： [root@localhost new_redis]# docker run --rm -it inem0o/redis-trib info 172.17.0.11:8006 172.17.0.8:8002@18002 (f015467b...) -> 178239 keys | 5462 slots | 1 slaves. 172.17.0.12:8001@18001 (17687354...) -> 178166 keys | 5461 slots | 1 slaves. 172.17.0.13:8003@18003 (2097e0e6...) -> 178106 keys | 5461 slots | 1 slaves. [OK] 534511 keys in 3 masters. 32.62 keys per slot on average. [root@localhost new_redis]# docker run --rm -it redis redis-cli -h 172.17.0.12 -p 8001 172.17.0.12:8001> cluster nodes 6104ad4f30a511d642aebb1bce8dd77bb5d10621 172.17.0.11:8006@18006 slave 2097e0e6a66c6adb6ddbe3bc783663d390a9360d 0 1557199119530 6 connected f9a309feda3b442dbf555712c7ff47026dc4700b 172.17.0.9:8004@18004 slave 1768735459c96a46722b1f0f038c125fa88aef83 0 1557199119000 4 connected f015467b0439b9694a6d633cc62a2502079e74f7 172.17.0.8:8002@18002 master - 0 1557199120532 2 connected 5461-10922 1768735459c96a46722b1f0f038c125fa88aef83 172.17.0.12:8001@18001 myself,master - 0 1557199118000 1 connected 0-5460 2097e0e6a66c6adb6ddbe3bc783663d390a9360d 172.17.0.13:8003@18003 master - 0 1557199120030 3 connected 10923-16383 8126fa4d990c4e08cdb7d3e2ebf59771445b3a1a 172.17.0.10:8005@18005 slave f015467b0439b9694a6d633cc62a2502079e74f7 0 1557199119530 5 connected redis-single docker-compose.yml: version: '3' services: redis: image: redis ports: - \"6379:6379\" volumes: - ./data:/data - ./conf/redis.conf:/etc/redis.conf networks: localnet: aliases: - my-redis-server command: [\"redis-server\", \"/etc/redis.conf\"] networks: localnet: redis-cluster 单节点多容器redis集群 docker-compose.yml: version: '3' services: redis1: image: redis-cluster restart: always volumes: - /data/redis/6381/data:/data environment: - REDIS_PORT=6381 ports: - '6381:6381' #服务端口 - '16381:16381' #集群端口 redis2: image: redis-cluster restart: always volumes: - /data/redis/6382/data:/data environment: - REDIS_PORT=6382 ports: - '6382:6382' - '16382:16382' redis3: image: redis-cluster restart: always volumes: - /data/redis/6383/data:/data environment: - REDIS_PORT=6383 ports: - '6383:6383' - '16383:16383' redis4: image: redis-cluster restart: always volumes: - /data/redis/6384/data:/data environment: - REDIS_PORT=6384 ports: - '6384:6384' - '16384:16384' redis5: image: redis-cluster restart: always volumes: - /data/redis/6385/data:/data environment: - REDIS_PORT=6385 ports: - '6385:6385' - '16385:16385' redis6: image: redis-cluster restart: always volumes: - /data/redis/6386/data:/data environment: - REDIS_PORT=6386 ports: - '6386:6386' - '16386:16386' redis.conf: #端口 port REDIS_PORT #开启集群 cluster-enabled yes #配置文件 cluster-config-file nodes.conf cluster-node-timeout 5000 #更新操作后进行日志记录 appendonly yes #设置主服务的连接密码 # masterauth #设置从服务的连接密码 # requirepass entrypoint.sh: #!/bin/sh #只作用于当前进程,不作用于其创建的子进程 set -e #$0--Shell本身的文件名 $1--第一个参数 $@--所有参数列表 # allow the container to be started with `--user` if [ \"$1\" = 'redis-server' -a \"$(id -u)\" = '0' ]; then sed -i 's/REDIS_PORT/'$REDIS_PORT'/g' /usr/local/etc/redis.conf chown -R redis . #改变当前文件所有者 exec gosu redis \"$0\" \"$@\" #gosu是sudo轻量级”替代品” fi exec \"$@\" Dockerfile: FROM redis RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime RUN echo 'Asia/Shanghai' >/etc/timezone # ENV REDIS_PORT 8000 # ENV REDIS_PORT_NODE 18000 EXPOSE $REDIS_PORT # EXPOSE $REDIS_PORT_NODE COPY entrypoint.sh /usr/local/bin/ COPY redis.conf /usr/local/etc/ RUN chmod 777 /usr/local/etc/redis.conf RUN chmod +x /usr/local/bin/entrypoint.sh ENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"] CMD [\"redis-server\", \"/usr/local/etc/redis.conf\"] Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/docker/docker-ldap.html":{"url":"docs/deployment/docker/docker-ldap.html","title":"LDAP","keywords":"","body":"LDAP ldap: image: osixia/openldap volumes: - /data/ldap/ldap:/var/lib/ldap - /data/ldap/slapd.d:/etc/ldap/slapd.d ports: - 389:389 environment: LDAP_TLS: false \\ LDAP_ORGANISATION: \"lzzeng\" \\ LDAP_DOMAIN: \"lzzeng.cn\" \\ LDAP_ADMIN_PASSWORD: \"xxxxxx\" \\ LDAP_CONFIG_PASSWORD: \"xxxxxx\" \\ restart: always ldapadmin: image: osixia/phpldapadmin link: - ldap ports: - 8090:80 environment: PHPLDAPADMIN_HTTPS: false PHPLDAPADMIN_LDAP_HOSTS: ldap restart: always Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/docker/docker-harbor.html":{"url":"docs/deployment/docker/docker-harbor.html","title":"Harbor","keywords":"","body":"Harbor github：https://github.com/goharbor/harbor 环境 wget -P /etc/yum.repos.d https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo yum install docker-ce-18.09.6 docker-ce-cli-18.09.6 -y [root@VM_0_4_centos harbor]# docker version Client: Version: 18.09.6 API version: 1.39 Go version: go1.10.8 Git commit: 481bc77156 Built: Sat May 4 02:34:58 2019 OS/Arch: linux/amd64 Experimental: false Server: Docker Engine - Community Engine: Version: 18.09.6 API version: 1.39 (minimum version 1.12) Go version: go1.10.8 Git commit: 481bc77 Built: Sat May 4 02:02:43 2019 OS/Arch: linux/amd64 Experimental: false [root@VM_0_4_centos harbor]# [root@VM_0_4_centos harbor]# [root@VM_0_4_centos harbor]# [root@VM_0_4_centos harbor]# docker-compose version docker-compose version 1.24.0, build 0aa59064 docker-py version: 3.7.2 CPython version: 3.6.8 OpenSSL version: OpenSSL 1.1.0j 20 Nov 2018 安装 获取安装工具 wget https://github.com/goharbor/harbor/releases/download/v1.10.1/harbor-online-installer-v1.10.1.tgz 创建自签名证书 openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout ./tls.key -out ./tls.crt -subj \"/CN=harbor.lzzeng.cn\" 修改配置 hostname: harbor.keep.com # http related config http: # port for http, default is 80. If https enabled, this port will redirect to https port port: 80 # https related config https: # https port for harbor, default is 443 port: 443 # The path of cert and key files for nginx certificate: /opt/docker/harbor/tls.crt private_key: /opt/docker/harbor/tls.key 登录设置 [root@n01 ~]# docker login -u admin -p xxx https://harbor.lzzeng.cn/ WARNING! Using --password via the CLI is insecure. Use --password-stdin. Error response from daemon: Get https://harbor.lzzeng.cn/v2/: x509: certificate signed by unknown authority [root@n01 ~]# cat /etc/docker/daemon.json { \"registry-mirrors\": [\"https://zdojag2v.mirror.aliyuncs.com\"], \"insecure-registries\": [\"harbor.lzzeng.cn\"] } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/docker/docker-apollo.html":{"url":"docs/deployment/docker/docker-apollo.html","title":"Apollo","keywords":"","body":"Apollo配置中心 PRO 192.168.101.68 version: '3.4' services: configservice: image: apollo:1.4.0 ports: - 9880:9880 environment: - spring_datasource_url=jdbc:mysql://192.168.101.28:3306/ApolloConfigDB?characterEncoding=utf8 - spring_datasource_username=apollo - spring_datasource_password=xxx - logging.file=/opt/logs/configservice.log - server.port=9880 - SERVICE_NAME=eureka - SERVICE_TAGS=eureka,http volumes: - /var/log/apollo:/opt/logs command: configservice.jar network_mode: host adminservice: image: apollo:1.4.0 environment: - spring_datasource_url=jdbc:mysql://192.168.101.28:3306/ApolloConfigDB?characterEncoding=utf8 - spring_datasource_username=apollo - spring_datasource_password=xxx - logging.file=/opt/logs/adminservice.log - server.port=9890 volumes: - /var/log/apollo:/opt/logs command: adminservice.jar network_mode: host depends_on: - configservice portal: image: apollo:1.4.0 environment: - spring_datasource_url=jdbc:mysql://192.168.101.28:3306/ApolloPortalDB?characterEncoding=utf8 - spring_datasource_username=apollo - spring_datasource_password=xxx - server.port=9800 - logging.file=/opt/logs/portal.log - SERVICE_NAME=apollo - SERVICE_TAGS=apollo,http volumes: - /var/log/apollo:/opt/logs command: -Ddev_meta=http://10.1.7.211:9880 -Dpro_meta=http://localhost:9880 -Dfat_meta=http://192.168.100.212:9880 portal.jar network_mode: host depends_on: - adminservice ports: - 9800:9800 DEV 10.1.7.211 version: '3.4' services: configservice: image: apollo:1.4.0 ports: - 9880:9880 environment: - spring_datasource_url=jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8 - spring_datasource_username=root - spring_datasource_password=xxx - logging.file=/opt/logs/configservice.log - server.port=9880 - SERVICE_NAME=eureka - SERVICE_TAGS=eureka,http volumes: - /var/log/apollo:/opt/logs command: configservice.jar network_mode: host adminservice: image: apollo:1.4.0 environment: - spring_datasource_url=jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8 - spring_datasource_username=root - spring_datasource_password=xxx - logging.file=/opt/logs/adminservice.log - server.port=9890 volumes: - /var/log/apollo:/opt/logs command: adminservice.jar network_mode: host depends_on: - configservice FAT 192.168.100.212 version: '3.4' services: configservice: image: apollo:1.4.0 ports: - 9880:9880 environment: - spring_datasource_url=jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8 - spring_datasource_username=root - spring_datasource_password=xxx - logging.file=/opt/logs/configservice.log - server.port=9880 - SERVICE_NAME=eureka - SERVICE_TAGS=eureka,http volumes: - /var/log/apollo:/opt/logs command: configservice.jar network_mode: host adminservice: image: apollo:1.4.0 environment: - spring_datasource_url=jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8 - spring_datasource_username=root - spring_datasource_password=xxx - logging.file=/opt/logs/adminservice.log - server.port=9890 volumes: - /var/log/apollo:/opt/logs command: adminservice.jar network_mode: host depends_on: - configservice Dockerfile: FROM maven:3.5-jdk-8-alpine AS build #LABEL Author=\"xxx\" ARG version=1.4.0 ARG package_name=apollo-${version}.tar.gz COPY build.sh /scripts/ WORKDIR /src RUN wget -c https://github.com/ctripcorp/apollo/archive/v${version}.tar.gz -O ${package_name} \\ && tar zxf ${package_name} --strip-components=1 \\ && cp /scripts/build.sh scripts/ \\ && chmod 777 scripts/build.sh RUN scripts/build.sh RUN mkdir /app \\ && cp apollo-configservice/target/apollo-configservice-${version}.jar /app/configservice.jar \\ && cp apollo-adminservice/target/apollo-adminservice-${version}.jar /app/adminservice.jar \\ && cp apollo-portal/target/apollo-portal-${version}.jar /app/portal.jar RUN apk add -U tzdata \\ && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime FROM java:8-jre-alpine WORKDIR /app COPY --from=build /app . COPY --from=build /etc/localtime /etc/localtime ENTRYPOINT [ \"java\", \"-jar\" ] CMD [ \"configservice.jar\" ] build.sh #!/bin/sh echo \"==== starting to build config-service and admin-service ====\" mvn clean package -DskipTests -pl apollo-configservice,apollo-adminservice -am -Dapollo_profile=github -Dspring_datasource_url=jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8 -Dspring_datasource_username=root echo \"==== starting to build portal ====\" mvn clean package -DskipTests -pl apollo-portal -am -Dapollo_profile=github,auth -Dspring_datasource_url=jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8 -Dspring_datasource_username=root -Ddev_meta=http://localhost:9880 编镜像、启容器： docker build -t apollo:1.4.0 . docker-compose up -d 导入数据表： create database ApolloConfigDB; create database ApolloPortalDB; GRANT ALL PRIVILEGES ON ApolloPortalDB.*,ApolloConfigDB.* TO apollo@'%' IDENTIFIED BY 'password'; source ApolloPortalDB.sql source ApolloConfigDB.sql #------------或 mysql -u apollo -p -D ApolloConfigDB Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/":{"url":"docs/deployment/k8s/","title":"Kubernetes","keywords":"","body":" Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications. Kubernetes (K8s) 是一个开源容器编排引擎，用于自动化容器化应用程序的部署，扩展和管理。 应用部署方式的演变历史：物理机部署 => 虚拟机部署 => 容器化部署 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/normal/k8s-learning.html":{"url":"docs/normal/k8s-learning.html","title":"K8s","keywords":"","body":"K8s是什么 Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications. Kubernetes (K8s) 是一个开源容器编排引擎，用于自动化容器化应用程序的部署，扩展和管理。 应用部署方式的演变历史：物理机部署 => 虚拟机部署 => 容器化部署 为什么使用K8s 安装K8s 个人尝试过以下四种安装方式： kubeadm 官网提供的方法。大致过程是： 初始化环境，安装docker、配置防火墙等 先在各个节点yum安装kubelet、kubeadm、kubectl 在一个master节点kubeadm init 获得kubeadm join集群的命令 在其它节点上执行kubeadm join命令加入集群 rancher 先通过docker启动一个rancher管理界面，然后从管理界面复制添加节点的命令，在待加入集群的节点上执行命令，逐个添加节点创建K8s集群。界面如下： rke rancher官方提供的一个安装工具，通过一个节点配置文件描述集群各个节点信息。 例如： nodes: - address: 192.168.100.79 user: rancher role: [controlplane,worker,etcd] - address: 192.168.100.80 user: rancher role: [controlplane,worker,etcd] - address: 192.168.100.81 user: rancher role: [controlplane,etcd] 执行： rke up --config 即可完成集群的初步安装，相比其它方式更快捷，但能安装的版本滞后于官网，最新的K8s版本可能尚未被rancher支持。 rancher集群管理界面类似下图： 3个master、etcd + 3个node: kubespray 这是一种通过ansible-playbook自动安装K8s的方式。默认和kubeadm一样需要能访问国外网站，否则有点镜像或二进制文件获取不到。也可自行修改相关地址，主要涉及以下几个文件： roles/download/defaults/main.yml inventory/sample/group_vars/k8s-cluster/k8s-cluster.yml roles/kubespray-defaults/defaults/main.yaml 修改其中的地址，替换成国内能访问到的镜像源，安装应该就能顺利进行了。默认会一并安装dashboard。 其主机清单（inventory）文件格式如下： [all] node1 ansible_host=192.168.100.79 ip=192.168.100.79 node2 ansible_host=192.168.100.80 ip=192.168.100.80 node3 ansible_host=192.168.100.81 ip=192.168.100.81 node4 ansible_host=192.168.100.216 ip=192.168.100.216 node5 ansible_host=192.168.100.217 ip=192.168.100.217 node6 ansible_host=192.168.100.218 ip=192.168.100.218 [kube-master] node1 node2 [etcd] node1 node2 node3 [kube-node] node3 node4 node5 node6 [k8s-cluster:children] kube-master kube-node 详见官方github: https://github.com/kubernetes-sigs/kubespray/tree/release-2.14 安装kubernetes dashboard 参考官方文档：https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/ 在集群已经安装成功的前提下： kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml 获取登录令牌 kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep kubernetes-dashboard-token|awk '{print $1}')|grep token:|awk '{print $2}' 访问 https://:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/ 或者绑定域名访问（涉及ingress） 使用K8s 以下操作在我个人使用的K8s环境： [root@m01 myweb]# kubectl get nodes NAME STATUS ROLES AGE VERSION m01 Ready master 255d v1.15.1 m02 Ready master 255d v1.15.1 m03 Ready master 255d v1.15.1 n01 Ready node 255d v1.15.1 n02 Ready node 255d v1.15.1 n03 Ready node 255d v1.15.1 一些概念 service RBAC ​ role based access control deployment ingress secret configmap kubectl 命令 kubectl create myweb部署至K8s 重制镜像 之前我们是使用docker运行myweb这个demo的，并且为了简单，将mysql的用户名、密码写死在settings.py里了。 现在改成如下，让name, user, password, host, port分别从环境变量DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT 获取。 DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': os.environ.get('DB_NAME'), 'USER': os.environ.get('DB_USER') 'PASSWORD': os.environ.get('DB_PASSWORD'), 'HOST': os.environ.get('DB_HOST'), 'PORT': os.environ.get('DB_PORT'), 'OPTIONS': {} } } 重新制作镜像 myweb:0.2，并上传至 harbor 涉及到环境变量的传递，可以通过docker-compose验证一下新镜像是否正常： docker-compose.yml [root@localhost demo]# cat docker-compose.yml db: image: myweb:0.2 environment: DB_NAME: \"testpv\" DB_USER: \"root\" DB_PASSWORD: \"mysql\" DB_HOST: 172.17.0.13 DB_PORT: 3306 restart: always #command: [''] volumes: - /opt/log:/var/log ports: - 8009:8000 测试没问题： [root@localhost demo]# docker-compose up -d Creating demo_db_1 ... done [root@localhost demo]# docker-compose ps Name Command State Ports --------------------------------------------------------------------------- demo_db_1 supervisord -n -c /etc/sup ... Up 0.0.0.0:8009->8000/tcp [root@localhost demo]# curl http://localhost:8009/visit/add/ ID date ip_addr 47 2020-11-08 11:55:56 172.17.0.1 另外，也可以直接通过docker run启动，--env-file加载环境变量： [root@localhost demo]# cat env DB_NAME=testpv DB_USER=root DB_PASSWORD=mysql DB_HOST=172.17.0.13 DB_PORT=3306 [root@localhost demo]# docker run -d --name myweb -p 8009:8000 --env-file=env myweb:0.2 推送镜像至harbor [root@localhost demo]# docker tag myweb:0.2 harbor.lzzeng.cn/devops/myweb:0.2 [root@localhost demo]# docker image ls myweb REPOSITORY TAG IMAGE ID CREATED SIZE myweb 0.2 0245c29d6060 25 minutes ago 325MB [root@localhost demo]# docker image ls |grep myweb myweb 0.2 0245c29d6060 25 minutes ago 325MB harbor.lzzeng.cn/devops/myweb 0.2 0245c29d6060 25 minutes ago 325MB [root@localhost demo]# [root@localhost demo]# docker push harbor.lzzeng.cn/devops/myweb:0.2 The push refers to repository [harbor.lzzeng.cn/devops/myweb] 7615e9027750: Pushed 8daa36f6b1b1: Pushed c4b9879e46c2: Pushed 879c0d8666e3: Mounted from devops/alerts 20a7b70bdf2f: Mounted from devops/alerts 3fc750b41be7: Mounted from devops/alerts beee9f30bc1f: Mounted from devops/alerts 0.2: digest: sha256:4a74959ea51a5834436ecda47f9e9d461d4ec43a68ff1976c555dc6ba2878842 size: 1788 在Harbor上可以看到： 创建K8s资源对象 假设我们仍使用已经独立部署好的mysql，现在只需要写myweb的k8s部署文件。 namespace 先来创建一个namespace [root@m01 myweb]# kubectl create ns myweb namespace/myweb created configmap 由于用到了supervisor，将其配置文件创建为一个configmap [root@m01 myweb]# ls myweb_supervisord.conf [root@m01 myweb]# [root@m01 myweb]# #创建configmap [root@m01 myweb]# [root@m01 myweb]# kubectl create -n myweb configmap myweb-supervisord-conf --from-file=myweb_supervisord.conf configmap/myweb-supervisord-conf created [root@m01 myweb]# [root@m01 myweb]# kubectl get cm -n myweb NAME DATA AGE myweb-supervisord-conf 1 7s [root@m01 myweb]# 通过--from-file参数创建的myweb-supervisord-conf内容如下： # Please edit the object below. Lines beginning with a '#' will be ignored, # and an empty file will abort the edit. If an error occurs while saving this file will be # reopened with the relevant failures. # apiVersion: v1 data: myweb_supervisord.conf: | [program:myweb] command=/usr/local/bin/python manage.py runserver 0.0.0.0:8000 directory=/opt/apps/myweb user=root startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=20MB stdout_logfile_backups=3 stdout_logfile=/var/log/myweb_supervisor.log kind: ConfigMap metadata: creationTimestamp: \"2020-11-08T10:11:46Z\" name: myweb-supervisord-conf namespace: myweb resourceVersion: \"1135081\" selfLink: /api/v1/namespaces/myweb/configmaps/myweb-supervisord-conf uid: 42cd4d5c-48c4-4845-b1a9-102eb78f591a 也可以直接写一个yaml文件： myweb-supervisord-conf.yml apiVersion: v1 data: myweb_supervisord.conf: | [program:myweb] command=/usr/local/bin/python manage.py runserver 0.0.0.0:8000 directory=/opt/apps/myweb user=root startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=20MB stdout_logfile_backups=3 stdout_logfile=/var/log/myweb_supervisor.log 然后 kubectl create -n myweb configmap myweb-supervisord-conf -f myweb-supervisord-conf.yml secret 假设mysql连接参数如下： user=root password=mysql host=192.168.100.200 port=3306 name=testpv 可以通过命令行带参数的方式创建一个secret [root@m01 myweb]# kubectl create -n myweb secret generic db-secret --from-literal=name=testpv --from-literal=user=root --from-literal=host=192.168.100.200 --from-literal=port=3306 --from-literal=password=mysql secret/db-secret created 也可以先编写一个secret文件（data字段采用base64编码），再创建secret apiVersion: v1 kind: Secret metadata: name: db-secret namespace: myweb data: host: MTkyLjE2OC4xMDAuMjAwCg== name: dGVzdHB2 password: bXlzcWwK port: MzMwNg== user: cm9vdA== type: Opaque 从dashboard可以看到创建的保密字典db-secret内容： deployment、service和ingress myweb-dep.yml apiVersion: apps/v1 kind: Deployment metadata: name: myweb namespace: myweb labels: k8s-app: myweb spec: replicas: 1 selector: matchLabels: k8s-app: myweb template: metadata: labels: k8s-app: myweb spec: containers: - name: myweb image: harbor.lzzeng.cn/devops/myweb:0.2 resources: limits: cpu: 1 memory: 1000Mi requests: cpu: 0.5 memory: 500Mi env: - name: DB_NAME valueFrom: secretKeyRef: name: db-secret key: name - name: DB_USER valueFrom: secretKeyRef: name: db-secret key: user - name: DB_PASSWORD valueFrom: secretKeyRef: name: db-secret key: password - name: DB_HOST valueFrom: secretKeyRef: name: db-secret key: host - name: DB_PORT valueFrom: secretKeyRef: name: db-secret key: port ports: - containerPort: 8000 name: ui protocol: TCP myweb-svc.yml apiVersion: v1 kind: Service metadata: name: myweb namespace: myweb spec: type: NodePort ports: - port: 8000 protocol: TCP targetPort: ui nodePort: 30888 selector: k8s-app: myweb myweb-ing.yml apiVersion: extensions/v1beta1 kind: Ingress metadata: name: myweb namespace: myweb spec: rules: - host: myweb.lzzeng.cn http: paths: - path: / backend: serviceName: myweb servicePort: 8000 kubectl create kubectl create -n myweb -f myweb-def.yml kubectl create -n myweb -f myweb-svc.yml kubectl create -n myweb -f myweb-ing.yml 是deployment文件中secret名称写错了，修改myweb-dep.yml，更新后正常： kubectl apply -n myweb -f myweb-def.yml ingress gateway traefik-ui helm 与 harbor helm是K8s的chart管理工具, harbor是docker镜像、helm charts托管平台。 使用helm 编写一个helm chart 推送至harbor helm push -u xxx -p xxxxxx ./ helm部署ELK helm install elastic/elasticsearch -n elk-es --namespace elk 使用harbor 官方github：https://github.com/goharbor/harbor 官方文档：https://goharbor.io/docs/2.0.0/install-config/ 创建自签名证书（一年期）： openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./tls.key -out ./tls.crt -subj \"/CN=你的自定义harbor域名\" harbor.yml配置示例： Harbor要启用helm charts管理功能，在安装时要添加--with-chartmuseum参数： ./install.sh --with-chartmuseum Harbor的charts管理界面： 可以通过web界面上传打包好的chart，也可以使用helm push命令推送。 在使用时： # 1. 添加repo helm repo add --ca-file --cert-file --key-file --username --password https:///chartrepo/ # 2. 获取chart包 # helm fetch / # 2. 直接使用chart安装部署至K8s helm install --name --namespace [其它选项] / Harbor的镜像仓库管理界面： PV 与 storageClass 持久卷（PV） 存储类（storageClass） 参考 https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/ https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/ https://github.com/goharbor/harbor https://doc.traefik.io/traefik/ https://rancher.com/docs/rancher/v2.x/en/ https://github.com/kubernetes-sigs End Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/installation/":{"url":"docs/deployment/k8s/installation/","title":"安装","keywords":"","body":"记录了几种不同的K8s集群搭建方式： Kubespray RKE Kubeadm Rancher Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/installation/kubespray-k8s/kubespray-k8s.html":{"url":"docs/deployment/k8s/installation/kubespray-k8s/kubespray-k8s.html","title":"Kubespray","keywords":"","body":" kubespray项目地址: https://github.com/kubernetes-sigs/kubespray 官方参考：http://192.168.100.150/k8s/kubespray-k8s/0812/kubespray/#/docs/getting-started 项目分支：release-2.11 K8s版本：1.15.1 Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications. Kubernetes (K8s) 是一个开源容器编排引擎，用于自动化容器化应用程序的部署，扩展和管理。 应用部署方式的演变历史：物理机部署 => 虚拟机部署 => 容器化部署 准备 因国外网络问题，安装前需作必要的修改，写成预处理脚本如下： pre-install.sh: #!/bin/sh ### 安装git并clone官方安装脚本 yum install git -y kube_version=v1.15.1 if [ ! -d kubespray ]; then git clone https://github.com/kubernetes-sigs/kubespray cd kubespray git checkout release-2.11 cd - fi cd kubespray if [ ! -d inventory/mycluster ]; then cp -r inventory/sample inventory/mycluster fi ### 更新pip及安装依赖 if [ \"$1\" = \"-U\" ]; then easy_install pip pip install pip==8.0.3 pip uninstall requests pip install -U pip pip install -U setuptools pip install -r requirements.txt fi ################### 所有修改仅涉及以下4个文件，可事先改好另存覆盖 #inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml #roles/download/defaults/main.yml #roles/kubespray-defaults/defaults/main.yaml #inventory/mycluster/ ################### 若不事先准备改好的文件，可使用以下命令修改： ### 改版本号 sed -i \"s/^kube_version:.*$/kube_version: $kube_version/\" roles/kubespray-defaults/defaults/main.yaml sed -i \"s/^kube_version:.*$/kube_version: $kube_version/\" roles/download/defaults/main.yml sed -i \"s/^kube_version:.*$/kube_version: $kube_version/\" inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml ### 改镜像源 kube_image_repo=mirrorgooglecontainers sed -i \"s/^kube_image_repo:.*$/kube_image_repo: $kube_image_repo/\" inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml sed -i \"s/^kube_image_repo:.*$/kube_image_repo: $kube_image_repo/\" roles/download/defaults/main.yml sed -i \"s/k8s.gcr.io/$kube_image_repo/g\" roles/download/defaults/main.yml sed -i \"s#gcr.io/google_containers#$kube_image_repo#g\" roles/download/defaults/main.yml sed -i \"s/gcr.io/$kube_image_repo/g\" roles/download/defaults/main.yml sed -i \"s#(k8s.)?gcr.io(/google_containers)?#$kube_image_repo#g\" roles/download/defaults/main.yml #nodelocaldns_version: 1.15.1 nodelocaldns_image_repo=lzzeng/k8s-dns-node-cache sed -i 's#^nodelocaldns_image_repo:.*$'\"#nodelocaldns_image_repo: $nodelocaldns_image_repo#\" roles/download/defaults/main.yml ### 改二进制文件下载地址 download_url=http://192.168.100.150/k8s/$kube_version sed -i 's#^kubeadm_download_url:.*$#kubeadm_download_url: '\\\"\"$download_url\"'/kubeadm\\\"#' roles/download/defaults/main.yml sed -i 's#^hyperkube_download_url:.*$#hyperkube_download_url: '\\\"\"$download_url\"'/hyperkube\\\"#' roles/download/defaults/main.yml sed -i 's#^calicoctl_download_url:.*$#calicoctl_download_url: '\\\"\"$download_url\"'/calicoctl-linux-amd64\\\"#' roles/download/defaults/main.yml #1.15.1 使用 3.7.3 sed -i 's#^etcd_download_url:.*$#etcd_download_url: '\\\"\"$download_url\"'/etcd-v3.3.10-linux-amd64.tar.gz\\\"#' roles/download/defaults/main.yml #1.15.1 使用 v3.3.10 sed -i 's#^cni_download_url:.*$#cni_download_url: '\\\"\"$download_url\"'/cni-plugins-linux-amd64-v0.8.1.tgz\\\"#' roles/download/defaults/main.yml #1.15.1 使用 v0.8.1 sed -i 's#^crictl_download_url:.*$#crictl_download_url: '\\\"\"$download_url\"'/critest-v1.15.0-linux-amd64.tar.gz\\\"#' roles/download/defaults/main.yml #1.15.1 使用 v1.15.0 ### 可以修改内存限制，使得1G内存也可以执行安装 #sed -i 's/^minimal_node_memory_mb:.*$/minimal_node_memory_mb: 500/' roles/kubernetes/preinstall/defaults/main.yml #sed -i 's/^minimal_master_memory_mb:.*$/minimal_master_memory_mb: 500/' roles/kubernetes/preinstall/defaults/main.yml #sed -i 's/ansible_memtotal_mb\\s*>=\\s*[0-9]\\+/ansible_memtotal_mb >= 500/' roles/kubernetes/preinstall/tasks/0020-verify-settings.yml ### docker加速 cat > inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml # Debian docker-ce repo docker_debian_repo_base_url: \"https://mirrors.aliyun.com/docker-ce/linux/debian\" docker_debian_repo_gpgkey: \"https://mirrors.aliyun.com/docker-ce/linux/debian/gpg\" dockerproject_apt_repo_base_url: \"https://mirrors.aliyun.com/docker-engine/apt/repo\" dockerproject_apt_repo_gpgkey: \"https://mirrors.aliyun.com/docker-engine/apt/gpg\" docker_options: \"--insecure-registry= --registry-mirror=https://registry.docker-cn.com --graph= \" EOF ### 打印ansible命令 echo \"再kubespray根目录执行以下命令安装或重置：\" echo ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root cluster.yml echo ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root reset.yml inventory/mycluster/hosts.ini示例： node1、node2是master调度节点，node1~node3是etcd节点，node3~node6是工作节点。 [all] node1 ansible_host=192.168.100.79 ip=192.168.100.79 node2 ansible_host=192.168.100.80 ip=192.168.100.80 node3 ansible_host=192.168.100.81 ip=192.168.100.81 node4 ansible_host=192.168.100.216 ip=192.168.100.216 node5 ansible_host=192.168.100.217 ip=192.168.100.217 node6 ansible_host=192.168.100.218 ip=192.168.100.218 [kube-master] node1 node2 [etcd] node1 node2 node3 [kube-node] node3 node4 node5 node6 [k8s-cluster:children] kube-master kube-node 安装 另找一个执行ansible的机器，并授权使其可以免密登录node1~node6： ssh-keygen # 这几条命令都会提示手动确认 ssh-copy-id root@node1 ssh-copy-id root@node2 ... 执行安装： # 执行上述准备好的预处理脚本（对应v1.15.1版本） sh pre-install.sh # 按上述修改好hosts.ini后，执行ansible编排任务，等待结束即可 ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root cluster.yml 登录 获取登录kubernetes-dashboard的token: kubectl get svc --all-namespaces | grep kubernetes-dashboard kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token 未使用keepalived时，可通过其一master登录：https://192.168.100.79:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/ keepalived配置示例 node1 (master-1) 的/etc/keepalived/keepalived.conf： ! Configuration File for keepalived global_defs { router_id LVS_DEVEL } vrrp_script check_haproxy { script \"killall -0 haproxy\" interval 3 weight -2 fall 10 rise 2 } vrrp_instance VI_1 { state MASTER interface ens32 virtual_router_id 78 priority 120 advert_int 1 authentication { auth_type PASS auth_pass xxxxxxxxxxxxxxxx } virtual_ipaddress { 192.168.100.78 } track_script { check_haproxy } } node2 (master-2) 的/etc/keepalived/keepalived.conf： ! Configuration File for keepalived global_defs { router_id LVS_DEVEL } vrrp_script check_haproxy { script \"killall -0 haproxy\" interval 3 weight -2 fall 10 rise 2 } vrrp_instance VI_1 { state BACKUP interface ens32 virtual_router_id 78 priority 100 advert_int 1 authentication { auth_type PASS auth_pass xxxxxxxxxxxxxxxx } virtual_ipaddress { 192.168.100.78 } track_script { check_haproxy } } 仅state BACKUP和priority 100两处不同。 补充（1.14.1） 修改了配置文件中的镜像地址 inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml roles/download/defaults/main.yml 大部分镜像可以改从registry.cn-hangzhou.aliyuncs.com/google_containers获取。 不能直接下载的软件 通过浏览器（已设置google代理）下载kubeadm和hyperkube，放置在内网文件服务器中。hyperkube和kubeadm包会被下载到所有k8s节点的/tmp/releases目录下。 # kubeadm_download_url: https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubeadm # hyperkube_download_url: https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/hyperkube 不能从Ali镜像库获取的镜像 k8s.gcr.io/cluster-proportional-autoscaler-amd64:1.4.0 k8s.gcr.io/k8s-dns-node-cache:1.15.1 执行 pip install -r requirements.txt ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root cluster.yml 如何清理 ansible -i inventory/mycluster/hosts.ini all -m script -a '/opt/clean.sh' # 或者 ansible-playbook -i inventory/mycluster/hosts.ini --become --become-user=root reset.yml clean.sh: #!/bin/sh rm -rf /etc/kubernetes/ rm -rf /var/lib/kubelet rm -rf /var/lib/etcd rm -rf /usr/local/bin/kubectl rm -rf /etc/systemd/system/calico-node.service rm -rf /etc/systemd/system/kubelet.service systemctl stop etcd.service systemctl disable etcd.service systemctl stop calico-node.service systemctl disable calico-node.service docker stop $(docker ps -q) docker rm $(docker ps -a -q) systemctl restart docker 安装完成后修改节点标签 kubectl label node node3 node-role.kubernetes.io/worker=\"\" #标记worker kubectl label node node3 node-role.kubernetes.io/node=\"\" #标记node kubectl label node node3 \"node-role.kubernetes.io/worker\"- # 删除worker标记 Kubernetes Dashboard 以NodePort方式暴露服务 修改代码，使用NodePort方式访问Dashboard。 # ./roles/kubernetes-apps/ansible/templates/dashboard.yml.j2 # ------------------- Dashboard Service ------------------- # targetPort: 8443 type: NodePort //添加这一行 selector: k8s-app: kubernetes-dashboard 获取token kubectl get svc --all-namespaces | grep kubernetes-dashboard kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token 非NodePort方式访问 https://192.168.100.78:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/（192.168.100.78是VIP或者某个master节点IP） 后续操作 以上完成的是带有kubernetes dashboard的初始环境的搭建，之后还要进行 替换Ingress、设置AD认证、安装管理工具等，此不涉及。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/installation/rke-k8s/rke-k8s.html":{"url":"docs/deployment/k8s/installation/rke-k8s/rke-k8s.html","title":"RKE","keywords":"","body":"RKE安装K8s HA集群过程记录 准备工作 ansible主机清单： [rke] rke ansible_host=192.168.100.228 [k8s] master01 ansible_host=192.168.101.72 master02 ansible_host=192.168.101.75 master03 ansible_host=192.168.100.229 安装docker： ansible-playbook roles/docker.yml 使用ansible之前，需要分发密钥至各节点root用户。 创建rancher用户，并分发密钥： ansible-playbook roles/key.yml 安装rke、kubectl、helm工具： # https://www.cnrancher.com/download/rke/rke_linux-amd64 wget https://www.cnrancher.com/download/rke/rke_linux-amd64 chmod +x rke_linux-amd64 mv rke_linux-amd64 /usr/bin/rke # https://www.cnrancher.com/download/kubectl/kubectl_amd64-linux wget https://www.cnrancher.com/download/kubectl/kubectl_amd64-linux chmod +x kubectl_amd64-linux mv kubectl_amd64-linux /usr/bin/kubectl # https://www.cnrancher.com/download/helm/helm-linux.tar.gz wget https://storage.googleapis.com/kubernetes-helm/helm-v2.12.0-linux-amd64.tar.gz tar -xf helm-v2.12.0-linux-amd64.tar.gz mv linux-amd64/helm /usr/bin/helm mv linux-amd64/tiller /usr/bin/tiller rm -rf linux-amd64 创建集群 rancher-cluster.yml: nodes: - address: 192.168.101.72 user: rancher role: [controlplane,worker,etcd] - address: 192.168.101.75 user: rancher role: [controlplane,worker,etcd] - address: 192.168.100.229 user: rancher role: [controlplane,etcd] services: etcd: snapshot: true creation: 6h retention: 24h rke up: rke up --config rancher-cluster.yml rke up后会生成kube_config_rancher-cluster.yml 设置kube_config环境变量（或者复制到~/.kube/config ）： echo \"export KUBECONFIG=/home/rancher/kube_config_rancher-cluster.yml\" >> /etc/profile source /etc/profile 安装tiller # Helm在集群上安装tiller服务以管理charts. 由于RKE默认启用RBAC, 因此我们需要使用kubectl来创建一个serviceaccount，clusterrolebinding才能让tiller具有部署到集群的权限 kubectl -n kube-system create serviceaccount tiller # 创建ClusterRoleBinding以授予tiller帐户对集群的访问权限 kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller # 安装Helm Server(Tiller) helm init --service-account tiller --tiller-image registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.12.0 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts 安装cert-manager helm install stable/cert-manager \\ --name cert-manager \\ --namespace kube-system 安装rancher web # 使用helm repo add命令添加Rancher chart仓库地址 helm repo add rancher-stable https://releases.rancher.com/server-charts/stable helm install rancher-stable/rancher \\ --name rancher \\ --namespace cattle-system \\ --set hostname=xxx.com helm install rancher-stable/rancher --name rancher --namespace cattle-system --set hostname=xxx.com 如果不是通过DNS解析域名，而是通过本地hosts解析，可以通过给cattle-cluster-agent Pod和cattle-node-agent添加主机别名，让其可以正常通信，前提是IP地址可以互通。 kubectl -n cattle-system patch deployments cattle-cluster-agent --patch '{ \"spec\": { \"template\": { \"spec\": { \"hostAliases\": [ { \"hostnames\": [ \"xxx.com\" ], \"ip\": \"192.168.100.228\" } ] } } } }' # 上面这条命令可能报错：Error from server (NotFound): deployments.extensions \"cattle-cluster-agent\" not found，因为cattle-cluster-agent还没有创建成功 kubectl -n cattle-system patch daemonsets cattle-node-agent --patch '{ \"spec\": { \"template\": { \"spec\": { \"hostAliases\": [ { \"hostnames\": [ \"xxx.com\" ], \"ip\": \"192.168.100.228\" } ] } } } }' 安装rancher cli wget https://www.cnrancher.com/download/cli/rancher-linux-amd64.tar.gz mkdir rancher-linux-amd64.tmp.d # 临时目录 tar -xf rancher-linux-amd64.tar.gz -C rancher-linux-amd64.tmp.d find rancher-linux-amd64.tmp.d -name 'rancher' -type f | xargs -I {} mv {} /usr/bin/; rm -rf rancher-linux-amd64.tmp.d Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/installation/rancher-k8s/rancher-k8s.html":{"url":"docs/deployment/k8s/installation/rancher-k8s/rancher-k8s.html","title":"Rancher","keywords":"","body":"通过Rancher搭建K8s集群 集群组成 参考架构图： 主机列表： IP role description OS 192.168.101.71 rancher serverk8s-master (etcd, control) 控制节点rancher server centos7.616U24G下同 192.168.101.72 k8s-master (etcd, control) 控制节点 - 192.168.101.73 k8s-master (etcd, control) 控制节点 - 192.168.101.74 k8s-node (worker) worker节点（可被调度） centos7.616U48G下同 192.168.101.75 k8s-node (worker) worker节点 - 192.168.101.76 k8s-node (worker) worker节点 - 192.168.101.70 VIP 虚拟 IP - 安装步骤 环境设置 # /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.101.71 b71-k8s-m01 b71-k8s-m01.keep.com 192.168.101.72 b72-k8s-m02 b72-k8s-m02.keep.com 192.168.101.73 b73-k8s-m03 b73-k8s-m03.keep.com 192.168.101.74 b74-k8s-c01 b74-k8s-c01.keep.com 192.168.101.75 b75-k8s-c02 b75-k8s-c02.keep.com 192.168.101.76 b76-k8s-c03 b76-k8s-c03.keep.com # 关闭firewalld systemctl stop firewalld.service systemctl disable firewalld.service # 无swap分区，不涉及swapoff操作 # 关闭selinux setenforce 0 sed -i '/^SELINUX=/s/=.*$/=disabled/' /etc/selinux/config # 安装docker-ce 18.06 wget -P /etc/yum.repos.d https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo yum install docker-ce-18.06.1.ce -y systemctl start docker.service systemctl enable docker.service haproxy + keepalived 配置： ### 对3个master节点：添加到文件/etc/sysctl.conf cat >/etc/sysctl.conf net.ipv4.ip_forward = 1 net.ipv4.ip_nonlocal_bind = 1 EOF ### 修改keepalived.conf cat > /etc/keepalived/keepalived.conf mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 00:50:56:85:8a:00 brd ff:ff:ff:ff:ff:ff inet 192.168.101.72/24 brd 192.168.101.255 scope global noprefixroute ens192 valid_lft forever preferred_lft forever inet 192.168.101.70/32 scope global ens192 valid_lft forever preferred_lft forever inet6 fe80::250:56ff:fe85:8a00/64 scope link valid_lft forever preferred_lft forever ### 修改haproxy.cfg ... # main frontend which proxys to the backends #--------------------------------------------------------------------- frontend kubernetes-apiserver mode tcp bind *:16443 option tcplog default_backend kubernetes-apiserver backend kubernetes-apiserver mode tcp balance roundrobin server b71-k8s-m01 192.168.101.71:6443 check weight 1 server b72-k8s-m02 192.168.101.72:6443 check weight 2 server b73-k8s-m03 192.168.101.73:6443 check weight 2 listen stats bind *:1080 stats auth admin:password stats refresh 5s stats realm HAProxy\\ Statistics stats uri /admin?stats # 启动haproxy systemctl enable haproxy.service systemctl start haproxy.service 需开放的端口见 https://rancher.com/docs/rancher/v2.x/en/installation/references/。 通过Rancher安装后，会自动配置iptables规则，查看rancher server节点的防火墙规则： [root@B71-k8s-m01 ~]# iptables -L -n Chain INPUT (policy ACCEPT) target prot opt source destination KUBE-EXTERNAL-SERVICES all -- 0.0.0.0/0 0.0.0.0/0 ctstate NEW KUBE-FIREWALL all -- 0.0.0.0/0 0.0.0.0/0 Chain FORWARD (policy DROP) target prot opt source destination KUBE-FORWARD all -- 0.0.0.0/0 0.0.0.0/0 DOCKER-USER all -- 0.0.0.0/0 0.0.0.0/0 ... 安装rancher server 在节点101.71上执行： docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:stable 登录Rancher Web创建集群 Url: https://192.168.101.71/ 添加master节点时，是按如下设置的： 复制命令在待添加的节点机器上执行，依次添加完3个master节点后如下，其中101.71是第二个添加的： 在机器数量足够的情况下，可将rancher server单独部署，此处是与K8s_master共用。经反复试验，添加master节点时，先添加101.72或101.73，不要首先添加rancher server所在节点101.71。否则，后续添加master时会出问题： 上图显示101.72一直处于Registering状态，不能添加进集群。 在添加节点异常时，先通过Web管理界面删除问题节点，然后在重新执行添加前，通过以下脚本清理一下待添加节点的环境： # 清理安装文件目录 DLIST=\"/var/lib/etcd /etc/kubernetes /etc/cni /opt/cni /var/lib/cni /var/run/calico /opt/rke\" for dir in $DLIST; do echo \"Removing $dir\" rm -rf $dir done # 清理docker CLIST=$(docker ps -qa) if [ \"x\"$CLIST == \"x\" ]; then echo \"No containers exist - skipping container cleanup\" else docker stop -f $CLIST && docker rm -f $CLIST fi ILIST=$(docker images -a -q) if [ \"x\"$ILIST == \"x\" ]; then echo \"No images exist - skipping image cleanup\" else docker rmi $ILIST fi VLIST=$(docker volume ls -q) if [ \"x\"$VLIST == \"x\" ]; then echo \"No volumes exist - skipping volume cleanup\" else docker volume rm -f $VLIST fi systemctl restart docker.service 下图是添加完3个master和3个node后的主机界面： 部署服务 测试部署5个jenkins实例： 访问 Jenkins： 执行kubectl命令行 通过Rancher Web界面来执行kubectl命令行： 如果直接登录主机，找不到kubectl命令，需进入相关的容器 添加Dashboard 找到kubernetes-dashboard，并部署（启动） Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/installation/kubeadm-k8s/kubeadm-k8s-steps.html":{"url":"docs/deployment/k8s/installation/kubeadm-k8s/kubeadm-k8s-steps.html","title":"Kubeadm","keywords":"","body":"kubeadm安装K8s步骤记录 阅读资料： https://kubernetes.io/docs/setup/independent/install-kubeadm/ https://www.howtoforge.com/tutorial/centos-kubernetes-docker-cluster/ 镜像准备 Master # kubeadm config images list k8s.gcr.io/kube-apiserver:v1.13.2 k8s.gcr.io/kube-controller-manager:v1.13.2 k8s.gcr.io/kube-scheduler:v1.13.2 k8s.gcr.io/kube-proxy:v1.13.2 k8s.gcr.io/pause:3.1 k8s.gcr.io/etcd:3.2.24 k8s.gcr.io/coredns:1.2.6 #另外 quay.io/coreos/flannel:v0.10.0-amd64 Slave k8s.gcr.io/kube-proxy:v1.13.2 k8s.gcr.io/pause:3.1 k8s.gcr.io/coredns:1.2.6 quay.io/coreos/flannel:v0.10.0-amd64 yum源配置 wget -P /etc/yum.repos.d https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo cat /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF cat /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF 主机名设置 hostnamectl set-hostname master hostnamectl set-hostname node01 vim /etc/hosts xxx master xxx node01 授权免密登录 ssh-copy-id ... 防火墙等设置 systemctl stop firewalld systemctl disable firewalld setenforce 0 sed -i -re '/^\\s*SELINUX=/s/^/#/' -e '$i\\\\SELINUX=disabled' /etc/selinux/config swapoff -a sed -i 's/.*swap.*/#&/' /etc/fstab cat /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sysctl --system # 同步时间 # yum install ntpdate ntpdate pool.ntp.org 安装docker-ce yum install docker-ce-18.06.1.ce systemctl start docker systemctl enable docker systemctl status docker cat /etc/docker/daemon.json { \"registry-mirrors\": [\"https://mirror.ccs.tencentyun.com\"] } EOF systemctl daemon-reload systemctl restart docker 安装kubectl等 yum install -y kubelet kubeadm kubectl systemctl enable kubelet && sudo systemctl start kubelet 初始化集群 kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=xxx token过期生成新的token： kubeadm token create --print-join-command 节点加入集群： kubeadm join xxx:6443 --token xx.xxxx --discovery-token-ca-cert-hash sha256:xxxx cp /etc/kubernetes/admin.conf $HOME/ chown $(id -u):$(id -g) $HOME/admin.conf export KUBECONFIG=$HOME/admin.conf flannel网络设置： kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml 查看集群信息 kubectl get nodes kubectl label node xxx node-role.kubernetes.io/master='master' kubectl label node xxx node-role.kubernetes.io/node='node' kubectl cluster-info # 查看所有Pod kubectl get pods --all-namespaces hello-world kubectl run hello-world --replicas=2 --labels=\"run=load-balancer-example\" --image=gcr.io/google-samples/node-hello:1.0 --port=8080 # 集群信息 kubectl get deployments hello-world kubectl describe deployments hello-world kubectl get replicasets kubectl describe replicasets # 创建service kubectl expose deployment hello-world --type=NodePort --name=example-service # 查看service kubectl describe services example-service kubectl get pods --selector=\"run=load-balancer-example\" --output=wide 安装dashboard kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml # 删除dashboard kubectl -n kube-system delete $(kubectl -n kube-system get pod -o name | grep dashboard) Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/deployment/":{"url":"docs/deployment/k8s/deployment/","title":"部署","keywords":"","body":" Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications. Kubernetes (K8s) 是一个开源容器编排引擎，用于自动化容器化应用程序的部署，扩展和管理。 应用部署方式的演变历史：物理机部署 => 虚拟机部署 => 容器化部署 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/deployment/Kubernetes-dashboard.html":{"url":"docs/deployment/k8s/deployment/Kubernetes-dashboard.html","title":"K8s Dashboard","keywords":"","body":"Kubernetes-dashboard 创建： kubectl apply -f 删除： kubectl -n kube-system delete $(kubectl -n kube-system get pod -o name | grep dashboard) 获取登录token的几种方法（权限不同）： kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | awk '/^deployment-controller-token-/{print $1}') | awk '$1==\"token:\"{print $2}' kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep kubernetes-dashboard-token|awk '{print $1}')|grep token:|awk '{print $2}' kubectl -n kube-system describe $(kubectl -n kube-system get secret -n kube-system -o name | grep namespace) | grep token 创建ServiceAccount kubernetes-dashboard与cluster-admin role绑定： apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: kubernetes-dashboard-minimal namespace: kube-system roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: kubernetes-dashboard namespace: kube-system Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/deployment/ELK.html":{"url":"docs/deployment/k8s/deployment/ELK.html","title":"ELK","keywords":"","body":"ELK elk-rc.yaml apiVersion: v1 kind: ReplicationController metadata: name: elk-rc labels: k8s-app: elk spec: selector: k8s-app: elk template: metadata: labels: k8s-app: elk spec: containers: - image: docker.elastic.co/elasticsearch/elasticsearch:6.6.0 name: elasticsearch ports: - containerPort: 9200 volumeMounts: - name: es-storage mountPath: /usr/share/elasticsearch/data subPath: elasticsearch/data - image: docker.elastic.co/logstash/logstash:6.6.0 name: logstash ports: - containerPort: 9600 - containerPort: 5000 - image: docker.elastic.co/kibana/kibana:6.6.0 name: kibana env: - name: ELASTICSEARCH_URL value: http://127.0.0.1:9200 ports: - containerPort: 5601 volumes: - name: es-storage persistentVolumeClaim: claimName: pvc001 elk-svc-kibana.yaml apiVersion: v1 kind: Service metadata: name: kibana labels: k8s-app: elk spec: type: LoadBalancer selector: k8s-app: elk ports: - port: 5601 name: kibana elk-svc-logstash.yaml apiVersion: v1 kind: Service metadata: name: logstash labels: k8s-app: elk spec: selector: k8s-app: elk ports: - port: 8600 name: logstash pv.yaml --- apiVersion: v1 kind: PersistentVolume metadata: name: pv001 spec: capacity: storage: 20Gi accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Retain storageClassName: nfs nfs: path: \"/path/to/nfs\" server: x.xx.xxx.xxx --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc001 spec: accessModes: - ReadWriteMany resources: requests: storage: 20Gi storageClassName: nfs 创建NFS持久卷： kubectl create -f pv.yaml 部署ELK： kubectl create -f elk-rc.yaml kubectl create -f elk-svc-logstash.yaml kubectl create -f elk-svc-kibana.yaml kubectl get pods kubectl get svc Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/deployment/k8s-prometheus.html":{"url":"docs/deployment/k8s/deployment/k8s-prometheus.html","title":"Prometheus","keywords":"","body":"K8s部署prometheus 示例配置 prometheus apiVersion: v1 kind: ConfigMap metadata: name: prometheus-config namespace: kube-system data: prometheus.yml: | global: scrape_interval: 15s evaluation_interval: 15s scrape_configs: - job_name: 'kubernetes-apiservers' kubernetes_sd_configs: - role: endpoints scheme: https tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token relabel_configs: - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name] action: keep regex: default;kubernetes;https - job_name: 'kubernetes-nodes' kubernetes_sd_configs: - role: node scheme: https tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token relabel_configs: - action: labelmap regex: __meta_kubernetes_node_label_(.+) - target_label: __address__ replacement: kubernetes.default.svc:443 - source_labels: [__meta_kubernetes_node_name] regex: (.+) target_label: __metrics_path__ replacement: /api/v1/nodes/${1}/proxy/metrics - job_name: 'kubernetes-cadvisor' kubernetes_sd_configs: - role: node scheme: https tls_config: ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token relabel_configs: - action: labelmap regex: __meta_kubernetes_node_label_(.+) - target_label: __address__ replacement: kubernetes.default.svc:443 - source_labels: [__meta_kubernetes_node_name] regex: (.+) target_label: __metrics_path__ replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor - job_name: 'kubernetes-service-endpoints' kubernetes_sd_configs: - role: endpoints relabel_configs: - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape] action: keep regex: true - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme] action: replace target_label: __scheme__ regex: (https?) - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path] action: replace target_label: __metrics_path__ regex: (.+) - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port] action: replace target_label: __address__ regex: ([^:]+)(?::\\d+)?;(\\d+) replacement: $1:$2 - action: labelmap regex: __meta_kubernetes_service_label_(.+) - source_labels: [__meta_kubernetes_namespace] action: replace target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_service_name] action: replace target_label: kubernetes_name - job_name: 'kubernetes-services' kubernetes_sd_configs: - role: service metrics_path: /probe params: module: [http_2xx] relabel_configs: - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe] action: keep regex: true - source_labels: [__address__] target_label: __param_target - target_label: __address__ replacement: blackbox-exporter.example.com:9115 - source_labels: [__param_target] target_label: instance - action: labelmap regex: __meta_kubernetes_service_label_(.+) - source_labels: [__meta_kubernetes_namespace] target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_service_name] target_label: kubernetes_name - job_name: 'kubernetes-ingresses' kubernetes_sd_configs: - role: ingress relabel_configs: - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe] action: keep regex: true - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path] regex: (.+);(.+);(.+) replacement: ${1}://${2}${3} target_label: __param_target - target_label: __address__ replacement: blackbox-exporter.example.com:9115 - source_labels: [__param_target] target_label: instance - action: labelmap regex: __meta_kubernetes_ingress_label_(.+) - source_labels: [__meta_kubernetes_namespace] target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_ingress_name] target_label: kubernetes_name - job_name: 'kubernetes-pods' kubernetes_sd_configs: - role: pod relabel_configs: - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape] action: keep regex: true - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path] action: replace target_label: __metrics_path__ regex: (.+) - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port] action: replace regex: ([^:]+)(?::\\d+)?;(\\d+) replacement: $1:$2 target_label: __address__ - action: labelmap regex: __meta_kubernetes_pod_label_(.+) - source_labels: [__meta_kubernetes_namespace] action: replace target_label: kubernetes_namespace - source_labels: [__meta_kubernetes_pod_name] action: replace target_label: kubernetes_pod_name --- apiVersion: apps/v1beta2 kind: Deployment metadata: labels: name: prometheus-deployment name: prometheus namespace: kube-system spec: replicas: 1 selector: matchLabels: app: prometheus template: metadata: labels: app: prometheus spec: containers: - image: prom/prometheus:v2.0.0 name: prometheus command: - \"/bin/prometheus\" args: - \"--config.file=/etc/prometheus/prometheus.yml\" - \"--storage.tsdb.path=/prometheus\" - \"--storage.tsdb.retention=24h\" ports: - containerPort: 9090 protocol: TCP volumeMounts: - mountPath: \"/prometheus\" name: data - mountPath: \"/etc/prometheus\" name: config-volume resources: requests: cpu: 100m memory: 100Mi limits: cpu: 500m memory: 2500Mi serviceAccountName: prometheus volumes: - name: data emptyDir: {} - name: config-volume configMap: name: prometheus-config --- kind: Service apiVersion: v1 metadata: labels: app: prometheus name: prometheus namespace: kube-system spec: type: NodePort ports: - port: 9090 targetPort: 9090 nodePort: 30003 selector: app: prometheus apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: prometheus rules: - apiGroups: [\"\"] resources: - nodes - nodes/proxy - services - endpoints - pods verbs: [\"get\", \"list\", \"watch\"] - apiGroups: - extensions resources: - ingresses verbs: [\"get\", \"list\", \"watch\"] - nonResourceURLs: [\"/metrics\"] verbs: [\"get\"] --- apiVersion: v1 kind: ServiceAccount metadata: name: prometheus namespace: kube-system --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: prometheus roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: prometheus subjects: - kind: ServiceAccount name: prometheus namespace: kube-system grafana apiVersion: extensions/v1beta1 kind: Deployment metadata: name: grafana-core namespace: kube-system labels: app: grafana component: core spec: replicas: 1 template: metadata: labels: app: grafana component: core spec: containers: - image: grafana/grafana:4.2.0 name: grafana-core imagePullPolicy: IfNotPresent # env: resources: # keep request = limit to keep this container in guaranteed class limits: cpu: 100m memory: 100Mi requests: cpu: 100m memory: 100Mi env: # The following env variables set up basic auth twith the default admin user and admin password. - name: GF_AUTH_BASIC_ENABLED value: \"true\" - name: GF_AUTH_ANONYMOUS_ENABLED value: \"false\" # - name: GF_AUTH_ANONYMOUS_ORG_ROLE # value: Admin # does not really work, because of template variables in exported dashboards: # - name: GF_DASHBOARDS_JSON_ENABLED # value: \"true\" readinessProbe: httpGet: path: /login port: 3000 # initialDelaySeconds: 30 # timeoutSeconds: 1 volumeMounts: - name: grafana-persistent-storage mountPath: /var volumes: - name: grafana-persistent-storage emptyDir: {} --- apiVersion: extensions/v1beta1 kind: Ingress metadata: name: grafana namespace: kube-system spec: rules: - host: k8s.grafana http: paths: - path: / backend: serviceName: grafana servicePort: 3000 --- apiVersion: v1 kind: Service metadata: name: grafana namespace: kube-system labels: app: grafana component: core spec: type: NodePort ports: - port: 3000 selector: app: grafana component: core Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/deployment/k8s-nfs-storageclass.html":{"url":"docs/deployment/k8s/deployment/k8s-nfs-storageclass.html","title":"NFS动态PV","keywords":"","body":"基于NFS文件系统的K8s动态PV 动态卷供应的实现基于 storage.k8s.io API 组中的 StorageClass API 对象。 集群管理员可以根据需要定义多个 StorageClass 对象，每个对象指定一个卷插件（又名 provisioner）， 卷插件向卷供应商提供在创建卷时需要的数据卷信息及相关参数。 步骤 1）使用NFS StorageClass动态创建PV的基本配置 StorageClass apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: managed-nfs-storage provisioner: fuseim.pri/ifs parameters: archiveOnDelete: \"true\" rbac： kind: ServiceAccount apiVersion: v1 metadata: name: nfs-client-provisioner --- kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1 metadata: name: nfs-client-provisioner-runner rules: - apiGroups: [\"\"] resources: [\"persistentvolumes\"] verbs: [\"get\", \"list\", \"watch\", \"create\", \"delete\"] - apiGroups: [\"\"] resources: [\"persistentvolumeclaims\"] verbs: [\"get\", \"list\", \"watch\", \"update\"] - apiGroups: [\"storage.k8s.io\"] resources: [\"storageclasses\"] verbs: [\"get\", \"list\", \"watch\"] - apiGroups: [\"\"] resources: [\"events\"] verbs: [\"create\", \"update\", \"patch\"] --- kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: run-nfs-client-provisioner subjects: - kind: ServiceAccount name: nfs-client-provisioner namespace: default roleRef: kind: ClusterRole name: nfs-client-provisioner-runner apiGroup: rbac.authorization.k8s.io --- kind: Role apiVersion: rbac.authorization.k8s.io/v1 metadata: name: leader-locking-nfs-client-provisioner rules: - apiGroups: [\"\"] resources: [\"endpoints\"] verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"] --- kind: RoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: leader-locking-nfs-client-provisioner subjects: - kind: ServiceAccount name: nfs-client-provisioner # replace with namespace where provisioner is deployed namespace: default roleRef: kind: Role name: leader-locking-nfs-client-provisioner apiGroup: rbac.authorization.k8s.io nfs-client provisioner： kind: Deployment apiVersion: extensions/v1beta1 metadata: name: nfs-client-provisioner spec: replicas: 1 strategy: type: Recreate template: metadata: labels: app: nfs-client-provisioner spec: serviceAccountName: nfs-client-provisioner containers: - name: nfs-client-provisioner image: nfs-client-provisioner volumeMounts: - name: nfs-client-root mountPath: /persistentvolumes env: - name: PROVISIONER_NAME value: fuseim.pri/ifs - name: NFS_SERVER value: 192.168.100.150 - name: NFS_PATH value: /testPV volumes: - name: nfs-client-root nfs: server: 192.168.100.150 path: /testPV 2）NFS文件系统搭建 上述配置中使用了在192.168.100.150上创建的测试用NFS文件系统，其搭建过程本文略过。 测试 测试pod示例 apiVersion: v1 kind: Pod metadata: name: my-pod spec: containers: - name: nginx image: nginx:latest ports: - containerPort: 80 volumeMounts: - name: www mountPath: /usr/share/nginx/html volumes: - name: www persistentVolumeClaim: claimName: my-pvc --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: my-pvc spec: storageClassName: \"managed-nfs-storage\" accessModes: - ReadWriteMany resources: requests: storage: 5Gi 测试deployment示例 apiVersion: extensions/v1beta1 kind: Deployment metadata: name: test-nginx spec: replicas: 1 strategy: type: Recreate template: metadata: labels: app: test-nginx spec: containers: - name: test-nginx image: nginx volumeMounts: - name: www mountPath: /usr/share/nginx/html volumes: - name: www persistentVolumeClaim: claimName: my-pvc --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: my-pvc spec: storageClassName: \"managed-nfs-storage\" accessModes: - ReadWriteOnce resources: requests: storage: 8Gi 查看nfs目录 测试statefulset示例： apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: web spec: serviceName: \"nginx\" replicas: 1 template: metadata: labels: app: nginx spec: serviceAccount: nfs-client-provisioner containers: - name: nginx image: nginx volumeMounts: - mountPath: \"/data/nginx\" name: ng volumeClaimTemplates: - metadata: name: ng annotations: volume.beta.kubernetes.io/storage-class: \"managed-nfs-storage\" spec: accessModes: [ \"ReadWriteOnce\" ] resources: requests: storage: 10Gi Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/deployment/k8s-rancher.html":{"url":"docs/deployment/k8s/deployment/k8s-rancher.html","title":"Rancher","keywords":"","body":"[toc] 安装rancher的过程整理 记录 rke up 安装K8s集群后安装rancher的过程 helm版本：2.12.0 安装rancher 使用外部证书 外部证书方式 helm repo add rancher-stable https://releases.rancher.com/server-charts/stable helm install rancher-stable/rancher \\ --name rancher \\ --namespace cattle-system \\ --set hostname=rancher234.keep.com \\ --set tls=external 由rancher自动生成证书 2. 由rancher自动生成证书的方式 helm repo add rancher-stable https://releases.rancher.com/server-charts/stable # 安装证书管理器 helm install stable/cert-manager \\ --name cert-manager \\ --namespace kube-system # 安装rancher helm install rancher-stable/rancher \\ --name rancher \\ --namespace cattle-system \\ --set hostname=rancher234.keep.com # 删除证书和rancher # helm del --purge cert-manager # helm del --purge rancher 给Agent Pod添加hosts记录 为了使cattle-cluster-agent和cattle-node-agent正常，给Agent Pod添加hosts记录。也可直接在rancher管理界面上操作。 kubectl -n cattle-system patch deployments cattle-cluster-agent --patch '{ \"spec\": { \"template\": { \"spec\": { \"hostAliases\": [ { \"hostnames\": [\"rancher234.keep.com\"], \"ip\": \"192.168.101.71\" } ] } } } }' kubectl -n cattle-system patch daemonsets cattle-node-agent --patch '{ \"spec\": { \"template\": { \"spec\": { \"hostAliases\": [ { \"hostnames\":[\"rancher234.keep.com\"], \"ip\": \"192.168.101.71\" } ] } } } }' 改为NodePort方式暴露rancher服务 apiVersion: v1 kind: Service metadata: labels: app: rancher chart: rancher-2.3.5 heritage: Tiller release: rancher name: rancher namespace: cattle-system spec: ports: - name: http port: 80 protocol: TCP targetPort: 80 nodePort: 30080 selector: app: rancher sessionAffinity: None type: NodePort 首节点NginX的配置 gzip on; gzip_disable \"msie6\"; gzip_disable \"MSIE [1-6]\\.(?!.*SV1)\"; gzip_vary on; gzip_static on; gzip_proxied any; gzip_min_length 0; gzip_comp_level 8; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_types text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml application/font-woff text/javascript application/javascript application/x-javascript text/x-json application/json application/x-web-app-manifest+json text/css text/plain text/x-component font/opentype application/x-font-ttf application/vnd.ms-fontobject font/woff2 image/x-icon image/png image/jpeg; # 这里配置为配置了ingress的work节点 upstream rancher { server 192.168.101.71:30080; server 192.168.101.72:30080; } map $http_upgrade $connection_upgrade { default Upgrade; '' close; } server { listen 443 ssl; #配置域名 server_name rancher234.keep.com; #配置证书 ssl_certificate /etc/letsencrypt/live/keep.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/keep.com/privkey.pem; location / { proxy_set_header Host $host; proxy_set_header X-Forwarded-Proto https; proxy_set_header X-Forwarded-Port $server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://rancher; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; # This allows the ability for the execute shell window to remain open for up to 15 minutes. ## Without this parameter, the default is 1 minute and will automatically close. proxy_read_timeout 900s; proxy_buffering off; } } # 配置301重定向 server { listen 80; server_name rancher234.keep.com; return 301 https://$server_name$request_uri; } 登录 浏览器登录：https://rancher234.keep.com 初始账号：admin / rancher ，当前需添加hosts记录： 192.168.101.71 rancher234.keep.com 上述过程存在的问题 cattle-cluster-agent 状态异常 是通过nodePort方式暴露rancher服务来访问集群的，rke up集群之后，只有首节点（101.71 etcd,master）没有占用80端口，用来安装NginX；不通过集群外部nginx的访问方式没有试成功。 当前rancher是以自动管理证书方式安装的，但nginx配置了外部证书 修复步骤 通过 rke up 初步安装集群之后 安装helm和tiller # helm v2.12.0 wget https://get.helm.sh/helm-v2.12.0-linux-amd64.tar.gz tar -xf helm-v2.12.0-linux-amd64.tar.gz mv linux-amd64/helm /usr/local/bin # tiller v2.12.0 kubectl -n kube-system create serviceaccount tiller kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller helm init --service-account tiller --tiller-image registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.12.0 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts 安装rancher 将会在2个worker节点各部署一个pod helm repo add rancher-stable https://releases.rancher.com/server-charts/stable helm install rancher-stable/rancher \\ --name rancher \\ --namespace cattle-system \\ --set hostname=rancher-staging.keep.com \\ --set ingress.tls.source=secret \\ --set replicas=2 修改ingress-nginx默认的安全证书 创建secret # 事先准备好了证书和key kubectl -n ingress-nginx create secret tls ingress-default-cert --cert=/etc/letsencrypt/live/keep.com/fullchain.pem --key=/etc/letsencrypt/live/keep.com/privkey.pem 修改args kubectl -n ingress-nginx edit daemonset nginx-ingress-controller # 修改args参数为 args: ... - --default-ssl-certificate=ingress-nginx/ingress-default-cert # 添加此行 修改部署节点使ingress-nginx部署在master上 # 原： affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: beta.kubernetes.io/os operator: NotIn values: - windows - key: node-role.kubernetes.io/worker operator: Exists tolerations: - effect: NoExecute operator: Exists - effect: NoSchedule operator: Exists # 改为： nodeSelector: node-role.kubernetes.io/controlplane: \"true\" tolerations: - operator: Exists # 或者: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: beta.kubernetes.io/os operator: NotIn values: - windows - key: node-role.kubernetes.io/controlplane operator: Exists tolerations: - operator: Exists 改完之后，可通过https域名访问。 通过keepalived绑定虚拟IP 参考kubespray安装K8s的keepalived配置示例 重新安装时清理 # 1. rke 节点 su - rancher rke remove --config rancher-cluster.yml # 2. 各节点 docker ps -aq |xargs docker rm -f rm -rf /opt/cni /opt/rke /etc/kubernetes /var/lib/rancher 修改rancher绑定新的域名 在rancher管理界面修改rancher的ingress和deployment 给rancher绑定数据卷 在rancher管理界面修改rancher的deployment 给Agent Pod添加hosts记录 在rancher管理界面修改cattle-cluster-agent和cattle-node-agent的网络配置项 安装kubernetes dashboard 创建secret kubectl -n kube-system create secret tls com-keep-secret --cert=/etc/letsencrypt/live/keep.com/fullchain.pem --key=/etc/letsencrypt/live/keep.com/privkey.pem 修改values.yaml引入加密证书 ... ingress: enabled: true hosts: - k8s.keep.com annotations: nginx.ingress.kubernetes.io/ssl-redirect: \"false\" nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\" tls: - secretName: com-keep-secret hosts: - k8s.keep.com ... 安装 helm install stable/kubernetes-dashboard --name kubernetes-dashboard --namespace kube-system -f values.yaml 授权 apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: kubernetes-dashboard-minimal namespace: kube-system roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: kubernetes-dashboard namespace: kube-system 获取token kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep kubernetes-dashboard-token|awk '{print $1}') |grep token: |awk '{print $2}' Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/k8s/deployment/k8s-helm.html":{"url":"docs/deployment/k8s/deployment/k8s-helm.html","title":"Helm&Tiller","keywords":"","body":"K8s helm & tiller https://v2.helm.sh/docs/using_helm/#installing-helm ​ export helm_version=v2.16.3 # 获取helm wget https://get.helm.sh/helm-${helm_version}-linux-amd64.tar.gz tar -xf helm-${helm_version}-linux-amd64.tar.gz mv linux-amd64/helm /usr/local/bin/ # 安装tiller kubectl -n kube-system create serviceaccount tiller kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller helm init --service-account tiller --tiller-image registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:${helm_version} --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts --upgrade # helm reset Tiller (the Helm server-side component) has been uninstalled from your Kubernetes Cluster. 恢复google的stable chart地址： # helm repo add stable https://kubernetes-charts.storage.googleapis.com 常用的选项参数： # 选项参数 -n, --name --namespace -f, --values [root@m01 helm-elk]# helm del es release \"es\" deleted [root@m01 helm-elk]# helm del es --purge release \"es\" deleted /[root@m01 helm-elk]# helm install --name es --namespace elk -f values.yaml elasticsearch-7.5.1/ K8s v1.16+ 按以上方法安装tiller可能会报错： kubectl -n kube-system create serviceaccount tiller kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller # 安装tiller报错（k8s版本问题，旧版yaml需修改） helm init --service-account tiller --tiller-image registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:${helm_version} --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts # 解决方法： # 1. 导出yaml helm init --output yaml > tiller.yaml # 2. 添加 selector: matchLabels: app: helm name: tiller spec: serviceAccount: tiller # 3. apply kubectl apply -n kube-system -f tiller.yaml Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/":{"url":"docs/deployment/else/","title":"其它","keywords":"","body":"常用软件安装、配置 CentOS yum安装mysql-5.7 安装redis-5 安装ruby和redis dump ... Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/mysql-replication.html":{"url":"docs/deployment/else/mysql-replication.html","title":"MySQL主从复制","keywords":"","body":"MySQL主从配置 mysql配置 master端my.cnf配置示例： [client] default-character-set=utf8 [mysql] default-character-set=utf8 [mysqld] init_connect='SET collation_connection = utf8_unicode_ci' init_connect='SET NAMES utf8' character-set-server=utf8 collation-server=utf8_unicode_ci skip-character-set-client-handshake ## 设置server_id，一般设置为IP，同一局域网内注意要唯一 server_id=100 ## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步） binlog-ignore-db=mysql ## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了） log-bin=edu-mysql-bin ## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存 binlog_cache_size=1M ## 主从复制的格式（mixed,statement,row，默认格式是statement） binlog_format=mixed ## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。 expire_logs_days=7 ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。 ## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致 slave_skip_errors=1062 slave端my.cnf配置示例： [client] default-character-set=utf8 [mysql] default-character-set=utf8 [mysqld] init_connect='SET collation_connection = utf8_unicode_ci' init_connect='SET NAMES utf8' character-set-server=utf8 collation-server=utf8_unicode_ci skip-character-set-client-handshake ## 设置server_id，一般设置为IP,注意要唯一 server_id=101 ## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步） binlog-ignore-db=mysql ## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用 log-bin=edu-mysql-slave1-bin ## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存 binlog_cache_size=1M ## 主从复制的格式（mixed,statement,row，默认格式是statement） binlog_format=mixed ## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。 expire_logs_days=7 ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。 ## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致 slave_skip_errors=1062 ## relay_log配置中继日志 relay_log=edu-mysql-relay-bin ## log_slave_updates表示slave将复制事件写进自己的二进制日志 log_slave_updates=1 ## 防止改变数据(除了特殊的线程) read_only=1 master端添加slave端复制账号 CREATE USER 'slave'@'%' IDENTIFIED BY 'xxxxxx'; #slave密码xxxxxx，下面change master时用到 GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%'; # mysql 5.7也可以一行命令 # GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%' IDENTIFIED BY 'xxxxxx'; # 'slave'@'%' 或 'slave'@'172.17.0.3' #172.17.0.3是slave容器的ip # 但不能写虚拟机的ip（本实验是通过docker-compose非host网络模式创建2个mysql实例，未验证host模式是否可以） 获取master信息 # mysql -uroot -p ... flush tables with read lock; # 锁表，start slave后解锁 UNLOCK TABLES show master status; +----------------------+----------+--------------+------------------+-------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set | +----------------------+----------+--------------+------------------+-------------------+ | edu-mysql-bin.000001 | 769 | | mysql slave端设定master change master to master_host='172.17.0.2', master_user='slave', master_password='xxxxxx', master_port=3306, master_log_file='edu-mysql-bin.000001', master_log_pos=769, master_connect_retry=30; # 172.17.0.3是master的IP，docker中通过docker inspect查看 # change master to master_host='172.17.0.2'时172.17.0.2是master容器的IP，不能使用虚拟机的IP ### change master to master_host='172.17.0.2', master_user='slave', master_password='slave', master_port=3306, master_log_file='edu-mysql-bin.000033', master_log_pos=72831102, master_connect_retry=30; slave启动、查看 mysql> start slave; mysql> show slave status \\G; *************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 172.17.0.3 Master_User: slave Master_Port: 3306 Connect_Retry: 30 Master_Log_File: edu-mysql-bin.000001 Read_Master_Log_Pos: 29661 Relay_Log_File: edu-mysql-relay-bin.000018 Relay_Log_Pos: 6051 Relay_Master_Log_File: edu-mysql-bin.000001 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/percona-toolkit.html":{"url":"docs/deployment/else/percona-toolkit.html","title":"Percona toolkit","keywords":"","body":"Percona toolkit 安装 wget https://www.percona.com/downloads/percona-toolkit/2.2.7/RPM/percona-toolkit-2.2.7-1.noarch.rpm yum install percona-toolkit-2.2.7-1.noarch.rpm -y yum install perl-Digest-MD5 -y Installed: percona-toolkit.noarch 0:2.2.7-1 Dependency Installed: perl.x86_64 4:5.16.3-294.el7_6 perl-Carp.noarch 0:1.26-244.el7 perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 perl-DBD-MySQL.x86_64 0:4.023-6.el7 perl-DBI.x86_64 0:1.627-4.el7 perl-Data-Dumper.x86_64 0:2.145-3.el7 perl-Encode.x86_64 0:2.51-7.el7 perl-Exporter.noarch 0:5.68-3.el7 perl-File-Path.noarch 0:2.09-2.el7 perl-File-Temp.noarch 0:0.23.01-3.el7 perl-Filter.x86_64 0:1.49-3.el7 perl-Getopt-Long.noarch 0:2.40-3.el7 perl-HTTP-Tiny.noarch 0:0.033-3.el7 perl-IO-Compress.noarch 0:2.061-2.el7 perl-IO-Socket-IP.noarch 0:0.21-5.el7 perl-IO-Socket-SSL.noarch 0:1.94-7.el7 perl-Mozilla-CA.noarch 0:20130114-5.el7 perl-Net-Daemon.noarch 0:0.48-5.el7 perl-Net-LibIDN.x86_64 0:0.12-15.el7 perl-Net-SSLeay.x86_64 0:1.55-6.el7 perl-PathTools.x86_64 0:3.40-5.el7 perl-PlRPC.noarch 0:0.2020-14.el7 perl-Pod-Escapes.noarch 1:1.04-294.el7_6 perl-Pod-Perldoc.noarch 0:3.20-4.el7 perl-Pod-Simple.noarch 1:3.28-4.el7 perl-Pod-Usage.noarch 0:1.63-3.el7 perl-Scalar-List-Utils.x86_64 0:1.27-248.el7 perl-Socket.x86_64 0:2.010-4.el7 perl-Storable.x86_64 0:2.45-3.el7 perl-Text-ParseWords.noarch 0:3.29-4.el7 perl-Time-HiRes.x86_64 4:1.9725-3.el7 perl-Time-Local.noarch 0:1.2300-2.el7 perl-constant.noarch 0:1.27-2.el7 perl-libs.x86_64 4:5.16.3-294.el7_6 perl-macros.x86_64 4:5.16.3-294.el7_6 perl-parent.noarch 1:0.225-244.el7 perl-podlators.noarch 0:2.5.1-3.el7 perl-threads.x86_64 0:1.87-4.el7 perl-threads-shared.x86_64 0:1.43-6.el7 Complete! 权限 GRANT ALL PRIVILEGES ON `zabbix`.* TO 'pt'@'%' show grants for 'root'@'192.168.1.101'; revoke SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, SUPER, REPLICATION SLAVE ON *.* FROM 'root'@'192.168.1.101'; 执行 pt-table-checksum #pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate=test_sync.checksums --create-replicate-table --databases=test_sync --tables=contact h=10.1.7.211,u=root,p=mysqlxxx,P=3306 pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate=test_sync.checksums --create-replicate-table --databases=test_sync h=10.1.7.211,u=root,p=mysqlxxx,P=3306 pt-table-sync #pt-table-sync --replicate=test_sync.checksums h=10.1.7.211,u=root,p=mysqlxxx,P=3306 h=10.1.7.211,u=root,p=mysqlxxx,P=3307 --print pt-table-sync --replicate=test_sync.checksums h=10.1.7.211,u=root,p=mysqlxxx,P=3306 h=10.1.7.211,u=root,p=mysqlxxx,P=3307 --execute err: Can't make changes on the master because no unique index exists at /usr/bin/pt-table-sync line 10649. while doing zabbix.history on 172.17.0.3 pt-heartbeat #pt-heartbeat --user=root --ask-pass --host=10.1.7.211 --port 3306 --create-table -D test_sync --interval=1 --update --replace --daemonize #pt-heartbeat -D test_sync --table=heartbeat --monitor --host=10.1.7.211 --port=3306 --user=root --password=mysqlxxx --master-server-id=100 --print-master-server-id pt-heartbeat -D test_sync --table=heartbeat --check --host=10.1.7.211 --port=3306 --user=root --password=mysqlxxx --master-server-id=100 --print-master-server-id #pt-heartbeat --stop Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/ins_mysql.html":{"url":"docs/deployment/else/ins_mysql.html","title":"yum安装MySQL","keywords":"","body":"Yum安装MySQL-5.7 系统：CentOS 7.6 # 先从官网下载rpm包 wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm # 安装yum依赖源 # rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm rpm -Uvh mysql80-community-release-el7-3.noarch.rpm # 修改yum源 sed -i 's/enabled=1/enabled=0/g' /etc/yum.repos.d/mysql-community.repo sed -i '/\\[mysql57-community\\]/,+3s/enabled=.*/enabled=1/' /etc/yum.repos.d/mysql-community.repo # 当前rpm包所在路径，安装 yum install mysql-community-server-5.7.26-1.el7.x86_64.rpm -y 完整日志： + wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm --2019-08-13 16:48:01-- https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm Resolving dev.mysql.com (dev.mysql.com)... 137.254.60.11 Connecting to dev.mysql.com (dev.mysql.com)|137.254.60.11|:443... connected. HTTP request sent, awaiting response... 302 Found Location: https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm [following] --2019-08-13 16:48:06-- https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-community-server-5.7.26-1.el7.x86_64.rpm Resolving cdn.mysql.com (cdn.mysql.com)... 23.44.160.128 Connecting to cdn.mysql.com (cdn.mysql.com)|23.44.160.128|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 173541272 (166M) [application/x-redhat-package-manager] Saving to: ‘mysql-community-server-5.7.26-1.el7.x86_64.rpm’ 100%[===========================================================================================>] 173,541,272 1.71MB/s in 1m 44s 2019-08-13 16:49:51 (1.59 MB/s) - ‘mysql-community-server-5.7.26-1.el7.x86_64.rpm’ saved [173541272/173541272] + wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm --2019-08-13 16:49:51-- https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm Resolving dev.mysql.com (dev.mysql.com)... 137.254.60.11 Connecting to dev.mysql.com (dev.mysql.com)|137.254.60.11|:443... connected. HTTP request sent, awaiting response... 302 Found Location: https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm [following] --2019-08-13 16:49:53-- https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm Resolving repo.mysql.com (repo.mysql.com)... 104.89.31.15 Connecting to repo.mysql.com (repo.mysql.com)|104.89.31.15|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 26024 (25K) [application/x-redhat-package-manager] Saving to: ‘mysql80-community-release-el7-3.noarch.rpm’ 100%[===========================================================================================>] 26,024 49.0KB/s in 0.5s 2019-08-13 16:49:55 (49.0 KB/s) - ‘mysql80-community-release-el7-3.noarch.rpm’ saved [26024/26024] + rpm -Uvh mysql80-community-release-el7-3.noarch.rpm warning: mysql80-community-release-el7-3.noarch.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY Preparing... ################################# [100%] Updating / installing... 1:mysql80-community-release-el7-3 ################################# [100%] + sed -i s/enabled=1/enabled=0/g /etc/yum.repos.d/mysql-community.repo + sed -i '/\\[mysql57-community\\]/,+3s/enabled=.*/enabled=1/' /etc/yum.repos.d/mysql-community.repo + yum install mysql-community-server-5.7.26-1.el7.x86_64.rpm -y Loaded plugins: fastestmirror, langpacks Examining mysql-community-server-5.7.26-1.el7.x86_64.rpm: mysql-community-server-5.7.26-1.el7.x86_64 Marking mysql-community-server-5.7.26-1.el7.x86_64.rpm to be installed Resolving Dependencies --> Running transaction check ---> Package mysql-community-server.x86_64 0:5.7.26-1.el7 will be installed --> Processing Dependency: mysql-community-common(x86-64) = 5.7.26-1.el7 for package: mysql-community-server-5.7.26-1.el7.x86_64 Loading mirror speeds from cached hostfile mysql57-community | 2.5 kB 00:00:00 mysql57-community/x86_64/primary_db | 184 kB 00:00:02 --> Processing Dependency: mysql-community-client(x86-64) >= 5.7.9 for package: mysql-community-server-5.7.26-1.el7.x86_64 --> Processing Dependency: libnuma.so.1(libnuma_1.1)(64bit) for package: mysql-community-server-5.7.26-1.el7.x86_64 --> Processing Dependency: libnuma.so.1(libnuma_1.2)(64bit) for package: mysql-community-server-5.7.26-1.el7.x86_64 --> Processing Dependency: libnuma.so.1()(64bit) for package: mysql-community-server-5.7.26-1.el7.x86_64 --> Running transaction check ---> Package mysql-community-client.x86_64 0:5.7.27-1.el7 will be installed --> Processing Dependency: mysql-community-libs(x86-64) >= 5.7.9 for package: mysql-community-client-5.7.27-1.el7.x86_64 ---> Package mysql-community-common.x86_64 0:5.7.26-1.el7 will be installed ---> Package numactl-libs.x86_64 0:2.0.9-7.el7 will be installed --> Running transaction check ---> Package mariadb-libs.x86_64 1:5.5.60-1.el7_5 will be obsoleted --> Processing Dependency: libmysqlclient.so.18()(64bit) for package: 2:postfix-2.10.1-7.el7.x86_64 --> Processing Dependency: libmysqlclient.so.18(libmysqlclient_18)(64bit) for package: 2:postfix-2.10.1-7.el7.x86_64 ---> Package mysql-community-libs.x86_64 0:5.7.27-1.el7 will be obsoleting --> Running transaction check ---> Package mysql-community-libs-compat.x86_64 0:5.7.27-1.el7 will be obsoleting --> Finished Dependency Resolution Dependencies Resolved ===================================================================================================================================== Package Arch Version Repository Size ===================================================================================================================================== Installing: mysql-community-libs x86_64 5.7.27-1.el7 mysql57-community 2.2 M replacing mariadb-libs.x86_64 1:5.5.60-1.el7_5 mysql-community-libs-compat x86_64 5.7.27-1.el7 mysql57-community 2.0 M replacing mariadb-libs.x86_64 1:5.5.60-1.el7_5 mysql-community-server x86_64 5.7.26-1.el7 /mysql-community-server-5.7.26-1.el7.x86_64 746 M Installing for dependencies: mysql-community-client x86_64 5.7.27-1.el7 mysql57-community 24 M mysql-community-common x86_64 5.7.26-1.el7 mysql57-community 274 k numactl-libs x86_64 2.0.9-7.el7 os 29 k Transaction Summary ===================================================================================================================================== Install 3 Packages (+3 Dependent packages) Total size: 774 M Total download size: 29 M Downloading packages: warning: /var/cache/yum/x86_64/7/mysql57-community/packages/mysql-community-common-5.7.26-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEY Public key for mysql-community-common-5.7.26-1.el7.x86_64.rpm is not installed (1/5): mysql-community-common-5.7.26-1.el7.x86_64.rpm | 274 kB 00:00:03 (2/5): mysql-community-client-5.7.27-1.el7.x86_64.rpm | 24 MB 00:00:04 (3/5): numactl-libs-2.0.9-7.el7.x86_64.rpm | 29 kB 00:00:00 (4/5): mysql-community-libs-compat-5.7.27-1.el7.x86_64.rpm | 2.0 MB 00:00:00 (5/5): mysql-community-libs-5.7.27-1.el7.x86_64.rpm | 2.2 MB 00:00:04 ------------------------------------------------------------------------------------------------------------------------------------- Total 3.6 MB/s | 29 MB 00:00:08 Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql Importing GPG key 0x5072E1F5: Userid : \"MySQL Release Engineering \" Fingerprint: a4a9 4068 76fc bd3c 4567 70c8 8c71 8d3b 5072 e1f5 Package : mysql80-community-release-el7-3.noarch (installed) From : /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql Running transaction check Running transaction test Transaction test succeeded Running transaction Warning: RPMDB altered outside of yum. Installing : mysql-community-common-5.7.26-1.el7.x86_64 1/7 Installing : mysql-community-libs-5.7.27-1.el7.x86_64 2/7 Installing : mysql-community-client-5.7.27-1.el7.x86_64 3/7 Installing : numactl-libs-2.0.9-7.el7.x86_64 4/7 Installing : mysql-community-server-5.7.26-1.el7.x86_64 5/7 Installing : mysql-community-libs-compat-5.7.27-1.el7.x86_64 6/7 Erasing : 1:mariadb-libs-5.5.60-1.el7_5.x86_64 7/7 Verifying : mysql-community-server-5.7.26-1.el7.x86_64 1/7 Verifying : numactl-libs-2.0.9-7.el7.x86_64 2/7 Verifying : mysql-community-libs-compat-5.7.27-1.el7.x86_64 3/7 Verifying : mysql-community-client-5.7.27-1.el7.x86_64 4/7 Verifying : mysql-community-common-5.7.26-1.el7.x86_64 5/7 Verifying : mysql-community-libs-5.7.27-1.el7.x86_64 6/7 Verifying : 1:mariadb-libs-5.5.60-1.el7_5.x86_64 Installed: mysql-community-libs.x86_64 0:5.7.27-1.el7 mysql-community-libs-compat.x86_64 0:5.7.27-1.el7 mysql-community-server.x86_64 0:5.7.26-1.el7 Dependency Installed: mysql-community-client.x86_64 0:5.7.27-1.el7 mysql-community-common.x86_64 0:5.7.26-1.el7 numactl-libs.x86_64 0:2.0.9-7.el7 Replaced: mariadb-libs.x86_64 1:5.5.60-1.el7_5 Complete! Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/ins_rabbitmq.html":{"url":"docs/deployment/else/ins_rabbitmq.html","title":"yum安装RabbitMQ","keywords":"","body":"Yum安装RabbitMQ 系统：CentOS 7.6 wget https://github.com/rabbitmq/erlang-rpm/releases/download/v22.0.1/erlang-22.0.1-1.el7.x86_64.rpm wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.15/rabbitmq-server-3.7.15-1.el7.noarch.rpm yum install erlang-22.0.1-1.el7.x86_64.rpm rabbitmq-server-3.7.15-1.el7.noarch.rpm Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/ins_redis5.html":{"url":"docs/deployment/else/ins_redis5.html","title":"yum安装Redis","keywords":"","body":"安装redis-5 系统：CentOS 7.6 rpm -Uvh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -Uvh https://centos7.iuscommunity.org/ius-release.rpm yum install redis5-5.0.5 -y Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/ins_ruby_redis_dump.html":{"url":"docs/deployment/else/ins_ruby_redis_dump.html","title":"安装ruby和redis dump","keywords":"","body":"安装ruby-2.6和redis-dump 系统：CentOS 7.6 # 1. 安装ruby-install wget https://github.com/postmodern/ruby-install/archive/v0.7.0.tar.gz tar -xf v0.7.0.tar.gz cd ruby-install-0.7.0/ make install # 安装ruby ruby-install ruby # 安装redis-dump gem install redis-dump # ln -s /opt/rubies/ruby-2.6.3/bin/* /usr/bin/ export PATH=/opt/rubies/ruby-2.6.3/bin:$PATH Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/ins_yapi.html":{"url":"docs/deployment/else/ins_yapi.html","title":"Y-API的安装步骤","keywords":"","body":"Y-API 的安装步骤 安装 NodeJS # 安装 nodeJs wget http://192.168.100.150/else/node-v10.15.3-linux-x64.tar.xz tar -xf node-v10.15.3-linux-x64.tar.xz -C /usr/local/ chown -R root:root /usr/local/node-v10.15.3-linux-x64 # 设置环境变量 /etc/profile export PATH=/usr/local/node-v10.15.3-linux-x64/bin:$PATH # 检查node版本 node --version 安装 MongoDB # 安装 mongodb cat /etc/yum.repos.d/mongo.repo [mongodb-org-4.0] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc EOF yum install -y mongodb-org 配置 /etc/mongod.conf： systemLog: destination: file logAppend: true path: /var/log/mongodb/mongod.log storage: dbPath: /var/lib/mongo journal: enabled: true processManagement: fork: true # fork and run in background pidFilePath: /var/run/mongodb/mongod.pid # location of pidfile timeZoneInfo: /usr/share/zoneinfo net: port: 27017 bindIp: 127.0.0.1 # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting. 启动 mongod systemctl enable mongod # 开机自启动 systemctl start mongod 安装 yapi-cli # 安装 yapi-cli npm --registry https://registry.npm.taobao.org install express # 前台测试启动yapi cd /usr/local/node-v10.15.3-linux-x64/my-yapi/ node vendors/server/app.js 配置 supervisor # 如果无easy_install命令 #wget http://192.168.100.150/else/setuptools-41.0.1.zip #unzip setuptools-41.0.1.zip #cd setuptools-41.0.1/ #python setup.py install #cd .. #rm -rf setuptools-41.0.1 # 如果无pip命令 #easy_install pip #pip install -U pip # pip安装 pip install supervisor echo_supervisord_conf > /etc/supervisord.conf 配置 /etc/supervisord.d/yapi.ini： [program:yapi] command=/usr/local/node-v10.15.3-linux-x64/bin/node vendors/server/app.js directory=/usr/local/node-v10.15.3-linux-x64/my-yapi user=root startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=50MB stdout_logfile_backups=3 stdout_logfile=/var/log/yapi.log supervisor启动yapi systemctl enable supervisord.service # supervisord 开机自启 supervisord -c /etc/supervisord.conf # 重启yapi supervisorctl restart yapi 配置 NginX upstream yapi443 { #ip_hash; server 127.0.0.1:3000; } server { listen 443 ssl; server_name yapi.keep.com; root html; index index.html index.htm; ssl_certificate /etc/letsencrypt/live/keep.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/keep.com/privkey.pem; access_log /var/log/nginx/yapi.keep.com.443.access.log main; error_log /var/log/nginx/yapi.keep.com.443.error.log ; location / { proxy_pass http://yapi443; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_redirect http://$host http://$host:$server_port; add_header Strict-Transport-Security \"max-age=31536000\"; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/gitlab-update.html":{"url":"docs/deployment/else/gitlab-update.html","title":"GitLab升级","keywords":"","body":"GitLab版本升级 先备份gitlab gitlab-rake gitlab:backup:create 生成的备份文件在：/var/opt/gitlab/backups/下，格式如：1537856454_gitlab_backup.tar 如果要恢复时间戳为1537856454的备份 gitlab-rake gitlab:backup:restore BACKUP=1537856454 升级到11.9.1（当前11.0.4） wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-11.9.1-ce.0.el7.x86_64.rpm rpm -Uvh gitlab-ce-11.9.1-ce.0.el7.x86_64.rpm Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/dataX-demo.html":{"url":"docs/deployment/else/dataX-demo.html","title":"dataX示例","keywords":"","body":"dataX数据迁移示例 数据复制： datax/bin/datax.py $dataX_json -p \"-Dstart_time=$new_st -Dend_time=$new_end\" json描述文件： { \"job\": { \"setting\": { \"speed\": { \"channel\": 3 }, \"errorLimit\": { \"record\": 0, \"percentage\": 0.02 } }, \"content\": [ { \"reader\": { \"name\": \"mysqlreader\", \"parameter\": { \"username\": \"root\", \"password\": \"xxx\", \"where\": \"create_time >= FROM_UNIXTIME(${start_time}) and create_time Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/git-orphan-usage.html":{"url":"docs/deployment/else/git-orphan-usage.html","title":"git分支重置","keywords":"","body":"git分支重置 git branch git log git checkout --orphan tmp # 创建孤立分支 git branch -a git rm -rf . git status docker cp pages_pages_1:/opt/data/_book . mv _book/* . rmdir _book/ git add . git commit -m \"Initial commit\" git branch -D gh-pages # 删除分支 git branch git branch -m gh-pages # 重命名当前分支为gh-pages，如果分支名字已经存在，则需要使用-M强制重命名 git branch -a git push -u origin gh-pages git push -f -u origin gh-pages # -f 强制推送 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/repair-mysql-repl.html":{"url":"docs/deployment/else/repair-mysql-repl.html","title":"修复mysql主从","keywords":"","body":"MySQL主从复制异常中断恢复 mysql Ver 15.1 Distrib 10.2.17-MariaDB, for Linux (x86_64) using readline 5.1 重建主从关系 # 1. S（从节点执行）: stop slave; reset slave all; # 注意：mysql相关命令要进入mysql控制台执行 systemctl stop mysqld; rsync -avzp --delete 主节点:/var/lib/mysql/ /var/lib/mysql/ # 2. M（主节点执行）: create user repl@'S'; grant replication slave on *.* to repl@'S' identified by 'xxx'; flush tables with read lock; # 3. S（从节点执行）: rsync -avzp --delete 主节点:/var/lib/mysql/ /var/lib/mysql/ rm -f /var/lib/mysql/auto.cnf systemctl start mysqld change master to master_host='M', master_user='repl', master_password='xxx', master_port=3306, master_log_file='mysql-bin.xxxxxx', master_log_pos=xxxxxxxx, master_connect_retry=30; start slave; set global max_connections=1000; flush privileges; # 4. M（主节点执行）: unlock tables; # 1. S（从节点执行）: stop slave; reset slave all; # 注意：mysql相关命令要进入mysql控制台执行 systemctl stop mysqld; ## 同步主节点的mysql数据目录 到从节点；本次同步时间很长，有100多G数据；如果不执行这一步，主从状态也能恢复正常，但主从节点数据不一致，不知道具体有何影响。 rsync -avzp --delete 主节点:/var/lib/mysql/ /var/lib/mysql/ # 2. M（主节点执行）: ## 创建一个同步用的账号repl create user repl@'S'; grant replication slave on *.* to repl@'S' identified by 'xxx'; ## 给master节点的表上锁，只读 flush tables with read lock; # 3. S（从节点执行）: ## 继前一次同步之后，再次同步主节点的mysql数据目录到从节点，并删除同步过来的/var/lib/mysql/auto.cnf文件；时间较短； rsync -avzp --delete 主节点:/var/lib/mysql/ /var/lib/mysql/ rm -f /var/lib/mysql/auto.cnf systemctl start mysqld ## 设置主从 change master to master_host='M', master_user='repl', master_password='xxx', master_port=3306, master_log_file='mysql-bin.xxxxxx', master_log_pos=xxxxxxxx, master_connect_retry=30; start slave; set global max_connections=1000; flush privileges; # 4. M（主节点执行）: ## 解除表锁 unlock tables; 其它相关 mysql> show variables like 'server_uuid%'; +---------------+--------------------------------------+ | Variable_name | Value | +---------------+--------------------------------------+ | server_uuid | 11b29075-20ac-11ea-a52f-0242ac110002 | +---------------+--------------------------------------+ mysql> show slave hosts; +-----------+------+------+-----------+--------------------------------------+ | Server_id | Host | Port | Master_id | Slave_UUID | +-----------+------+------+-----------+--------------------------------------+ | 101 | | 3306 | 100 | 11b29075-20ac-11ea-a52f-0242ac110002 | +-----------+------+------+-----------+--------------------------------------+ 1 row in set (0.00 sec) change master to master_host='192.168.0.3', master_user='repl', \\ master_password='xxxxxx', master_port=3306, master_log_file='edu-mysql-slave1-bin.000003', \\ master_log_pos=1105, master_connect_retry=30; CREATE DATABASE mydatabase CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; CREATE TABLE `test_users` ( `id` INT(11) NOT NULL AUTO_INCREMENT, `name` VARCHAR(50) NULL DEFAULT NULL COLLATE 'utf8mb4_unicode_ci', PRIMARY KEY (`id`) ) COLLATE='utf8mb4_unicode_ci' ENGINE=InnoDB; # 二进制日志解析 mysqlbinlog --no-defaults /var/lib/mysql/edu-mysql-bin.000020 |tail -n 20 |grep end_log_pos |awk '{print $7}' mysqlbinlog --no-defaults /var/lib/mysql/edu-mysql-bin.000020 >/opt/binlog.txt # 忽略某些异常代号 slave-skip-errors = 1062,1032,1060 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/disk-lvcreate.html":{"url":"docs/deployment/else/disk-lvcreate.html","title":"磁盘扩容","keywords":"","body":"磁盘扩容 # lvdisplay # vgdisplay # 删除lv lvremove /dev/docker_vg/data lvremove /dev/docker_vg/docker_lv # 删除vg vgremove docker_vg # 创建vg vgcreate vg /dev/sdb1 # 创建lv, 大小200G lvcreate -L 200G -n docker vg lvcreate -l 76790 -n data vg # 76790单位？ mkfs.xfs /dev/vg/data mount /dev/vg/data /data mkfs.xfs /dev/vg/docker mkdir /var/lib/docker mount /dev/vg/docker /var/lib/docker vim /etc/fstab ​ /dev/mapper/vg-data /data xfs defaults 0 0 /dev/mapper/vg-docker /var/lib/docker xfs defaults 0 0 ​``` ls /dev/mapper/vg-docker ls /dev/mapper/vg-data ``` Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/deployment/else/docker-notes.html":{"url":"docs/deployment/else/docker-notes.html","title":"docker若干","keywords":"","body":"docker若干记录 给已经启动的容器映射端口 docker run --rm -p 8001:1234 verb/socat TCP-LISTEN:1234,fork TCP-CONNECT:172.18.0.5:8000 定期清理大日志 0 2 * * * du -sm /var/lib/docker/containers/*/*.log |awk '{if($1>10240){print $2}}' |xargs truncate -s 100M 分配指定的内部IP version: '3' services: db: image: mysql:5.7 environment: TZ: 'Asia/Shanghai' MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} restart: always command: ['mysqld', '--character-set-server=utf8'] volumes: - /data/mysql:/var/lib/mysql - ./config/master.cnf:/etc/mysql/my.cnf #- /var/lib/mysql/mysql.sock:/var/lib/mysql/mysql.sock ports: - \"3306:3306\" networks: extnetwork: ipv4_address: 172.19.0.2 db2: image: mysql:5.7 environment: TZ: 'Asia/Shanghai' MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} restart: always command: ['mysqld', '--character-set-server=utf8'] volumes: - /data/mysql_3307:/var/lib/mysql - ./config/slave.cnf:/etc/mysql/my.cnf ports: - \"3307:3306\" networks: extnetwork: ipv4_address: 172.19.0.3 networks: extnetwork: ipam: config: - subnet: 172.19.0.0/16 #gateway: 172.19.0.1 docker加速 [root@VM_0_13_centos note]# cat /etc/docker/daemon.json { \"registry-mirrors\": [\"https://mirror.ccs.tencentyun.com\"] } === { \"registry-mirrors\": [\"https://zdojag2v.mirror.aliyuncs.com\"] } === registry.mirrors.aliyuncs.com === { \"registry-mirrors\": [\"https://registry.docker-cn.com\"] } 安装 # 设置yum源 wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo # 列出可安装的版本 yum list docker-ce --show-duplicates yum install docker-ce-18.09 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/normal/HiS.html":{"url":"docs/normal/HiS.html","title":"HiS","keywords":"","body":"HiS - Ops [root@VM_0_13_centos Ops]# cat /etc/supervisord.d/ops.ini [program:ops] #command=/opt/Ops/venv/bin/python manage.py runserver 0.0.0.0:8848 #command=/opt/Ops/venv/bin/gunicorn Ops.wsgi:application -c gunicorn_conf.py #command=/opt/Ops/venv/bin/gunicorn -k gevent Ops.wsgi:application -c gunicorn_conf.py command=/opt/run-ops.sh directory=/opt/Ops/Ops user=root startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=20MB stdout_logfile_backups=3 stdout_logfile=/var/log/supervisor_run-ops.log [root@VM_0_13_centos Ops]# [root@VM_0_13_centos Ops]# [root@VM_0_13_centos Ops]# cat /opt/run-ops.sh #!/bin/sh set +e ps -ef |grep :8848 |awk '$3==1{print $2}' |xargs kill -9 /opt/Ops/venv/bin/python manage.py runserver 0.0.0.0:8848 nginx conf: upstream ops { server 172.17.0.13:8848; } server { listen 80; server_name ops.keep.com; access_log /var/log/ops80-access.log; error_log /var/log/ops80-error.log info; keepalive_timeout 5; root /opt/Ops/Ops; location /static/ { autoindex on; alias /opt/Ops/Ops/static/; } location /media/ { autoindex on; alias /opt/Ops/Ops/media/; } location /ws { proxy_pass http://ops80$request_uri; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; } location / { proxy_pass http://ops80; proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; } } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/alerts/":{"url":"docs/monitoring/alerts/","title":"Alerts","keywords":"","body":"监控报警 这是一个监控告警管理应用，接收来自监控软件如zabbix、prometheus的报警信息，将公司的服务器资产按平台、系统、分组划分统计报警数，对报警匹配通知规则通知相应的接收人 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/alerts/intro_syshost_syslink.html":{"url":"docs/monitoring/alerts/intro_syshost_syslink.html","title":"系统监控","keywords":"","body":"系统链路、主机目录功能说明 系统链路 【系统链路】根据各平台、系统内的各主机主动上报的检测数据，自动生成主机连接关系图，直观反映系统内的连接状态，效果图如下（图为模拟连接数据）： 连接线的状态说明： 最近5分钟内A->B检测数据status为\"ok\"开头，则A->B连线为 绿色 最近5分钟内A->B检测数据status为\"fail\"开头，则A->B连线为 红色 最近5分钟内A->B检测数据status为其它字符，A->B连线为 灰色 最近5分钟内A->B无数据，但最近7天内有数据，status将被置为\"lost\"，连线也是 灰色 如何上传检测结果 以下给出2种示例 通过shell curl 以图中 138 -> 139 failed 为例，通过简单的HTTP请求脚本 post_syslink_data.sh : #!/bin/sh set -x # url=\"http://alerts.keep.com/monitor/received/syslink/info/\" url=\"http://192.168.101.68/monitor/received/syslink/data/ -H Host:alerts.keep.com\" ts=`date +%s` from=\"$1\" to=\"$2\" sta=\"$3\" ttl=\"$4\" res=\"$5\" curl -XPOST -i $url -H \"Content-Type:application/json\" -d '{ \"timestamp\": '\"$ts\"', \"from\": \"'\"$from\"'\", \"to\": \"'\"$to\"'\", \"status\": \"'\"$sta\"'\", \"title\": \"'\"$ttl\"'\", \"result\": \"'\"$res\"'\", \"token\": \"xxxxxxxxxxxxxxx\" # 通过【系统配置】查看token }' echo \"end.\" 发送检测结果给服务端接收： [root@zabbix02 test]# sh post_syslink_data.sh \"192.168.100.138\" \"192.168.100.139\" \"ok\" \"title:138->139\" \"test is ok\" HTTP/1.1 200 OK Server: nginx/1.17.1 Date: Tue, 12 May 2020 07:02:24 GMT Content-Type: text/html; charset=utf-8 Content-Length: 35 Connection: keep-alive X-Frame-Options: SAMEORIGIN Post the syslink Data successfully!+ echo end. end. 注意：此脚本的参数不能含某些特殊字符，如 \"!\" 等待几秒后，原 138->139 failed 的连接状态将变为绿色ok : 通过python requests HTTP请求脚本 post_syslink_data.py : #!/usr/bin/python2 # coding=utf8 import os import sys import json import requests import logging reload(sys) sys.setdefaultencoding('utf-8') logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s (%(filename)s:L%(lineno)d)', datefmt='%Y-%m-%d %H:%M:%S', filename='/tmp/post_syslink.log', filemode='a') logger = logging.getLogger(__name__) token = 'xxxxxxxxxxx' server_ip = '192.168.101.68' server_name = 'alerts.keep.com' headers = {\"Host\": server_name} # url = \"http://{}/monitor/received/syslink/info/\".format(server_ip) url = \"http://{}/monitor/received/syslink/data/\".format(server_ip) def post_data(payload): try: logger.info(\"payload is: {}\".format(payload)) r = requests.post(url, data=json.dumps(payload), headers=headers) logger.info(\"r.status_code is: {}\".format(r.status_code)) if r.text: logger.info(r.text) print(\"{} {}\".format(r.status_code, r.text)) else: logger.info(\"Server return http status code: {0}\".format(r.status_code)) except Exception as msg: logger.info(msg) if __name__ == '__main__': try: para01 = sys.argv[1] if '-f' == para01: para02 = sys.argv[2] if not os.path.exists(para02): print(\"No such file: {}\".format(para02)) exit(1) else: with open(para02, 'r') as f: para01 = f.read() try: data = json.loads(para01) except: exit(2) payload = {\"token\": token} if isinstance(data, list): payload[\"data\"] = data else: payload.update(data) post_data(payload) except Exception as e: print(str(e)) 发送的数据须符合json格式： 单条数据： { \"timestamp\": 1589268730, \"from\": \"192.168.100.138\", \"to\": \"192.168.100.139\", \"status\": \"ok\", \"title\": \"test 138->139\", \"result\": \"result is ok ...\" } 多条数据： [ { \"timestamp\": 1589268445, \"from\": \"192.168.100.138\", \"to\": \"192.168.106.178\", \"status\": \"ok\", \"title\": \"test is ok\", \"result\": \"result is ok ...\" }, { \"timestamp\": 1589268445, \"from\": \"192.168.100.138\", \"to\": \"192.168.100.139\", \"status\": \"ok\", \"title\": \"test 138->139\", \"result\": \"result is ok ...\" } ] 发送命令： # 假设检测结果数据存放于文件result.json # 则可以 python post_syslink_data.py \"`cat result.json`\" # 或 python post_syslink_data.py -f result.json 示例1： [root@zabbix02 test]# cat check_res.txt { \"timestamp\": 1589268307, \"from\": \"192.168.100.138\", \"to\": \"192.168.100.139\", \"status\": \"failed\", \"title\": \"test 138->139\", \"result\": \"result is failed ...\" } [root@zabbix02 test]# python post_syslink_data.py -f check_res.txt 200 Post the syslink Data successfully! 示例2（多条数据）： [root@zabbix02 test]# cat check_res2.txt [ { \"timestamp\": 1589268445, \"from\": \"192.168.100.138\", \"to\": \"192.168.106.178\", \"status\": \"ok\", \"title\": \"test is ok\", \"result\": \"result is ok ...\" }, { \"timestamp\": 1589268445, \"from\": \"192.168.100.138\", \"to\": \"192.168.100.139\", \"status\": \"ok\", \"title\": \"test 138->139\", \"result\": \"result is ok ...\" } ] [root@zabbix02 test]# python post_syslink_data.py -f check_res2.txt 200 Post the syslink Data successfully! 示例3（命令的结果作为参数1）： [root@zabbix02 test]# cat check_res.txt { \"timestamp\": 1589268730, \"from\": \"192.168.100.138\", \"to\": \"192.168.100.139\", \"status\": \"failed\", \"title\": \"test 138->139\", \"result\": \"result is failed ...\" } [root@zabbix02 test]# python post_syslink_data.py \"`cat check_res.txt`\" 200 Post the syslink Data successfully! 注意： 不支持管道输入！ 错误示例： [root@zabbix02 test]# cat check_res.txt |python post_syslink_data.py list index out of range 主机目录 根据各主机上报的监控数据显示主机CPU、磁盘、网卡等监控图，效果如下 监控数据定时采集及上报依赖于运行在目标机器上的agent服务，执行配套的脚本安装、启动即可。当前仅在两三个主机上安装了监控的agent。 安装client (agent) 以图示主机为例，其安装脚本临时存放在： [root@b68-docker-prd client]# pwd /srv/adminset/client [root@b68-docker-prd client]# tree . ├── adminset_agent.py ├── adminsetd ├── adminsetd.pid ├── adminsetd.service ├── install.sh └── uninstall.sh 安装前，修改adminset_agent.py脚本中的token和server_ip： 然后执行一次 install.sh 即完成安装，查看是否已经启动： [root@b68-docker-prd client]# service adminsetd status Redirecting to /bin/systemctl status adminsetd.service ● adminsetd.service - Adminset Agent Script Loaded: loaded (/usr/lib/systemd/system/adminsetd.service; enabled; vendor preset: disabled) Active: active (running) since Mon 2020-03-23 15:32:25 CST; 1 months 19 days ago ... agent的安装目录是 /var/opt/adminset/client/ : [root@b68-docker-prd client]# pwd /var/opt/adminset/client [root@b68-docker-prd client]# ls adminset_agent.py adminsetd.pid agent.log uninstall.sh venv [root@b68-docker-prd client]# 按上述安装过之后，即可删除 /srv/adminset/client 这个临时安装脚本目录。 由于： 所有主机已通过zabbix监控并运行了zabbix agent 多运行一个程序或多或少会占用一定的系统资源 因此，不建议安装此后台监控脚本，但可针对少数想关注的机器安装，如本例。 数据清理 通过【系统配置】-> 【清理监控数据】清理mongodb中保存的历史监控数据 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/consul/":{"url":"docs/monitoring/consul/","title":"Consul","keywords":"","body":" Consul 是一个分布式服务发现与配置的工具。与其他分布式服务注册与发现的方案，Consul的方案更“一站式”，内置了服务注册与发现框架、分布一致性协议实现（不需要ZooKeeper）、健康检查、K/V存储、多数据中心方案。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/consul/consul.html":{"url":"docs/monitoring/consul/consul.html","title":"Consul","keywords":"","body":"Consul 当前consul集群（192.168.100.140-142）用作服务发现和健康检查，配合Prometheus、NginX完成动态配置。 API 以Consul API为准。我们主要用了以下两个： 注册服务（Register Service） curl http://192.168.100.140:8500/v1/agent/service/register -X PUT -i -H \"Content-Type:application/json\" -d '{ \"Name\": \"test-name\", \"Tags\": [ \"test-tag\" ], \"EnableTagOverride\": false, \"ID\": \"test-id\", \"Meta\": {\"version\": \"1.0\"}, \"Address\": \"192.168.100.150\", \"Port\": 8080, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"Args\": [], \"HTTP\": \"http://192.168.100.150:8080/\", \"Interval\": \"15s\" } }' 注销服务（Deregister Service） curl -X PUT http://192.168.100.140:8500/v1/agent/service/deregister/test-id Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/consul/consul-template.html":{"url":"docs/monitoring/consul/consul-template.html","title":"Consul-template","keywords":"","body":"Consul-Template 配置consul client 在当前NginX节点安装Consul，并作为client加入consul集群。 安装consul-template wget https://releases.hashicorp.com/consul-template/0.20.0/consul-template_0.20.0_linux_amd64.tgz tar -xf consul-template_0.20.0_linux_amd64.tgz mv consul-template /usr/bin chmod a+x /usr/bin/consul-template 注册服务 curl http://192.168.100.140:8500/v1/agent/service/register -X PUT -i -H \"Content-Type:application/json\" -d '{ \"ID\": \"test.zlz.01\", \"Name\": \"test_zlz\", \"Tags\": [\"zlz\"], \"Address\": \"192.168.101.35\", \"Port\": 9003, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"Args\": [], \"HTTP\": \"http://192.168.101.35:9003/hc\", \"Interval\": \"15s\" }, \"Meta\": { \"version\": \"1.0\" }, \"EnableTagOverride\": false }' curl http://192.168.100.140:8500/v1/agent/service/register -X PUT -i -H \"Content-Type:application/json\" -d '{ \"ID\": \"test.zlz.02\", \"Name\": \"test_zlz\", \"Tags\": [\"zlz\"], \"Address\": \"192.168.101.36\", \"Port\": 9003, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"Args\": [], \"HTTP\": \"http://192.168.101.36:9003/hc\", \"Interval\": \"15s\" }, \"Meta\": { \"version\": \"1.0\" }, \"EnableTagOverride\": false }' 编写NginX配置模板 nginx.conf.ctmpl： {{range services -}} {{$name := .Name}} {{$service := service .Name}} {{if in .Tags \"zlz\"}} # 此例仅选择tag中包含zlz的, 下同; 各服务根据实际定义的tag自行修改 upstream {{$name}} { {{range $service}}server {{.Address}}:{{.Port}}; {{end}} } {{end}} {{end}} {{- range services -}} {{$name := .Name}} {{if in .Tags \"zlz\"}} server { listen 80; # server_name自行修改 server_name xxx.keep.com; root html; index index.html index.htm; access_log /var/log/nginx/{{$name}}_access.log main; location / { proxy_pass http://{{$name}}; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } {{end}} {{end}} 编写consul-template配置文件 nginx.hcl： consul { # 当前nginx节点的内网IP, 同时也是consul client节点 address = \"192.168.100.150:8500\" } template { # nginx配置模板 source = \"nginx.conf.ctmpl\" # nginx配置输出路径 destination = \"/etc/nginx/conf.d/default.conf\" command = \"service nginx reload\" } 测试consul-template consul-template -config nginx.hcl # 会生成/etc/nginx/conf.d/default.conf # [control] + c 或者不使用.hcl配置文件： nohup consul-template -template \"nginx.conf.ctmpl:/etc/nginx/conf.d/default.conf:nginx -s reload\" > consul-template.out 2>&1 & 测试自动更新NginX配置 运行consul-template服务 nohup consul-template -config nginx.hcl >/var/log/consul-template.log 2>&1 & 模拟健康状态异常时自动更新NginX配置 比如，修改\"HTTP\": \"http://192.168.101.35:9003/hc\"为\"HTTP\": \"http://192.168.101.35:9003/hcc\"，重新注册该服务后test.zlz.01的服务健康状态变为不正常。consul-template能自动检测到异常，并重新生成/etc/nginx/conf.d/default.conf。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/consul/my-nginx-consul.html":{"url":"docs/monitoring/consul/my-nginx-consul.html","title":"Nginx-Consul-template","keywords":"","body":"构建nginx-consul-template Tree: |-- docker-compose.yml |-- Dockerfile |-- files | |-- consul-template_0.20.0_linux_amd64.zip | |-- nginx.conf | |-- nginx.conf.ctmpl | `-- nginx.sh Dockerfile: FROM nginx:alpine # RUN apk update && \\ RUN apk add --no-cache unzip ENV CONSUL_TEMPLATE_VERSION 0.20.0 ENV PACKAGE consul-template_0.20.0_linux_amd64.zip # ADD https://releases.hashicorp.com/consul-template/${CONSUL_TEMPLATE_VERSION}/consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.zip /tmp/consul-template.zip ADD files/nginx.conf files/nginx.conf.ctmpl files/nginx.sh files/${PACKAGE} /etc/nginx/ RUN unzip /etc/nginx/${PACKAGE} -d /usr/bin && \\ chmod +x /usr/bin/consul-template && \\ rm -f /etc/nginx/${PACKAGE} && \\ chmod +x /etc/nginx/nginx.sh && \\ apk del unzip WORKDIR /etc/nginx ENTRYPOINT [\"/usr/bin/consul-template\"] nginx.sh: #!/bin/sh if nginx -t >/dev/null; then if [ -s /var/run/nginx.pid ]; then nginx -s reload if [ $? != 0 ]; then rm -f /var/run/nginx.pid nginx -c /etc/nginx/nginx.conf fi else nginx -c /etc/nginx/nginx.conf fi fi 修改nginx.conf: ... http { server_names_hash_bucket_size 128; ... nginx.conf.ctmpl: 含http标签的会被选择 {{range services}} {{$name := .Name}} {{$service := service .Name}} {{if in .Tags \"http\"}} upstream {{$name}} { {{range $service}}server {{.Address}}:{{.Port}}; {{end}} } {{end}} {{end}} {{range services}} {{$name := .Name}} {{if in .Tags \"http\"}} server { listen 80; server_name {{$name}}.{{env \"HOST_TYPE\"}}.keep.com; server_name {{$name}}.keep.com; root html; index index.html index.htm; access_log /var/log/nginx/{{$name}}_access.log main; location / { proxy_pass http://{{$name}}; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } {{end}} {{end}} docker-compose.yml: version: '3' services: consul: image: consul container_name: consul environment: SERVICE_8500_NAME: consul SERVICE_8500_TAGS: \"consul,http\" ports: - 8400:8400 - 8500:8500 - 8600:53/udp command: agent -server -client=0.0.0.0 -dev -node=node0 -bootstrap-expect=1 -data-dir=/tmp/consul registrator: image: gliderlabs/registrator depends_on: - consul volumes: - /var/run/docker.sock:/tmp/docker.sock command: -internal consul://consul:8500 nginx-consul: image: my-nginx-consul:alpine build: . depends_on: - consul - registrator ports: - 80:80 volumes: - ./files/nginx.conf.ctmpl:/etc/nginx/nginx.conf.ctmpl environment: HOST_TYPE: ${HOST_TYPE} command: -consul-addr=consul:8500 -wait=3s -template /etc/nginx/nginx.conf.ctmpl:/etc/nginx/conf.d/app.conf:/etc/nginx/nginx.sh Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/consul/consul-acl.html":{"url":"docs/monitoring/consul/consul-acl.html","title":"Consul-ACL","keywords":"","body":"Consul ACL systemd service [Unit] Description=consul agent Requires=network-online.target After=network-online.target [Service] EnvironmentFile=-/etc/sysconfig/consul Environment=GOMAXPROCS=2 Restart=on-failure ExecStart=/usr/local/bin/consul agent -config-dir=/opt/consul/conf -rejoin ExecReload=/bin/kill -HUP $MAINPID KillSignal=SIGTERM [Install] WantedBy=multi-user.target acl.json 启用ACL，需在配置加载目录下添加acl配置文件 { \"acl_datacenter\": \"dc1\", \"acl_master_token\": \"xxxxxxxxx\", \"acl_default_policy\": \"deny\", \"acl_down_policy\": \"extend-cache\" } deregitster curl -X PUT http://192.168.100.140:8500/v1/agent/service/deregister/ -H \"X-Consul-Token:xxx\" register 仅node check curl http://10.1.100.57:8500/v1/agent/service/register -X PUT -i -H \"Content-Type:application/json\" -H \"X-Consul-Token:xxx\" -d '{ \"ID\": \"test.swms.api3\", \"Name\": \"test-swms-api3\", \"Tags\": [\"test\", \"swms\"], \"Address\": \"192.168.101.35\", \"Port\": 9003, \"Meta\": { \"version\": \"1.0\" }, \"EnableTagOverride\": false }' node check + service check curl http://10.1.100.57:8500/v1/agent/service/register -X PUT -i -H \"Content-Type:application/json\" -H \"X-Consul-Token:xxxxxxxxxxx\" -d '{ \"ID\": \"test.swms.api2\", \"Name\": \"test-swms-api2\", \"Tags\": [\"test\", \"swms\"], \"Address\": \"192.168.101.35\", \"Port\": 9003, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"Args\": [], \"HTTP\": \"http://192.168.101.35:9003/hc\", \"Interval\": \"15s\" }, \"Meta\": { \"version\": \"1.0\" }, \"EnableTagOverride\": false }' Name不能包含小数点 创建一个agent token: curl \\ --request PUT \\ --header \"X-Consul-Token: xxxxxxxxxxxxxxxx\" \\ --data \\ '{ \"Name\": \"Agent Token\", \"Type\": \"client\", \"Rules\": \"node \\\"\\\" { policy = \\\"write\\\" } service \\\"\\\" { policy = \\\"read\\\" }\" }' http://127.0.0.1:8500/v1/acl/create Type: client WebUI token的policy可以设置为只读: service_prefix \"\" { policy = \"read\" } key_prefix \"\" { policy = \"read\" } node_prefix \"\" { policy = \"read\" } 示例： [root@VM_0_4_centos ins_exporter]# cat deReg.sh curl -i --request PUT \\ --header \"X-Consul-Token: xxxxxxxxxxxxxxxxxx\" \\ http://10.1.100.57:8500/v1/agent/service/deregister/$1 [root@VM_0_4_centos ins_exporter]# sh deReg.sh id-xxl-vm04 HTTP/1.1 200 OK Vary: Accept-Encoding Date: Sun, 07 Jul 2019 08:45:42 GMT Content-Length: 0 [root@VM_0_4_centos ins_exporter]# cat regXXL.sh curl http://10.1.100.57:8500/v1/agent/service/register -X PUT -i -H \"Content-Type:application/json\" \\ --header \"X-Consul-Token: xxxxxxxxxxxxxxxxxx\" -d '{ \"ID\": \"id-xxl-vm04\", \"Name\": \"xxl\", \"Tags\": [\"xxl-job\", \"http\"], \"Address\": \"192.168.100.150\", \"Port\": 9977, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"HTTP\": \"http://baidu.com\", \"Interval\": \"15s\" }, \"Meta\": { \"version\": \"1.0\", \"type\": \"app\", \"hostname\": \"vm03\" }, \"EnableTagOverride\": false }' [root@VM_0_4_centos ins_exporter]# sh regXXL.sh HTTP/1.1 200 OK Vary: Accept-Encoding Date: Sun, 07 Jul 2019 08:47:47 GMT Content-Length: 0 # 不带token被禁止 [root@VM_0_4_centos ins_exporter]# curl -i -X PUT http://10.1.100.57:8500/v1/agent/service/deregister/id-xxl-vm04 HTTP/1.1 403 Forbidden Vary: Accept-Encoding Date: Sun, 07 Jul 2019 08:48:54 GMT Content-Length: 17 Content-Type: text/plain; charset=utf-8 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/consul/consul-api-memo.html":{"url":"docs/monitoring/consul/consul-api-memo.html","title":"Consul APIs","keywords":"","body":"Consul API # register curl http://192.168.100.140:8500/v1/agent/service/register -X PUT -i -H \"Content-Type:application/json\" -d '{ \"Name\": \"name002\", \"Tags\": [ \"tag2\" ], \"EnableTagOverride\": false, \"ID\": \"name002_id01\", \"Meta\": {\"ver\": \"2.0\"}, \"Address\": \"127.0.0.1\", \"Port\": 80, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"Args\": [], \"HTTP\": \"www.bd6.com\", \"Interval\": \"15s\" } }' # deRegister by ID curl -X PUT http://192.168.100.140:8500/v1/agent/service/deregister/test.swms.api2.01 # DNS查询 dig @192.168.100.140 -p 8600 web.service.consul SRV # passing状态的服务 curl -s http://192.168.100.141:8500/v1/health/state/passing ### OK curl http://192.168.100.140:8500/v1/agent/health/service/name/swms.api2 #??? 输出[] curl -s http://192.168.100.142:8500/v1/catalog/service/web ## OK [root@yh-zlz ~]# curl http://192.168.100.141:8500/v1/catalog/services {\"YH.EasEdi\":[\"\"],\"consul\":[],\"swms.api2\":[\"swms\",\"api2\"],\"web\":[\"rails\"]} [root@yh-zlz opt]# consul members Node Address Status Type Build Protocol DC Segment 140-consul01 192.168.100.140:8301 alive server 1.4.4 2 dc01 141-consul02 192.168.100.141:8301 alive server 1.4.4 2 dc01 142-consul03 192.168.100.142:8301 alive server 1.4.4 2 dc01 2-RuntoTest 192.168.100.2:8301 alive client 1.4.4 2 dc01 yh_zlz 192.168.100.150:8301 alive client 1.4.4 2 dc01 [root@yh-zlz opt]# consul operator raft list-peers Node ID Address State Voter RaftProtocol 142-consul03 e75bff67-c414-286e-4e44-ab29ade3a5e5 192.168.100.142:8300 leader true 3 140-consul01 bc1918d1-f12f-a149-4e92-054a1794a6fd 192.168.100.140:8300 follower true 3 141-consul02 bcea5d37-80a5-521b-1703-c9578ff0a261 192.168.100.141:8300 follower true 3 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/":{"url":"docs/monitoring/prometheus/","title":"Prometheus","keywords":"","body":"Prometheus 在Docker中运行Prometheus监控组件，包括prometheus, alertmanager, grafana, 及相关exporter，实现基本的业务监控。 下图是官方网站上的Prometheus完整架构图： Prometheus配置（开发环境） 配置文件目录： [root@docker-dev docker-svc]# tree -C -L 4 prometheus/ prometheus/ ├── config │ ├── alertmanager │ │ ├── alertmanager.yml │ │ └── template │ │ └── test.tmpl │ └── prometheus │ ├── prometheus.yml │ └── rules │ └── default.yml └── docker-compose.yml docker-compose.yml: version: '3.0' services: alertmanager: image: prom/alertmanager volumes: - ./config/alertmanager:/etc/alertmanager ports: - \"9093:9093\" environment: SERVICE_NAME: alertmanager SERVICE_TAGS: \"alertmanager,http\" prometheus: image: prom/prometheus volumes: - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml - ./config/prometheus/rules:/etc/prometheus/rules - /etc/localtime:/etc/localtime environment: SERVICE_NAME: prometheus SERVICE_TAGS: \"prometheus-target,prometheus,http\" ports: - 9090:9090 grafana: image: grafana/grafana volumes: # - grafana-storage:/var/lib/grafana - /data/grafana:/var/lib/grafana environment: - \"GF_SERVER_ROOT_URL=http://grafana.server.name\" - \"GF_SECURITY_ADMIN_PASSWORD=xxxxxx\" - \"SERVICE_NAME=grafana\" - \"SERVICE_TAGS=prometheus-target,grafana,http\" ports: - 3000:3000 node-exporter: image: prom/node-exporter volumes: - /proc:/host/proc:ro - /sys:/host/sys:ro - /:/rootfs:ro network_mode: host ports: - 9100:9100 environment: SERVICE_TAGS: \"prometheus-target\" command: - '--path.procfs=/host/proc' - '--path.sysfs=/host/sys' - '--collector.filesystem.ignored-mount-points=\"^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)\"' - '--collector.filesystem.ignored-fs-types=\"^(sys|proc|auto|cgroup|devpts|ns|au|fuse\\.lxc|mqueue)(fs|)$$\"' Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/prom/":{"url":"docs/monitoring/prometheus/prom/","title":"Prometheus","keywords":"","body":" 主要涉及的Prometheus组件：prometheus的prometheus、alertmanager，相关exporter，及grafana提供的图表工具 核心组件 Prometheus 告警组件 Alertmanager 图表组件 Grafana 联邦 自动发现 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/prom/prometheus-intro.html":{"url":"docs/monitoring/prometheus/prom/prometheus-intro.html","title":"核心组件——prometheus","keywords":"","body":"Prometheus监控 环境：CentOS Linux release 7.5.1804 (Core)、5.5.60-MariaDB 运行方式：Prometheus，Grafana和Alertmanager通过docker安装运行，MySQL和exporter直接运行在VM上 配置方式：静态配置 安装（静态配置） docker pull prom/prometheus docker pull grafana/grafana docker pull prom/alertmanager [root@VM_0_2_centos config]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE prom/prometheus latest f57ed0abd85c 2 days ago 109MB grafana/grafana latest ffd9c905f698 8 days ago 241MB prom/alertmanager latest 02e0d8e930da 6 weeks ago 42.5MB 执行prometheus前，先配置好以下文件。 [root@zabbix02 ~]# tree config/ config/ ├── alertmanager │ ├── alertmanager.yml │ └── template │ └── test.tmpl └── prometheus ├── prometheus.yml └── rules.yml prometheus.yml global: scrape_interval: 15s evaluation_interval: 15s scrape_timeout: 15s external_labels: monitor: 'codelab_monitor' # 报警服务，alertmanager默认运行在9093端口 alerting: alertmanagers: - static_configs: - targets: [\"localhost:9093\"] # 报警规则 rule_files: - \"rules.yml\" # 以下定义了可采集的指标数据源 scrape_configs: # 安装node-exporter并运行后，默认在端口9100对外暴露相关metrics - job_name: 'node' scrape_interval: 5s static_configs: - targets: ['localhost:9100'] # prometheus运行时自身也会提供一些metrics - job_name: 'prometheus' scrape_interval: 5s static_configs: - targets: ['localhost:9090'] # mysql指标由mysqld-exporter导出，默认9104端口 - job_name: 'mysqld' scrape_interval: 5s static_configs: - targets: ['localhost:9104'] rules.yml groups: # 测试规则，当CPU使用率（5分钟）超过20%时，达到报警条件 - name: test-rules rules: - alert: hostCpuUsageAlert expr: sum(avg without (cpu)(irate(node_cpu_seconds_total{mode!='idle'}[5m]))) by (instance) * 100 > 20 for: 1s labels: severity: page annotations: summary: \"Instance {{ $labels.instance }} CPU usgae high\" description: \"{{ $labels.instance }} CPU usage above 20% (current value: {{ $value }})\" alertmanager.yml global: resolve_timeout: 5m #处理超时时间，默认为5min smtp_smarthost: 'smtp.163.com:465' # 邮箱smtp服务器代理 smtp_from: 'xxx@163.com' # 发送邮箱名称 smtp_auth_username: 'xxx@163.com' # 邮箱名称 smtp_auth_password: 'xxxxxxxx' # 邮箱密码或授权码 wechat_api_url: 'https://qyapi.weixin.qq.com/cgi-bin/' # 企业微信地址 # 模板 templates: - 'template/*.tmpl' # 路由 route: group_by: ['alertname'] # 报警分组依据 group_wait: 10s # 第一次等待多久时间发送一组警报的通知 group_interval: 10s # 在发送新警报前的等待时间 repeat_interval: 1m # 发送重复警报的周期 对于email此项不可以设置过低 receiver: 'web.hook' # 使用receivers中name为web.hook的报警方式 # 常用的报警通知方式有3种，webhook、email和企业微信 receivers: # webhook方式 - name: 'web.hook' webhook_configs: # 本地webhook打印报警信息。webhook方式可用于测试，或执行某些动作。 - url: 'http://127.0.0.1:5001/' # 邮件方式 - name: 'email' email_configs: - to: 'xxx@yyy.com' # 收件人 html: '{{ template \"test.html\" . }}' # 邮箱内容html模板 headers: { Subject: \"[WARN] 报警邮件\"} # 邮件主题 # 企业微信方式 - name: 'qywx' webhook_configs: - send_resolved: true to_party: '1' # 接收组的id agent_id: 'xxxxxx' # 企业微信-->自定应用-->AgentId corp_id: 'xxxxxx' # 我的企业-->CorpId[在底部] api_secret: 'xxxxxx' # 企业微信-->自定应用-->Secret message: '{{ template \"test.html\" . }}' # 模板设定 这里不使用docker方式运行exporter，通过下载安装包安装node_exporter和mysqld_exporter。 安装、启动node_exporter wget https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz tar -xf node_exporter-0.17.0.linux-amd64.tar.gz cd node_exporter-0.17.0.linux-amd64/ # 运行node_exporter nohup ./node_exporter & # 查看node_exporter监听的端口 [root@zabbix02 node_exporter-0.17.0.linux-amd64]# netstat -alntp |grep node_expo tcp6 0 0 :::9100 :::* LISTEN 21164/./node_export tcp6 0 0 ::1:9100 ::1:57580 ESTABLISHED 21164/./node_export 安装、启动mysqld_exporter wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.11.0/mysqld_exporter-0.11.0.linux-amd64.tar.gz tar -xf mysqld_exporter-0.11.0.linux-amd64.tar.gz cd exporter/mysqld_exporter-0.11.0.linux-amd64/ # 本文中，被监控的mysql与prometheus server在同一个机器上 # 将使用mysql中创建的名为exporter的用户查询mysql指标 cat .my.cnf [client] user=exporter password=exporter EOF # 需创建mysql exporter用户 CREATE USER 'exporter'@'localhost' IDENTIFIED BY 'exporter'; GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost'; # flush privileges; # 运行mysqld_exporter nohup ./mysqld_exporter --config.my-cnf=\"./.my.cnf\" & 运行prometheus docker run -d -p 9090:9090 --name prometheus --net=host \\ -v /root/config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \\ -v /root/config/prometheus/rules.yml:/etc/prometheus/rules.yml prom/prometheus 运行alertmanager docker run -d -p 9093:9093 --net=host \\ -v /root/config/alertmanager/alertmanager.yml:/etc/alertmanager/config.yml \\ --name alertmanager prom/alertmanager 安装及配置grafana 要通过grafana展示监控数据，见http://pages.platform.development.keep.com/docs/monitoring/prometheus/prom/grafana-intro.html 以上步骤就绪后，通过浏览器访问看看 Prometheus首页 Alerts页面 显示了一条报警规则，说明此前的prometheus rules配置正常。 Targets页面 Alertmanager metrics prometheus的metrics mysql的metrics 功能测试 在Grafana中，导入Prometheus 2.0 Status仪表板，显示如下： 导入Mysql-Overview模板的显示效果： 报警测试： # 先运行一个webhook，前提已安装golang go get github.com/prometheus/alertmanager/examples/webhook webhook # 另开一个窗口，人为拉高CPU使用率，观察webhook打印的日志 cat /dev/zero >/dev/null # 测试完之后，[ctrl]+[c]终止 alertmanager webhook在控制台输出的日志： [root@VM_0_2_centos alertmanager]# webhook 2019/03/15 10:49:32 { > \"receiver\": \"web\\\\.hook\", > \"status\": \"firing\", > \"alerts\": [ > { > \"status\": \"firing\", > \"labels\": { > \"alertname\": \"hostCpuUsageAlert\", > \"instance\": \"cvm001\", > \"monitor\": \"codelab_monitor\", > \"severity\": \"page\" > }, > \"annotations\": { > \"description\": \"cvm001 CPU usage above 20% (current value: 99.80000000001382)\", > \"summary\": \"Instance cvm001 CPU usgae high\" > }, > \"startsAt\": \"2019-03-15T02:49:22.839636267Z\", > \"endsAt\": \"0001-01-01T00:00:00Z\", > \"generatorURL\": \"http://VM_0_2_centos:9090/graph?g0.expr=sum+by%28instance%29+%28avg+without%28cpu%29+%28irate%28node_cpu_seconds_total%7Bmode%21%3D%22idle%22%7D%5B5m%5D%29%29%29+%2A+100+%3E+20\\u0026g0.tab=1\" > } > ], > \"groupLabels\": { > \"alertname\": \"hostCpuUsageAlert\" > }, > \"commonLabels\": { > \"alertname\": \"hostCpuUsageAlert\", > \"instance\": \"cvm001\", > \"monitor\": \"codelab_monitor\", > \"severity\": \"page\" > }, > \"commonAnnotations\": { > \"description\": \"cvm001 CPU usage above 20% (current value: 99.80000000001382)\", > \"summary\": \"Instance cvm001 CPU usgae high\" > }, > \"externalURL\": \"http://VM_0_2_centos:9093\", > \"version\": \"4\", > \"groupKey\": \"{}:{alertname=\\\"hostCpuUsageAlert\\\"}\" >} 2019/03/15 10:52:52 { > \"receiver\": \"web\\\\.hook\", > \"status\": \"resolved\", > \"alerts\": [ > { > \"status\": \"resolved\", > \"labels\": { > \"alertname\": \"hostCpuUsageAlert\", > \"instance\": \"cvm001\", > \"monitor\": \"codelab_monitor\", > \"severity\": \"page\" > }, > \"annotations\": { > \"description\": \"cvm001 CPU usage above 20% (current value: 99.79999999999563)\", > \"summary\": \"Instance cvm001 CPU usgae high\" > }, > \"startsAt\": \"2019-03-15T02:49:22.839636267Z\", > \"endsAt\": \"2019-03-15T02:52:52.839636267Z\", > \"generatorURL\": \"http://VM_0_2_centos:9090/graph?g0.expr=sum+by%28instance%29+%28avg+without%28cpu%29+%28irate%28node_cpu_seconds_total%7Bmode%21%3D%22idle%22%7D%5B5m%5D%29%29%29+%2A+100+%3E+20\\u0026g0.tab=1\" > } > ], > \"groupLabels\": { > \"alertname\": \"hostCpuUsageAlert\" > }, > \"commonLabels\": { > \"alertname\": \"hostCpuUsageAlert\", > \"instance\": \"cvm001\", > \"monitor\": \"codelab_monitor\", > \"severity\": \"page\" > }, > \"commonAnnotations\": { > \"description\": \"cvm001 CPU usage above 20% (current value: 99.79999999999563)\", > \"summary\": \"Instance cvm001 CPU usgae high\" > }, > \"externalURL\": \"http://VM_0_2_centos:9093\", > \"version\": \"4\", > \"groupKey\": \"{}:{alertname=\\\"hostCpuUsageAlert\\\"}\" >} 当CPU使用率高于20%时，Prometheus Alerts页面的报警状态先后变化顺序：in active -> pending -> firing；恢复后，日志显示resolved。 在报警项resolved之前，Alertmanager页面： 通过测试可以看出，webhook方式发出通知是正常的。未测试email和企业微信。 (End) Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/prom/alertmanager.html":{"url":"docs/monitoring/prometheus/prom/alertmanager.html","title":"告警组件——alertmanager","keywords":"","body":"Alertmanager Alertmanager作为一个独立的组件，负责接收并处理来自Prometheus Server(也可以是其它的客户端程序)的告警信息。Alertmanager可以对这些告警信息进行进一步的处理，比如当接收到大量重复告警时能够消除重复的告警信息，同时对告警信息进行分组并且路由到正确的通知方，Prometheus内置了对邮件，Slack等多种通知方式的支持，同时还支持与Webhook的集成，以支持更多定制化的场景。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/prom/prometheus_federate.html":{"url":"docs/monitoring/prometheus/prom/prometheus_federate.html","title":"联邦","keywords":"","body":"Prometheus federate 示例配置： global: scrape_interval: 15s scrape_timeout: 10s evaluation_interval: 1m alerting: alertmanagers: - static_configs: - targets: - x.xx.xxx.xxx:9093 scheme: http timeout: 10s rule_files: - /etc/prometheus/rules/*.yml scrape_configs: - job_name: federate honor_labels: true params: match[]: - '{job=~\"\\\\w.*\"}' #- '{job=~\"[a-zA-Z_].*\"}' metrics_path: /federate scheme: http static_configs: - targets: - x.xx.xxx.xxx:9090 - job_name: federate2 honor_labels: true params: match[]: - '{job=~\"\\\\w.*\"}' scrape_interval: 30s scrape_timeout: 30s metrics_path: /federate scheme: http static_configs: - targets: - x.xx.xxx.xxx:xxxx - job_name: federate_pmm_server scrape_interval: 30s scrape_timeout: 30s honor_labels: true metrics_path: /prometheus/federate basic_auth: username: \"xxx\" password: \"xxx\" params: match[]: - '{job=~\"\\\\w.*\"}' static_configs: - targets: - x.xx.xxx.xxx:xxxx Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/prom/prometheus-discovery.html":{"url":"docs/monitoring/prometheus/prom/prometheus-discovery.html","title":"自动发现","keywords":"","body":"Prometheus自动发现配置 Prometheus支持基于Consul自动发现 prometheus.yml: global: scrape_interval: 1s scrape_timeout: 1s evaluation_interval: 5s alerting: alertmanagers: - static_configs: - targets: ['10.1.7.211:9093'] rule_files: - 'rules/*.yml' scrape_configs: - job_name: prometheus metrics_path: /metrics static_configs: - targets: ['localhost:9090'] labels: instance: prometheus - job_name: consul_sd consul_sd_configs: - server: '192.168.100.140:8500' datacenter: dc01 services: [] relabel_configs: - source_labels: [__meta_consul_tags] regex: '.*,prometheus-target,.*' action: keep - source_labels: [__meta_consul_service] target_label: sn - job_name: consul_sd_dev consul_sd_configs: - server: '10.1.7.211:8500' datacenter: dc1 services: [] relabel_configs: - source_labels: [__meta_consul_tags] regex: '.*prometheus-target.*' action: keep - source_labels: ['__address__'] # regex: '.*:(.*)' regex: '127.0.0.1:(.*)' target_label: '__address__' replacement: '10.1.7.211:$1' Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/grafana/":{"url":"docs/monitoring/grafana/","title":"Grafana","keywords":"","body":"Grafana的安装与使用 系统：CentOS 7.5 软件版本：通过docker安装最新版本 简介 官网：https://grafana.com/grafana Grafana是一个跨平台、开源的指标度量分析和可视化工具，提供了强大和优雅的方式去创建、共享、浏览数据。Grafana非常适于和时间序列数据库结合展示数据，如Graphite, InfluxDB, OpenTSDB, Prometheus。 快速安装 # 拉取镜像 docker pull grafana/grafana # 运行grafana（admin登录密码为admin） docker run -d -i -p 3000:3000 \\ -e \"GF_SERVER_ROOT_URL=http://grafana.server.name\" \\ -e \"GF_SECURITY_ADMIN_PASSWORD=admin\" \\ --net=host \\ grafana/grafana 在192.168.100.150上执行，通过浏览器访问：http://192.168.100.150:3000，以admin/admin登录 可以看到只有Install Grafana是已完成状态，待添加数据源、创建仪表盘、添加用户、安装插件等。 官网安装指导：http://docs.grafana.org/installation/docker/> 创建一个Dashboard 先不管Add data source这一步，直接来尝试创建一个Dashboard。 修改数据源 default是grafana提供的默认数据源，作演示用没有实际意义。A系列是随机产生的数据。 修改图表样式 可以在此页签内设置图表类型、线型、阴影、显示的系列等。 修改通用设置 图表标题、描述信息等。 保存bashboard 调整图表宽高，保存自定义的dashboard。 对接Zabbix Grafana没有预装zabbix数据源插件。安装过程如下： 点击Install app & plugins 会跳转到https://grafana.com/plugins，选择zabbix。 由于是通过容器运行grafana的，需进入容器执行插件安装。 # 列出容器 docker ps -a # 进入grafana的容器 docker exec -it bash ## grafana容器内 # 安装grafana的zabbix插件 grafana-cli plugins install alexanderzobnin-zabbix-app exit # 重启容器，然后刷新浏览器页面 docker restart 重启容器后刷新浏览器，可以看到zabbix插件已安装，并启用之。 添加zabbix数据源 要从zabbix平台http://192.168.100.220/zabbix获取数据，URL填http://192.168.100.220/zabbix/api_jsonrpc.php。 保存后，切换到Dashboards页签，导入相关的zabbix插件提供的dashboard。 回到Home，查看已有的dashboard。 查看zabbix监控数据在grafana上的展示效果。 (End) Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/grafana/grafana-tmpl_k8s.html":{"url":"docs/monitoring/grafana/grafana-tmpl_k8s.html","title":"K8s","keywords":"","body":"Grafana模板 - Kubernetes cluster { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": \"-- Grafana --\", \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"type\": \"dashboard\" } ] }, \"description\": \"Monitors Kubernetes cluster using Prometheus. Shows overall cluster CPU / Memory / Filesystem usage as well as individual pod, containers, systemd services statistics. Uses cAdvisor metrics only.\", \"editable\": true, \"gnetId\": 315, \"graphTooltip\": 0, \"id\": 4, \"iteration\": 1589530081741, \"links\": [], \"panels\": [ { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 0 }, \"id\": 33, \"panels\": [], \"title\": \"Network I/O pressure\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 5, \"w\": 24, \"x\": 0, \"y\": 1 }, \"height\": \"200px\", \"id\": 32, \"isNew\": true, \"legend\": { \"alignAsTable\": false, \"avg\": true, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": false, \"sideWidth\": 200, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"sum (rate (container_network_receive_bytes_total{kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m]))\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"Received\", \"metric\": \"network\", \"refId\": \"A\", \"step\": 10 }, { \"expr\": \"- sum (rate (container_network_transmit_bytes_total{kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m]))\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"Sent\", \"metric\": \"network\", \"refId\": \"B\", \"step\": 10 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Network I/O pressure\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"Bps\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"Bps\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 6 }, \"id\": 34, \"panels\": [], \"title\": \"Total usage\", \"type\": \"row\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": true, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-K8s-Production\", \"editable\": true, \"error\": false, \"format\": \"percent\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": true, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 5, \"w\": 8, \"x\": 0, \"y\": 7 }, \"height\": \"180px\", \"id\": 4, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum (container_memory_working_set_bytes{id=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}) / sum (machine_memory_bytes{kubernetes_io_hostname=~\\\"^$Node$\\\"}) * 100\", \"interval\": \"10s\", \"intervalFactor\": 1, \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": \"65, 90\", \"title\": \"Cluster memory usage\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": true, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"format\": \"percent\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": true, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 5, \"w\": 8, \"x\": 8, \"y\": 7 }, \"height\": \"180px\", \"id\": 6, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum (rate (container_cpu_usage_seconds_total{id=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) / sum (machine_cpu_cores{kubernetes_io_hostname=~\\\"^$Node$\\\"}) * 100\", \"interval\": \"10s\", \"intervalFactor\": 1, \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": \"65, 90\", \"title\": \"Cluster CPU usage (1m avg)\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": true, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"format\": \"percent\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": true, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 5, \"w\": 8, \"x\": 16, \"y\": 7 }, \"height\": \"180px\", \"id\": 7, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum (container_fs_usage_bytes{device=~\\\"^/dev/[sv]d[a-z][1-9]$\\\",id=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}) / sum (container_fs_limit_bytes{device=~\\\"^/dev/[sv]d[a-z][1-9]$\\\",id=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}) * 100\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": \"65, 90\", \"title\": \"Cluster filesystem usage\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"format\": \"bytes\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 4, \"x\": 0, \"y\": 12 }, \"height\": \"1px\", \"id\": 9, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"20%\", \"prefix\": \"\", \"prefixFontSize\": \"20%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum (container_memory_working_set_bytes{id=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"})\", \"interval\": \"10s\", \"intervalFactor\": 1, \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": \"\", \"title\": \"Used\", \"type\": \"singlestat\", \"valueFontSize\": \"50%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"format\": \"bytes\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 4, \"x\": 4, \"y\": 12 }, \"height\": \"1px\", \"id\": 10, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum (machine_memory_bytes{kubernetes_io_hostname=~\\\"^$Node$\\\"})\", \"interval\": \"10s\", \"intervalFactor\": 1, \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": \"\", \"title\": \"Total\", \"type\": \"singlestat\", \"valueFontSize\": \"50%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 4, \"x\": 8, \"y\": 12 }, \"height\": \"1px\", \"id\": 11, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \" cores\", \"postfixFontSize\": \"30%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum (rate (container_cpu_usage_seconds_total{id=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m]))\", \"interval\": \"10s\", \"intervalFactor\": 1, \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": \"\", \"title\": \"Used\", \"type\": \"singlestat\", \"valueFontSize\": \"50%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 4, \"x\": 12, \"y\": 12 }, \"height\": \"1px\", \"id\": 12, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \" cores\", \"postfixFontSize\": \"30%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum (machine_cpu_cores{kubernetes_io_hostname=~\\\"^$Node$\\\"})\", \"interval\": \"10s\", \"intervalFactor\": 1, \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": \"\", \"title\": \"Total\", \"type\": \"singlestat\", \"valueFontSize\": \"50%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"format\": \"bytes\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 4, \"x\": 16, \"y\": 12 }, \"height\": \"1px\", \"id\": 13, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum (container_fs_usage_bytes{device=~\\\"^/dev/[sv]d[a-z][1-9]$\\\",id=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"})\", \"interval\": \"10s\", \"intervalFactor\": 1, \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": \"\", \"title\": \"Used\", \"type\": \"singlestat\", \"valueFontSize\": \"50%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"format\": \"bytes\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 4, \"x\": 20, \"y\": 12 }, \"height\": \"1px\", \"id\": 14, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum (container_fs_limit_bytes{device=~\\\"^/dev/[sv]d[a-z][1-9]$\\\",id=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"})\", \"interval\": \"10s\", \"intervalFactor\": 1, \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": \"\", \"title\": \"Total\", \"type\": \"singlestat\", \"valueFontSize\": \"50%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 15 }, \"id\": 35, \"panels\": [], \"title\": \"Pods CPU usage\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 3, \"editable\": true, \"error\": false, \"fill\": 0, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 16 }, \"height\": \"\", \"id\": 17, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": true, \"targets\": [ { \"expr\": \"sum (rate (container_cpu_usage_seconds_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (pod_name)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"{{ pod_name }}\", \"metric\": \"container_cpu\", \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Pods CPU usage (1m avg)\", \"tooltip\": { \"msResolution\": true, \"shared\": true, \"sort\": 2, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"none\", \"label\": \"cores\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": true, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 23 }, \"id\": 36, \"panels\": [ { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 3, \"editable\": true, \"error\": false, \"fill\": 0, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 23 }, \"height\": \"\", \"id\": 23, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": false, \"steppedLine\": true, \"targets\": [ { \"expr\": \"sum (rate (container_cpu_usage_seconds_total{systemd_service_name!=\\\"\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (systemd_service_name)\", \"hide\": false, \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"{{ systemd_service_name }}\", \"metric\": \"container_cpu\", \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"System services CPU usage (1m avg)\", \"tooltip\": { \"msResolution\": true, \"shared\": true, \"sort\": 2, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"none\", \"label\": \"cores\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false } ] } ], \"title\": \"System services CPU usage\", \"type\": \"row\" }, { \"collapsed\": true, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 24 }, \"id\": 37, \"panels\": [ { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 3, \"editable\": true, \"error\": false, \"fill\": 0, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 24 }, \"height\": \"\", \"id\": 24, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"hideEmpty\": false, \"hideZero\": false, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"sideWidth\": null, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": false, \"steppedLine\": true, \"targets\": [ { \"expr\": \"sum (rate (container_cpu_usage_seconds_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",container_name!=\\\"POD\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (container_name, pod_name)\", \"hide\": false, \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"pod: {{ pod_name }} | {{ container_name }}\", \"metric\": \"container_cpu\", \"refId\": \"A\", \"step\": 10 }, { \"expr\": \"sum (rate (container_cpu_usage_seconds_total{image!=\\\"\\\",name!~\\\"^k8s_.*\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (kubernetes_io_hostname, name, image)\", \"hide\": false, \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"docker: {{ kubernetes_io_hostname }} | {{ image }} ({{ name }})\", \"metric\": \"container_cpu\", \"refId\": \"B\", \"step\": 10 }, { \"expr\": \"sum (rate (container_cpu_usage_seconds_total{rkt_container_name!=\\\"\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (kubernetes_io_hostname, rkt_container_name)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"rkt: {{ kubernetes_io_hostname }} | {{ rkt_container_name }}\", \"metric\": \"container_cpu\", \"refId\": \"C\", \"step\": 10 } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"Containers CPU usage (1m avg)\", \"tooltip\": { \"msResolution\": true, \"shared\": true, \"sort\": 2, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"none\", \"label\": \"cores\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false } ] } ], \"title\": \"Containers CPU usage\", \"type\": \"row\" }, { \"collapsed\": true, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 25 }, \"id\": 38, \"panels\": [ { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 3, \"editable\": true, \"error\": false, \"fill\": 0, \"grid\": {}, \"gridPos\": { \"h\": 13, \"w\": 24, \"x\": 0, \"y\": 25 }, \"id\": 20, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": true, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": false, \"steppedLine\": true, \"targets\": [ { \"expr\": \"sum (rate (container_cpu_usage_seconds_total{id!=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (id)\", \"hide\": false, \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"{{ id }}\", \"metric\": \"container_cpu\", \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"All processes CPU usage (1m avg)\", \"tooltip\": { \"msResolution\": true, \"shared\": true, \"sort\": 2, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"none\", \"label\": \"cores\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false } ] } ], \"repeat\": null, \"title\": \"All processes CPU usage\", \"type\": \"row\" }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 26 }, \"id\": 39, \"panels\": [], \"title\": \"Pods memory usage\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 0, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 27 }, \"id\": 25, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"sideWidth\": 200, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": true, \"targets\": [ { \"expr\": \"sum (container_memory_working_set_bytes{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}) by (pod_name)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"{{ pod_name }}\", \"metric\": \"container_memory_usage:sort_desc\", \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Pods memory usage\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 2, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": true, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 34 }, \"id\": 40, \"panels\": [ { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 0, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 34 }, \"id\": 26, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"sideWidth\": 200, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": false, \"steppedLine\": true, \"targets\": [ { \"expr\": \"sum (container_memory_working_set_bytes{systemd_service_name!=\\\"\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}) by (systemd_service_name)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"{{ systemd_service_name }}\", \"metric\": \"container_memory_usage:sort_desc\", \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"System services memory usage\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 2, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"bytes\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false } ] } ], \"title\": \"System services memory usage\", \"type\": \"row\" }, { \"collapsed\": true, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 35 }, \"id\": 41, \"panels\": [ { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 0, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 35 }, \"id\": 27, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"sideWidth\": 200, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": false, \"steppedLine\": true, \"targets\": [ { \"expr\": \"sum (container_memory_working_set_bytes{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",container_name!=\\\"POD\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}) by (container_name, pod_name)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"pod: {{ pod_name }} | {{ container_name }}\", \"metric\": \"container_memory_usage:sort_desc\", \"refId\": \"A\", \"step\": 10 }, { \"expr\": \"sum (container_memory_working_set_bytes{image!=\\\"\\\",name!~\\\"^k8s_.*\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}) by (kubernetes_io_hostname, name, image)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"docker: {{ kubernetes_io_hostname }} | {{ image }} ({{ name }})\", \"metric\": \"container_memory_usage:sort_desc\", \"refId\": \"B\", \"step\": 10 }, { \"expr\": \"sum (container_memory_working_set_bytes{rkt_container_name!=\\\"\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}) by (kubernetes_io_hostname, rkt_container_name)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"rkt: {{ kubernetes_io_hostname }} | {{ rkt_container_name }}\", \"metric\": \"container_memory_usage:sort_desc\", \"refId\": \"C\", \"step\": 10 } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"Containers memory usage\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 2, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"bytes\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false } ] } ], \"title\": \"Containers memory usage\", \"type\": \"row\" }, { \"collapsed\": true, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 36 }, \"id\": 42, \"panels\": [ { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 0, \"grid\": {}, \"gridPos\": { \"h\": 13, \"w\": 24, \"x\": 0, \"y\": 36 }, \"id\": 28, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": true, \"sideWidth\": 200, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": false, \"steppedLine\": true, \"targets\": [ { \"expr\": \"sum (container_memory_working_set_bytes{id!=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}) by (id)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"{{ id }}\", \"metric\": \"container_memory_usage:sort_desc\", \"refId\": \"A\", \"step\": 10 } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"All processes memory usage\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 2, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"bytes\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false } ] } ], \"title\": \"All processes memory usage\", \"type\": \"row\" }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 37 }, \"id\": 43, \"panels\": [], \"title\": \"Pods network I/O\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-K8s-Production\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 38 }, \"id\": 16, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"sideWidth\": 200, \"sort\": \"current\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"sum (rate (container_network_receive_bytes_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (pod_name)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \"-> {{ pod_name }}\", \"metric\": \"network\", \"refId\": \"A\", \"step\": 10 }, { \"expr\": \"- sum (rate (container_network_transmit_bytes_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (pod_name)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \" pod: {{ pod_name }} | {{ container_name }}\", \"metric\": \"network\", \"refId\": \"B\", \"step\": 10 }, { \"expr\": \"- sum (rate (container_network_transmit_bytes_total{image!=\\\"\\\",name=~\\\"^k8s_.*\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (container_name, pod_name)\", \"hide\": false, \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \" docker: {{ kubernetes_io_hostname }} | {{ image }} ({{ name }})\", \"metric\": \"network\", \"refId\": \"A\", \"step\": 10 }, { \"expr\": \"- sum (rate (container_network_transmit_bytes_total{image!=\\\"\\\",name!~\\\"^k8s_.*\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (kubernetes_io_hostname, name, image)\", \"hide\": false, \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \" rkt: {{ kubernetes_io_hostname }} | {{ rkt_container_name }}\", \"metric\": \"network\", \"refId\": \"E\", \"step\": 10 }, { \"expr\": \"- sum (rate (container_network_transmit_bytes_total{rkt_container_name!=\\\"\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (kubernetes_io_hostname, rkt_container_name)\", \"hide\": false, \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \" {{ id }}\", \"metric\": \"network\", \"refId\": \"A\", \"step\": 10 }, { \"expr\": \"- sum (rate (container_network_transmit_bytes_total{id!=\\\"/\\\",kubernetes_io_hostname=~\\\"^$Node$\\\"}[1m])) by (id)\", \"interval\": \"10s\", \"intervalFactor\": 1, \"legendFormat\": \" Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/grafana/grafana-tmpl_log.html":{"url":"docs/monitoring/grafana/grafana-tmpl_log.html","title":"ELK","keywords":"","body":"Grafana模板 - 日志统计 { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": \"-- Grafana --\", \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"type\": \"dashboard\" } ] }, \"editable\": true, \"gnetId\": null, \"graphTooltip\": 0, \"id\": 29, \"links\": [], \"panels\": [ { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Elasticsearch_beats-5170\", \"description\": \"\", \"fill\": 1, \"gridPos\": { \"h\": 6, \"w\": 13, \"x\": 0, \"y\": 0 }, \"id\": 8, \"interval\": \"\", \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"total\": true, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 2, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"bucketAggs\": [ { \"field\": \"@timestamp\", \"id\": \"2\", \"settings\": { \"interval\": \"auto\", \"min_doc_count\": 0, \"trimEdges\": 0 }, \"type\": \"date_histogram\" } ], \"metrics\": [ { \"field\": \"select field\", \"id\": \"1\", \"type\": \"count\" } ], \"query\": \"winlog.channel: \\\"Security\\\"\", \"refId\": \"A\", \"timeField\": \"@timestamp\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Security日志数\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": true, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Elasticsearch_beats-5170\", \"description\": \"\", \"fill\": 1, \"gridPos\": { \"h\": 6, \"w\": 11, \"x\": 13, \"y\": 0 }, \"id\": 3, \"interval\": \"\", \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": true, \"hideEmpty\": false, \"hideZero\": false, \"max\": true, \"min\": false, \"rightSide\": false, \"show\": true, \"total\": true, \"values\": true }, \"lines\": false, \"linewidth\": 1, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 2, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"bucketAggs\": [ { \"field\": \"@timestamp\", \"id\": \"2\", \"settings\": { \"interval\": \"auto\", \"min_doc_count\": 0, \"trimEdges\": 0 }, \"type\": \"date_histogram\" } ], \"metrics\": [ { \"field\": \"select field\", \"id\": \"1\", \"type\": \"count\" } ], \"query\": \"winlog.keywords: \\\"审核失败\\\" AND winlog.channel: \\\"Security \\\"\", \"refId\": \"A\", \"timeField\": \"@timestamp\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"审核失败记录数\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"cacheTimeout\": null, \"columns\": [], \"datasource\": \"Elasticsearch_beats-5170\", \"description\": \"\", \"fontSize\": \"100%\", \"gridPos\": { \"h\": 6, \"w\": 12, \"x\": 0, \"y\": 6 }, \"id\": 4, \"links\": [], \"options\": {}, \"pageSize\": null, \"pluginVersion\": \"6.2.0\", \"scroll\": true, \"showHeader\": true, \"sort\": { \"col\": null, \"desc\": false }, \"styles\": [ { \"alias\": \"Time\", \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\", \"link\": false, \"pattern\": \"Time\", \"type\": \"date\" }, { \"alias\": \"\", \"colorMode\": null, \"colors\": [ \"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\" ], \"decimals\": 0, \"pattern\": \"/.*/\", \"thresholds\": [], \"type\": \"number\", \"unit\": \"none\" } ], \"targets\": [ { \"bucketAggs\": [ { \"field\": \"source.ip.keyword\", \"id\": \"2\", \"settings\": { \"min_doc_count\": 1, \"order\": \"desc\", \"orderBy\": \"_count\", \"size\": \"10\" }, \"type\": \"terms\" } ], \"metrics\": [ { \"field\": \"select field\", \"id\": \"1\", \"type\": \"count\" } ], \"query\": \"winlog.keywords: \\\"审核失败\\\" AND winlog.channel: \\\"Security \\\"\", \"refId\": \"A\", \"timeField\": \"@timestamp\" } ], \"timeFrom\": null, \"timeShift\": null, \"title\": \"审核失败IP统计\", \"transform\": \"table\", \"type\": \"table\" }, { \"aliasColors\": {}, \"breakPoint\": \"25%\", \"cacheTimeout\": null, \"combine\": { \"label\": \"Others\", \"threshold\": \"0\" }, \"datasource\": \"Elasticsearch_beats-5170\", \"decimals\": 0, \"description\": \"\", \"fontSize\": \"80%\", \"format\": \"none\", \"gridPos\": { \"h\": 6, \"w\": 12, \"x\": 12, \"y\": 6 }, \"id\": 6, \"interval\": null, \"legend\": { \"header\": \"\", \"percentage\": true, \"percentageDecimals\": 1, \"show\": true, \"sideWidth\": null, \"values\": true }, \"legendType\": \"Right side\", \"links\": [], \"maxDataPoints\": 3, \"nullPointMode\": \"connected\", \"options\": {}, \"pieType\": \"donut\", \"pluginVersion\": \"6.2.0\", \"strokeWidth\": \"1\", \"targets\": [ { \"bucketAggs\": [ { \"fake\": true, \"field\": \"source.ip.keyword\", \"id\": \"3\", \"settings\": { \"min_doc_count\": 1, \"order\": \"desc\", \"orderBy\": \"_count\", \"size\": \"10\" }, \"type\": \"terms\" }, { \"field\": \"@timestamp\", \"id\": \"2\", \"settings\": { \"interval\": \"auto\", \"min_doc_count\": 0, \"trimEdges\": 0 }, \"type\": \"date_histogram\" } ], \"metrics\": [ { \"field\": \"select metric\", \"id\": \"1\", \"meta\": {}, \"pipelineAgg\": \"select metric\", \"pipelineVariables\": [ { \"name\": \"var1\", \"pipelineAgg\": \"select metric\" } ], \"settings\": {}, \"type\": \"count\" } ], \"query\": \"winlog.keywords: \\\"审核失败\\\" AND winlog.channel: \\\"Security \\\"\", \"refId\": \"A\", \"timeField\": \"@timestamp\" } ], \"timeFrom\": null, \"timeShift\": null, \"title\": \"审核失败IP占比\", \"type\": \"grafana-piechart-panel\", \"valueName\": \"total\" }, { \"cacheTimeout\": null, \"columns\": [], \"datasource\": \"Elasticsearch_beats-5170\", \"description\": \"\", \"fontSize\": \"100%\", \"gridPos\": { \"h\": 6, \"w\": 11, \"x\": 0, \"y\": 12 }, \"id\": 5, \"links\": [], \"options\": {}, \"pageSize\": null, \"pluginVersion\": \"6.2.0\", \"scroll\": true, \"showHeader\": true, \"sort\": { \"col\": null, \"desc\": false }, \"styles\": [ { \"alias\": \"Time\", \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\", \"link\": false, \"pattern\": \"Time\", \"type\": \"date\" }, { \"alias\": \"\", \"colorMode\": null, \"colors\": [ \"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\" ], \"decimals\": 0, \"pattern\": \"/.*/\", \"thresholds\": [], \"type\": \"number\", \"unit\": \"none\" } ], \"targets\": [ { \"bucketAggs\": [ { \"field\": \"winlog.logon.failure.reason.keyword\", \"id\": \"2\", \"settings\": { \"min_doc_count\": 1, \"order\": \"desc\", \"orderBy\": \"_count\", \"size\": \"10\" }, \"type\": \"terms\" } ], \"metrics\": [ { \"field\": \"select field\", \"id\": \"1\", \"type\": \"count\" } ], \"query\": \"winlog.keywords: \\\"审核失败\\\" AND winlog.channel: \\\"Security \\\"\", \"refId\": \"A\", \"timeField\": \"@timestamp\" } ], \"timeFrom\": null, \"timeShift\": null, \"title\": \"审核失败原因统计\", \"transform\": \"table\", \"type\": \"table\" }, { \"aliasColors\": {}, \"breakPoint\": \"25%\", \"cacheTimeout\": null, \"combine\": { \"label\": \"Others\", \"threshold\": \"0\" }, \"datasource\": \"Elasticsearch_beats-5170\", \"decimals\": 0, \"description\": \"\", \"fontSize\": \"80%\", \"format\": \"none\", \"gridPos\": { \"h\": 6, \"w\": 13, \"x\": 11, \"y\": 12 }, \"id\": 9, \"interval\": null, \"legend\": { \"header\": \"\", \"percentage\": true, \"percentageDecimals\": 1, \"show\": true, \"sideWidth\": null, \"values\": true }, \"legendType\": \"Right side\", \"links\": [], \"maxDataPoints\": 3, \"nullPointMode\": \"connected\", \"options\": {}, \"pieType\": \"donut\", \"pluginVersion\": \"6.2.0\", \"strokeWidth\": \"1\", \"targets\": [ { \"bucketAggs\": [ { \"fake\": true, \"field\": \"winlog.logon.failure.reason.keyword\", \"id\": \"3\", \"settings\": { \"min_doc_count\": 1, \"order\": \"desc\", \"orderBy\": \"_count\", \"size\": \"10\" }, \"type\": \"terms\" }, { \"field\": \"@timestamp\", \"id\": \"2\", \"settings\": { \"interval\": \"auto\", \"min_doc_count\": 0, \"trimEdges\": 0 }, \"type\": \"date_histogram\" } ], \"metrics\": [ { \"field\": \"select metric\", \"id\": \"1\", \"meta\": {}, \"pipelineAgg\": \"select metric\", \"pipelineVariables\": [ { \"name\": \"var1\", \"pipelineAgg\": \"select metric\" } ], \"settings\": {}, \"type\": \"count\" } ], \"query\": \"winlog.keywords: \\\"审核失败\\\" AND winlog.channel: \\\"Security \\\"\", \"refId\": \"A\", \"timeField\": \"@timestamp\" } ], \"timeFrom\": null, \"timeShift\": null, \"title\": \"审核失败原因占比\", \"type\": \"grafana-piechart-panel\", \"valueName\": \"total\" }, { \"cacheTimeout\": null, \"columns\": [], \"datasource\": \"Elasticsearch_beats-5170\", \"description\": \"\", \"fontSize\": \"100%\", \"gridPos\": { \"h\": 19, \"w\": 14, \"x\": 0, \"y\": 18 }, \"id\": 7, \"links\": [], \"options\": {}, \"pageSize\": null, \"pluginVersion\": \"6.2.0\", \"scroll\": true, \"showHeader\": true, \"sort\": { \"col\": null, \"desc\": false }, \"styles\": [ { \"alias\": \"Time\", \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\", \"link\": false, \"pattern\": \"Time\", \"type\": \"date\" }, { \"alias\": \"\", \"colorMode\": null, \"colors\": [ \"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\" ], \"decimals\": 0, \"pattern\": \"/.*/\", \"thresholds\": [], \"type\": \"number\", \"unit\": \"none\" } ], \"targets\": [ { \"bucketAggs\": [ { \"fake\": true, \"field\": \"winlog.logon.failure.reason.keyword\", \"id\": \"3\", \"settings\": { \"min_doc_count\": 1, \"order\": \"desc\", \"orderBy\": \"_count\", \"size\": \"10\" }, \"type\": \"terms\" }, { \"field\": \"source.ip.keyword\", \"id\": \"2\", \"settings\": { \"min_doc_count\": 1, \"order\": \"desc\", \"orderBy\": \"_count\", \"size\": \"10\" }, \"type\": \"terms\" } ], \"metrics\": [ { \"field\": \"select field\", \"id\": \"1\", \"type\": \"count\" } ], \"query\": \"winlog.keywords: \\\"审核失败\\\" AND winlog.channel: \\\"Security \\\"\", \"refId\": \"A\", \"timeField\": \"@timestamp\" } ], \"timeFrom\": null, \"timeShift\": null, \"title\": \"审核失败原因及IP\", \"transform\": \"table\", \"type\": \"table\" } ], \"refresh\": false, \"schemaVersion\": 18, \"style\": \"dark\", \"tags\": [ \"ELK\", \"Windows\" ], \"templating\": { \"list\": [] }, \"time\": { \"from\": \"2020-05-15T00:19:36.111Z\", \"to\": \"2020-05-15T01:39:44.459Z\" }, \"timepicker\": { \"refresh_intervals\": [ \"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\" ], \"time_options\": [ \"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\" ] }, \"timezone\": \"\", \"title\": \"ELK | 系统Security日志_审核失败统计\" } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/grafana/grafana-tmpl_mysql-repl.html":{"url":"docs/monitoring/grafana/grafana-tmpl_mysql-repl.html","title":"MySQL-Replication","keywords":"","body":"Grafana模板 - MySQL Replication { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": \"-- Grafana --\", \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"type\": \"dashboard\" } ] }, \"editable\": true, \"gnetId\": null, \"graphTooltip\": 1, \"id\": 40, \"iteration\": 1589527867775, \"links\": [ { \"asDropdown\": true, \"icon\": \"external link\", \"includeVars\": true, \"keepTime\": true, \"tags\": [ \"OS\" ], \"targetBlank\": true, \"title\": \"OS\", \"type\": \"dashboards\" }, { \"asDropdown\": true, \"icon\": \"external link\", \"includeVars\": true, \"keepTime\": true, \"tags\": [ \"MySQL\" ], \"targetBlank\": true, \"title\": \"MySQL\", \"type\": \"dashboards\" }, { \"asDropdown\": true, \"icon\": \"external link\", \"includeVars\": true, \"keepTime\": true, \"tags\": [ \"HA\" ], \"targetBlank\": true, \"title\": \"HA\", \"type\": \"dashboards\" } ], \"panels\": [ { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"rgba(161, 18, 18, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(36, 112, 33, 0.97)\" ], \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"short\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 0, \"y\": 0 }, \"height\": \"125px\", \"id\": 26, \"interval\": \"$interval\", \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"80%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"calculatedInterval\": \"10m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_slave_status_slave_io_running{instance=\\\"$host\\\"}\", \"interval\": \"5m\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": \"0.5,1\", \"title\": \"IO Thread Running\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"Yes\", \"value\": \"1\" }, { \"op\": \"=\", \"text\": \"No\", \"value\": \"0\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"rgba(161, 18, 18, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(36, 112, 33, 0.97)\" ], \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"short\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 6, \"y\": 0 }, \"height\": \"125px\", \"id\": 17, \"interval\": \"$interval\", \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"80%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"calculatedInterval\": \"10m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_slave_status_slave_sql_running{instance=\\\"$host\\\"}\", \"interval\": \"5m\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": \"0.5,1\", \"title\": \"SQL Thread Running\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"Yes\", \"value\": \"1\" }, { \"op\": \"=\", \"text\": \"No\", \"value\": \"0\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": true, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 12, \"y\": 0 }, \"height\": \"125px\", \"id\": 39, \"interval\": \"$interval\", \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"80%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"calculatedInterval\": \"10m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_slave_status_last_errno{instance=\\\"$host\\\"}\", \"interval\": \"5m\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": \"0.5,1\", \"title\": \"Replication Error No\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"0\" } ], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"short\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 18, \"y\": 0 }, \"height\": \"125px\", \"id\": 27, \"interval\": \"$interval\", \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"80%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"calculatedInterval\": \"10m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_variables_read_only{instance=\\\"$host\\\"}\", \"interval\": \"5m\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": \"0.5,1\", \"title\": \"Read Only\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"Yes\", \"value\": \"1\" }, { \"op\": \"=\", \"text\": \"No\", \"value\": \"0\" } ], \"valueName\": \"current\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 4 }, \"id\": 16, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Lag\", \"color\": \"#E24D42\" } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_slave_status_seconds_behind_master{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Lag\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Replication Delay\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": null, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 11 }, \"id\": 33, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Size\", \"color\": \"#1F78C1\" } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_binlog_size_bytes{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Size\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Binlogs Size\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": true, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 11 }, \"id\": 35, \"legend\": { \"alignAsTable\": false, \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": false, \"total\": false, \"values\": false }, \"lines\": false, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Size\", \"color\": \"#1F78C1\" } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"increase(mysql_binlog_size_bytes{instance=\\\"$host\\\"}[1h])\", \"interval\": \"1h\", \"intervalFactor\": 1, \"legendFormat\": \"Size\", \"metric\": \"\", \"refId\": \"A\", \"step\": 3600 } ], \"thresholds\": [], \"timeFrom\": \"24h\", \"timeRegions\": [], \"timeShift\": null, \"title\": \"Binlog Data Written Hourly\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 18 }, \"id\": 34, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Count\", \"color\": \"#E0752D\" } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_binlog_files{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Count\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Binlogs Count\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"none\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"none\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": true, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 18 }, \"id\": 36, \"legend\": { \"alignAsTable\": false, \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": false, \"total\": false, \"values\": false }, \"lines\": false, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Count\", \"color\": \"#E0752D\" } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"increase(mysql_binlog_file_number{instance=\\\"$host\\\"}[1h])\", \"interval\": \"1h\", \"intervalFactor\": 1, \"legendFormat\": \"Count\", \"metric\": \"\", \"refId\": \"A\", \"step\": 3600 } ], \"thresholds\": [], \"timeFrom\": \"24h\", \"timeRegions\": [], \"timeShift\": null, \"title\": \"Binlogs Created Hourly\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"none\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"none\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": null, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 25 }, \"id\": 37, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Size\", \"color\": \"#BA43A9\" } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_slave_status_relay_log_space{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Size\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Relay Log Space\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": true, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 25 }, \"id\": 38, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": false, \"total\": false, \"values\": true }, \"lines\": false, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Size\", \"color\": \"#BA43A9\" } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"increase(mysql_slave_status_relay_log_space{instance=\\\"$host\\\"}[1h])\", \"interval\": \"1h\", \"intervalFactor\": 1, \"legendFormat\": \"Size\", \"metric\": \"\", \"refId\": \"A\", \"step\": 3600 } ], \"thresholds\": [], \"timeFrom\": \"24h\", \"timeRegions\": [], \"timeShift\": null, \"title\": \"Relay Log Written Hourly\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } } ], \"refresh\": false, \"schemaVersion\": 18, \"style\": \"dark\", \"tags\": [ \"Percona\", \"MySQL\" ], \"templating\": { \"list\": [ { \"allFormat\": \"glob\", \"auto\": true, \"auto_count\": 200, \"auto_min\": \"1s\", \"current\": { \"text\": \"auto\", \"value\": \"$__auto_interval_interval\" }, \"datasource\": \"Prometheus-PMM\", \"hide\": 0, \"includeAll\": false, \"label\": \"Interval\", \"multi\": false, \"multiFormat\": \"glob\", \"name\": \"interval\", \"options\": [ { \"selected\": true, \"text\": \"auto\", \"value\": \"$__auto_interval_interval\" }, { \"selected\": false, \"text\": \"1s\", \"value\": \"1s\" }, { \"selected\": false, \"text\": \"5s\", \"value\": \"5s\" }, { \"selected\": false, \"text\": \"1m\", \"value\": \"1m\" }, { \"selected\": false, \"text\": \"5m\", \"value\": \"5m\" }, { \"selected\": false, \"text\": \"1h\", \"value\": \"1h\" }, { \"selected\": false, \"text\": \"6h\", \"value\": \"6h\" }, { \"selected\": false, \"text\": \"1d\", \"value\": \"1d\" } ], \"query\": \"1s,5s,1m,5m,1h,6h,1d\", \"refresh\": 2, \"skipUrlSync\": false, \"type\": \"interval\" }, { \"allFormat\": \"glob\", \"allValue\": null, \"current\": { \"text\": \"ETMS-DB-S-239\", \"value\": \"ETMS-DB-S-239\" }, \"datasource\": \"Prometheus-PMM\", \"definition\": \"label_values(mysql_slave_status_seconds_behind_master, instance)\", \"hide\": 0, \"includeAll\": false, \"label\": \"Host\", \"multi\": false, \"multiFormat\": \"regex values\", \"name\": \"host\", \"options\": [], \"query\": \"label_values(mysql_slave_status_seconds_behind_master, instance)\", \"refresh\": 1, \"refresh_on_load\": false, \"regex\": \"\", \"skipUrlSync\": false, \"sort\": 1, \"tagValuesQuery\": null, \"tags\": [], \"tagsQuery\": null, \"type\": \"query\", \"useTags\": false } ] }, \"time\": { \"from\": \"now-24h\", \"to\": \"now\" }, \"timepicker\": { \"collapse\": false, \"enable\": true, \"notice\": false, \"now\": true, \"refresh_intervals\": [ \"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\" ], \"status\": \"Stable\", \"time_options\": [ \"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\" ], \"type\": \"timepicker\" }, \"timezone\": \"browser\", \"title\": \"MySQL Replication\" } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/grafana/grafana-tmpl_pmm-mysql.html":{"url":"docs/monitoring/grafana/grafana-tmpl_pmm-mysql.html","title":"PMM MySQL","keywords":"","body":"Grafana模板 - PMM MySQL Overview { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": \"-- Grafana --\", \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"type\": \"dashboard\" } ] }, \"editable\": true, \"gnetId\": null, \"graphTooltip\": 1, \"id\": 3, \"iteration\": 1589530249880, \"links\": [ { \"icon\": \"external link\", \"includeVars\": true, \"keepTime\": true, \"tags\": [], \"targetBlank\": true, \"title\": \"Query Analytics\", \"type\": \"link\", \"url\": \"http://10.1.100.200/qan/\" }, { \"asDropdown\": true, \"icon\": \"external link\", \"includeVars\": true, \"keepTime\": true, \"tags\": [ \"OS\", \"PMM\" ], \"targetBlank\": true, \"title\": \"OS\", \"type\": \"dashboards\" }, { \"asDropdown\": true, \"icon\": \"external link\", \"includeVars\": true, \"keepTime\": true, \"tags\": [ \"MySQL\", \"PMM\" ], \"targetBlank\": true, \"title\": \"MySQL\", \"type\": \"dashboards\" } ], \"panels\": [ { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 0 }, \"id\": 55, \"panels\": [], \"repeat\": null, \"title\": \"Widgets\", \"type\": \"row\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": true, \"colors\": [ \"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\" ], \"datasource\": \"Prometheus-PMM\", \"decimals\": 1, \"editable\": true, \"error\": false, \"format\": \"s\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 0, \"y\": 1 }, \"height\": \"125px\", \"id\": 12, \"interval\": \"$interval\", \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"s\", \"postfixFontSize\": \"80%\", \"prefix\": \"\", \"prefixFontSize\": \"80%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"calculatedInterval\": \"10m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_uptime{instance=\\\"$host\\\"}\", \"interval\": \"5m\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": \"300,3600\", \"title\": \"MySQL Uptime\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\" ], \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"format\": \"short\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 6, \"y\": 1 }, \"height\": \"125px\", \"id\": 13, \"interval\": \"$interval\", \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"80%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": true }, \"tableColumn\": \"\", \"targets\": [ { \"calculatedInterval\": \"10m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_queries{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_queries{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": \"35,75\", \"title\": \"Current QPS\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"bytes\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 12, \"y\": 1 }, \"height\": \"125px\", \"id\": 51, \"interval\": \"$interval\", \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"80%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"calculatedInterval\": \"10m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_variables_innodb_buffer_pool_size{instance=\\\"$host\\\"}\", \"interval\": \"5m\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": \"90,95\", \"title\": \"InnoDB Buffer Pool Size\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [], \"valueName\": \"current\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": true, \"colors\": [ \"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\" ], \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"percent\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 4, \"w\": 6, \"x\": 18, \"y\": 1 }, \"height\": \"125px\", \"id\": 52, \"interval\": \"$interval\", \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"80%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"repeat\": null, \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"calculatedInterval\": \"10m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"(mysql_global_variables_innodb_buffer_pool_size{instance=\\\"$host\\\"} * 100) / on (instance) node_memory_MemTotal{instance=\\\"$host\\\"}\", \"interval\": \"5m\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": \"40,80\", \"title\": \"Buffer Pool Size of Total RAM\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [], \"valueName\": \"current\" }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 5 }, \"id\": 56, \"panels\": [], \"repeat\": null, \"title\": \"Connections\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 6 }, \"height\": \"250px\", \"id\": 2, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Max Connections\", \"fill\": 0 } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_connections{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_connections{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Connections\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_max_used_connections{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Max Used Connections\", \"metric\": \"\", \"refId\": \"C\", \"step\": 300, \"target\": \"\" }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_variables_max_connections{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Max Connections\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Connections\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 6 }, \"id\": 10, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Threads Running\", \"color\": \"#E24D42\" }, { \"alias\": \"Threads Connected\", \"color\": \"#EAB839\" } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_threads_connected{instance=\\\"$host\\\"}\", \"hide\": false, \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Threads Connected\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_threads_running{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Threads Running\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Active Threads\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 13 }, \"id\": 57, \"panels\": [], \"repeat\": null, \"title\": \"Table Locks\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": null, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 14 }, \"id\": 53, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_questions{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_questions{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Questions\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Questions\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 14 }, \"id\": 11, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Threads Created\", \"fill\": 0 } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_variables_thread_cache_size{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Thread Cache Size\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_threads_cached{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Threads Cached\", \"metric\": \"\", \"refId\": \"C\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_threads_created{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_threads_created{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Threads Created\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Thread Cache\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 21 }, \"id\": 58, \"panels\": [], \"repeat\": null, \"title\": \"Temporary Objects\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 22 }, \"id\": 22, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_created_tmp_tables{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_created_tmp_tables{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Created Tmp Tables\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_created_tmp_disk_tables{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_created_tmp_disk_tables{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Created Tmp Disk Tables\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_created_tmp_files{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_created_tmp_files{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Created Tmp Files\", \"metric\": \"\", \"refId\": \"C\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Temporary Objects\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 22 }, \"height\": \"250px\", \"id\": 31, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"hideZero\": true, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_select_full_join{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_select_full_join{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Select Full Join\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_select_full_range_join{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_select_full_range_join{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Select Full Range Join\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_select_range{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_select_range{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Select Range\", \"metric\": \"\", \"refId\": \"C\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_select_range_check{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_select_range_check{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Select Range Check\", \"metric\": \"\", \"refId\": \"D\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_select_scan{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_select_scan{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Select Scan\", \"metric\": \"\", \"refId\": \"E\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Select Types\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 29 }, \"id\": 59, \"panels\": [], \"repeat\": null, \"title\": \"Sorts\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 30 }, \"id\": 30, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"hideZero\": true, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_sort_rows{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_sort_rows{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Sort Rows\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_sort_range{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_sort_range{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Sort Range\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_sort_merge_passes{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_sort_merge_passes{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Sort Merge Passes\", \"metric\": \"\", \"refId\": \"C\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_sort_scan{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_sort_scan{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Sort Scan\", \"metric\": \"\", \"refId\": \"D\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Sorts\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 30 }, \"id\": 48, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_slow_queries{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_slow_queries{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Slow Queries\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Slow Queries\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 37 }, \"id\": 60, \"panels\": [], \"repeat\": null, \"title\": \"Aborted\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 38 }, \"id\": 47, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_aborted_connects{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_aborted_connects{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Aborted Connects (attempts)\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_aborted_clients{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_aborted_clients{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Aborted Clients (timeout)\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Aborted Connections\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 38 }, \"id\": 32, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_table_locks_immediate{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_table_locks_immediate{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Table Locks Immediate\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_table_locks_waited{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_table_locks_waited{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Table Locks Waited\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Table Locks\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 45 }, \"id\": 61, \"panels\": [], \"repeat\": null, \"title\": \"Network\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 6, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 46 }, \"id\": 9, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_bytes_received{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_bytes_received{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Inbound\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_bytes_sent{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_bytes_sent{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Outbound\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Network Traffic\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"Bps\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"none\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": true, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 6, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 46 }, \"height\": \"250px\", \"id\": 38, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": false, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"increase(mysql_global_status_bytes_received{instance=\\\"$host\\\"}[1h])\", \"interval\": \"1h\", \"intervalFactor\": 1, \"legendFormat\": \"Received\", \"metric\": \"\", \"refId\": \"A\", \"step\": 3600 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"increase(mysql_global_status_bytes_sent{instance=\\\"$host\\\"}[1h])\", \"interval\": \"1h\", \"intervalFactor\": 1, \"legendFormat\": \"Sent\", \"metric\": \"\", \"refId\": \"B\", \"step\": 3600 } ], \"thresholds\": [], \"timeFrom\": \"24h\", \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Network Usage Hourly\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"none\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 53 }, \"id\": 62, \"panels\": [], \"repeat\": null, \"title\": \"Memory\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 0, \"editable\": true, \"error\": false, \"fill\": 6, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 54 }, \"id\": 50, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"hideEmpty\": true, \"hideZero\": true, \"max\": true, \"min\": true, \"rightSide\": true, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"System Memory\", \"fill\": 0, \"stack\": false } ], \"spaceLength\": 10, \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"expr\": \"node_memory_MemTotal{instance=\\\"$host\\\"}\", \"intervalFactor\": 2, \"legendFormat\": \"System Memory\", \"refId\": \"G\", \"step\": 60 }, { \"expr\": \"mysql_global_status_innodb_page_size{instance=\\\"$host\\\"} * on (instance) mysql_global_status_buffer_pool_pages{instance=\\\"$host\\\",state=\\\"data\\\"}\", \"hide\": false, \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"InnoDB Buffer Pool Data\", \"refId\": \"A\", \"step\": 300 }, { \"expr\": \"mysql_global_variables_innodb_log_buffer_size{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"InnoDB Log Buffer Size\", \"refId\": \"D\", \"step\": 300 }, { \"expr\": \"mysql_global_variables_innodb_additional_mem_pool_size{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 2, \"legendFormat\": \"InnoDB Additional Memory Pool Size\", \"refId\": \"H\", \"step\": 600 }, { \"expr\": \"mysql_global_status_innodb_mem_dictionary{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"InnoDB Dictionary Size\", \"refId\": \"F\", \"step\": 300 }, { \"expr\": \"mysql_global_variables_key_buffer_size{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Key Buffer Size\", \"refId\": \"B\", \"step\": 300 }, { \"expr\": \"mysql_global_variables_query_cache_size{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Query Cache Size\", \"refId\": \"C\", \"step\": 300 }, { \"expr\": \"mysql_global_status_innodb_mem_adaptive_hash{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Adaptive Hash Index Size\", \"refId\": \"E\", \"step\": 300 }, { \"expr\": \"mysql_global_variables_tokudb_cache_size{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"TokuDB Cache Size\", \"refId\": \"I\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Internal Memory Overview\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 61 }, \"id\": 63, \"panels\": [], \"repeat\": null, \"title\": \"Command, Handlers, Processes\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 62 }, \"id\": 14, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"hideEmpty\": false, \"hideZero\": false, \"max\": true, \"min\": true, \"rightSide\": true, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"topk(5, rate(mysql_global_status_commands_total{instance=\\\"$host\\\"}[$interval])>0) or topk(5, irate(mysql_global_status_commands_total{instance=\\\"$host\\\"}[5m])>0)\", \"hide\": false, \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Com_{{ command }}\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Top Command Counters\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": true, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 6, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 69 }, \"id\": 39, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": true, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": false, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"topk(5, increase(mysql_global_status_commands_total{instance=\\\"$host\\\"}[1h])>0)\", \"interval\": \"1h\", \"intervalFactor\": 1, \"legendFormat\": \"Com_{{ command }}\", \"metric\": \"\", \"refId\": \"A\", \"step\": 3600 } ], \"thresholds\": [], \"timeFrom\": \"24h\", \"timeRegions\": [], \"timeShift\": null, \"title\": \"Top Command Counters Hourly\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 76 }, \"id\": 8, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"hideZero\": true, \"max\": true, \"min\": true, \"rightSide\": true, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_handlers_total{instance=\\\"$host\\\", handler!~\\\"commit|rollback|savepoint.*|prepare\\\"}[$interval]) or irate(mysql_global_status_handlers_total{instance=\\\"$host\\\", handler!~\\\"commit|rollback|savepoint.*|prepare\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"{{ handler }}\", \"metric\": \"\", \"refId\": \"J\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Handlers\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 83 }, \"id\": 28, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"hideZero\": true, \"max\": true, \"min\": true, \"rightSide\": true, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_handlers_total{instance=\\\"$host\\\", handler=~\\\"commit|rollback|savepoint.*|prepare\\\"}[$interval]) or irate(mysql_global_status_handlers_total{instance=\\\"$host\\\", handler=~\\\"commit|rollback|savepoint.*|prepare\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"{{ handler }}\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Transaction Handlers\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 0, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 90 }, \"id\": 40, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"hideZero\": true, \"max\": true, \"min\": false, \"rightSide\": true, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_info_schema_threads{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"{{ state }}\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Process States\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": true, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 6, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 24, \"x\": 0, \"y\": 97 }, \"id\": 49, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"hideZero\": true, \"max\": true, \"min\": false, \"rightSide\": true, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": false, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"topk(5, sum_over_time(mysql_info_schema_threads{instance=\\\"$host\\\"}[1h]))\", \"interval\": \"1h\", \"intervalFactor\": 1, \"legendFormat\": \"{{ state }}\", \"metric\": \"\", \"refId\": \"A\", \"step\": 3600 } ], \"thresholds\": [], \"timeFrom\": \"24h\", \"timeRegions\": [], \"timeShift\": null, \"title\": \"Top Process States Hourly\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 104 }, \"id\": 64, \"panels\": [], \"repeat\": null, \"title\": \"Query Cache\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 105 }, \"id\": 46, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_qcache_free_memory{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Free Memory\", \"metric\": \"\", \"refId\": \"F\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_variables_query_cache_size{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Query Cache Size\", \"metric\": \"\", \"refId\": \"E\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Query Cache Memory\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 105 }, \"height\": \"\", \"id\": 45, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_qcache_hits{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_qcache_hits{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Hits\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_qcache_inserts{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_qcache_inserts{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Inserts\", \"metric\": \"\", \"refId\": \"C\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_qcache_not_cached{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_qcache_not_cached{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Not Cached\", \"metric\": \"\", \"refId\": \"D\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_qcache_lowmem_prunes{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_qcache_lowmem_prunes{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Prunes\", \"metric\": \"\", \"refId\": \"F\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_qcache_queries_in_cache{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Queries in Cache\", \"metric\": \"\", \"refId\": \"E\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Query Cache Activity\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 112 }, \"id\": 65, \"panels\": [], \"repeat\": null, \"title\": \"Files and Tables\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 113 }, \"id\": 43, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_opened_files{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_opened_files{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Openings\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL File Openings\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 113 }, \"id\": 41, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_open_files{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Open Files\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_variables_open_files_limit{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Open Files Limit\", \"metric\": \"\", \"refId\": \"D\", \"step\": 300 }, { \"expr\": \"mysql_global_status_innodb_num_open_files{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"InnoDB Open Files\", \"refId\": \"B\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Open Files\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 120 }, \"id\": 66, \"panels\": [], \"repeat\": null, \"title\": \"Table Openings\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 121 }, \"id\": 44, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Table Open Cache Hit Ratio\", \"yaxis\": 2 } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(mysql_global_status_opened_tables{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_opened_tables{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Openings\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"expr\": \"rate(mysql_global_status_table_open_cache_hits{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_table_open_cache_hits{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Hits\", \"refId\": \"B\", \"step\": 300 }, { \"expr\": \"rate(mysql_global_status_table_open_cache_misses{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_table_open_cache_misses{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Misses\", \"refId\": \"C\", \"step\": 300 }, { \"expr\": \"rate(mysql_global_status_table_open_cache_overflows{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_table_open_cache_overflows{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Misses due to Overflows\", \"refId\": \"D\", \"step\": 300 }, { \"expr\": \"(rate(mysql_global_status_table_open_cache_hits{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_table_open_cache_hits{instance=\\\"$host\\\"}[5m]))/((rate(mysql_global_status_table_open_cache_hits{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_table_open_cache_hits{instance=\\\"$host\\\"}[5m]))+(rate(mysql_global_status_table_open_cache_misses{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_table_open_cache_misses{instance=\\\"$host\\\"}[5m])))\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Table Open Cache Hit Ratio\", \"refId\": \"E\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Table Open Cache Status\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"percentunit\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 121 }, \"id\": 42, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_open_tables{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Open Tables\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_variables_table_open_cache{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Table Open Cache\", \"metric\": \"\", \"refId\": \"C\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Open Tables\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": false, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 128 }, \"id\": 67, \"panels\": [], \"repeat\": null, \"title\": \"Dashboard Row\", \"type\": \"row\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 129 }, \"id\": 54, \"legend\": { \"alignAsTable\": true, \"avg\": true, \"current\": false, \"max\": true, \"min\": true, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Opened Table Definitions\", \"yaxis\": 2 } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_status_open_table_definitions{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Open Table Definitions\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300 }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"mysql_global_variables_table_definition_cache{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Table Definitions Cache Size\", \"metric\": \"\", \"refId\": \"C\", \"step\": 300 }, { \"expr\": \"rate(mysql_global_status_opened_table_definitions{instance=\\\"$host\\\"}[$interval]) or irate(mysql_global_status_opened_table_definitions{instance=\\\"$host\\\"}[5m])\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Opened Table Definitions\", \"refId\": \"A\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"MySQL Table Definition Cache\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"collapsed\": true, \"gridPos\": { \"h\": 1, \"w\": 24, \"x\": 0, \"y\": 136 }, \"id\": 68, \"panels\": [ { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": null, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 0, \"y\": 137 }, \"id\": 31, \"legend\": { \"alignAsTable\": false, \"avg\": true, \"current\": false, \"hideEmpty\": false, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(node_vmstat_pgpgin{instance=\\\"$host\\\"}[$interval]) * 1024 or irate(node_vmstat_pgpgin{instance=\\\"$host\\\"}[5m]) * 1024\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Page In\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300, \"target\": \"\" }, { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(node_vmstat_pgpgout{instance=\\\"$host\\\"}[$interval]) * 1024 or irate(node_vmstat_pgpgout{instance=\\\"$host\\\"}[5m]) * 1024\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Page Out\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"I/O Activity\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"transparent\": false, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"Bps\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ] }, { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": null, \"editable\": true, \"error\": false, \"fill\": 6, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 8, \"y\": 137 }, \"height\": \"250px\", \"id\": 37, \"legend\": { \"alignAsTable\": false, \"avg\": true, \"current\": false, \"hideEmpty\": false, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"node_memory_MemTotal{instance=\\\"$host\\\"} - (node_memory_MemFree{instance=\\\"$host\\\"} + node_memory_Buffers{instance=\\\"$host\\\"} + node_memory_Cached{instance=\\\"$host\\\"})\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Used\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300, \"target\": \"\" }, { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"node_memory_MemFree{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Free\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300, \"target\": \"\" }, { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"node_memory_Buffers{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Buffers\", \"metric\": \"\", \"refId\": \"D\", \"step\": 300, \"target\": \"\" }, { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"node_memory_Cached{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Cached\", \"metric\": \"\", \"refId\": \"E\", \"step\": 300, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"Memory Distribution\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"transparent\": false, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"bytes\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ] }, { \"aliasColors\": { \"Load 1m\": \"#58140C\" }, \"bars\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": null, \"editable\": true, \"error\": false, \"fill\": 6, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 16, \"y\": 137 }, \"height\": \"\", \"id\": 2, \"legend\": { \"alignAsTable\": false, \"avg\": true, \"current\": false, \"hideEmpty\": true, \"hideZero\": true, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Load 1m\", \"color\": \"#58140C\", \"fill\": 2, \"stack\": false, \"yaxis\": 2 } ], \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"sum(rate(node_cpu{instance=\\\"$host\\\"}[$interval])) by (mode) * 100 / count_scalar(node_cpu{mode=\\\"user\\\", instance=\\\"$host\\\"}) or sum(irate(node_cpu{instance=\\\"$host\\\"}[5m])) by (mode) * 100 / count_scalar(node_cpu{mode=\\\"user\\\", instance=\\\"$host\\\"})\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"{{ mode }}\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300 }, { \"expr\": \"node_load1{instance=\\\"$host\\\"}\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Load 1m\", \"refId\": \"B\", \"step\": 300 } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"CPU Usage / Load\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"percent\", \"label\": \"\", \"logBase\": 1, \"max\": 100, \"min\": 0, \"show\": true }, { \"format\": \"none\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ] }, { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 0, \"y\": 144 }, \"height\": \"250px\", \"id\": 36, \"legend\": { \"alignAsTable\": false, \"avg\": true, \"current\": false, \"hideEmpty\": true, \"hideZero\": true, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": true, \"total\": false, \"values\": true }, \"lines\": false, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"percentage\": false, \"pointradius\": 1, \"points\": true, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"sum((rate(node_disk_read_time_ms{device!~\\\"dm-.+\\\", instance=\\\"$host\\\"}[$interval]) / rate(node_disk_reads_completed{device!~\\\"dm-.+\\\", instance=\\\"$host\\\"}[$interval])) or (irate(node_disk_read_time_ms{device!~\\\"dm-.+\\\", instance=\\\"$host\\\"}[5m]) / irate(node_disk_reads_completed{device!~\\\"dm-.+\\\", instance=\\\"$host\\\"}[5m])))\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Read\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300, \"target\": \"\" }, { \"calculatedInterval\": \"2m\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"sum((rate(node_disk_write_time_ms{device!~\\\"dm-.+\\\", instance=\\\"$host\\\"}[$interval]) / rate(node_disk_writes_completed{device!~\\\"dm-.+\\\", instance=\\\"$host\\\"}[$interval])) or (irate(node_disk_write_time_ms{device!~\\\"dm-.+\\\", instance=\\\"$host\\\"}[5m]) / irate(node_disk_writes_completed{device!~\\\"dm-.+\\\", instance=\\\"$host\\\"}[5m])))\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Write\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"Disk Latency\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"transparent\": false, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"ms\", \"label\": \"\", \"logBase\": 2, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"ms\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ] }, { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": null, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 8, \"y\": 144 }, \"height\": \"250px\", \"id\": 21, \"legend\": { \"alignAsTable\": false, \"avg\": true, \"current\": false, \"hideEmpty\": false, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Outbound\", \"transform\": \"negative-Y\" } ], \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"sum(rate(node_network_receive_bytes{instance=\\\"$host\\\", device!=\\\"lo\\\"}[$interval])) or sum(irate(node_network_receive_bytes{instance=\\\"$host\\\", device!=\\\"lo\\\"}[5m]))\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Inbound\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300, \"target\": \"\" }, { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"sum(rate(node_network_transmit_bytes{instance=\\\"$host\\\", device!=\\\"lo\\\"}[$interval])) or sum(irate(node_network_transmit_bytes{instance=\\\"$host\\\", device!=\\\"lo\\\"}[5m]))\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Outbound\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"Network Traffic\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"transparent\": false, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"Bps\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ] }, { \"aliasColors\": {}, \"bars\": false, \"datasource\": \"Prometheus-PMM\", \"decimals\": null, \"editable\": true, \"error\": false, \"fill\": 2, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 16, \"y\": 144 }, \"id\": 38, \"legend\": { \"alignAsTable\": false, \"avg\": true, \"current\": false, \"hideEmpty\": false, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": true, \"sort\": \"avg\", \"sortDesc\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(node_vmstat_pswpin{instance=\\\"$host\\\"}[$interval]) * 4096 or irate(node_vmstat_pswpin{instance=\\\"$host\\\"}[5m]) * 4096\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Swap In\", \"metric\": \"\", \"refId\": \"A\", \"step\": 300, \"target\": \"\" }, { \"calculatedInterval\": \"2s\", \"datasourceErrors\": {}, \"errors\": {}, \"expr\": \"rate(node_vmstat_pswpout{instance=\\\"$host\\\"}[$interval]) * 4096 or irate(node_vmstat_pswpout{instance=\\\"$host\\\"}[5m]) * 4096\", \"interval\": \"$interval\", \"intervalFactor\": 1, \"legendFormat\": \"Swap Out\", \"metric\": \"\", \"refId\": \"B\", \"step\": 300, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeShift\": null, \"title\": \"Swap Activity\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"transparent\": false, \"type\": \"graph\", \"xaxis\": { \"show\": true }, \"yaxes\": [ { \"format\": \"Bps\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true } ] } ], \"repeat\": null, \"title\": \"System Charts\", \"type\": \"row\" } ], \"schemaVersion\": 18, \"style\": \"dark\", \"tags\": [ \"Percona\", \"MySQL\", \"PMM\" ], \"templating\": { \"list\": [ { \"allFormat\": \"glob\", \"auto\": true, \"auto_count\": 200, \"auto_min\": \"1s\", \"current\": { \"text\": \"auto\", \"value\": \"$__auto_interval_interval\" }, \"datasource\": \"Prometheus-PMM\", \"hide\": 0, \"includeAll\": false, \"label\": \"Interval\", \"multi\": false, \"multiFormat\": \"glob\", \"name\": \"interval\", \"options\": [ { \"selected\": true, \"text\": \"auto\", \"value\": \"$__auto_interval_interval\" }, { \"selected\": false, \"text\": \"1s\", \"value\": \"1s\" }, { \"selected\": false, \"text\": \"5s\", \"value\": \"5s\" }, { \"selected\": false, \"text\": \"1m\", \"value\": \"1m\" }, { \"selected\": false, \"text\": \"5m\", \"value\": \"5m\" }, { \"selected\": false, \"text\": \"1h\", \"value\": \"1h\" }, { \"selected\": false, \"text\": \"6h\", \"value\": \"6h\" }, { \"selected\": false, \"text\": \"1d\", \"value\": \"1d\" } ], \"query\": \"1s,5s,1m,5m,1h,6h,1d\", \"refresh\": 2, \"skipUrlSync\": false, \"type\": \"interval\" }, { \"allFormat\": \"glob\", \"allValue\": null, \"current\": { \"text\": \"ETMS-DB-M-238\", \"value\": \"ETMS-DB-M-238\" }, \"datasource\": \"Prometheus-PMM\", \"definition\": \"label_values(mysql_up, instance)\", \"hide\": 0, \"includeAll\": false, \"label\": \"Host\", \"multi\": false, \"multiFormat\": \"regex values\", \"name\": \"host\", \"options\": [], \"query\": \"label_values(mysql_up, instance)\", \"refresh\": 1, \"refresh_on_load\": false, \"regex\": \"\", \"skipUrlSync\": false, \"sort\": 1, \"tagValuesQuery\": null, \"tags\": [], \"tagsQuery\": null, \"type\": \"query\", \"useTags\": false } ] }, \"time\": { \"from\": \"now-12h\", \"to\": \"now\" }, \"timepicker\": { \"collapse\": false, \"enable\": true, \"notice\": false, \"now\": true, \"refresh_intervals\": [ \"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\" ], \"status\": \"Stable\", \"time_options\": [ \"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\" ], \"type\": \"timepicker\" }, \"timezone\": \"browser\", \"title\": \"MySQL Overview - PMM\" } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/grafana/grafana-tmpl_rabbitmq-cluster.html":{"url":"docs/monitoring/grafana/grafana-tmpl_rabbitmq-cluster.html","title":"RabbitMQ Cluster","keywords":"","body":"Grafana模板 - RabbitMQ cluster { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": \"-- Grafana --\", \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"type\": \"dashboard\" } ] }, \"description\": \"Rabbitmq stats and alerting using RabbitMQ Exporter (https://github.com/kbudde/rabbitmq_exporter)\", \"editable\": true, \"gnetId\": 4279, \"graphTooltip\": 1, \"id\": 41, \"iteration\": 1589530613013, \"links\": [], \"panels\": [ { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"#d44a3a\", \"rgba(237, 129, 40, 0.89)\", \"#299c46\" ], \"datasource\": \"Prometheus\", \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 8, \"x\": 0, \"y\": 0 }, \"hideTimeOverride\": true, \"id\": 14, \"interval\": null, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"repeat\": \"node\", \"scopedVars\": { \"node\": { \"selected\": false, \"text\": \"rabbit@rabbitmq-disc-node1\", \"value\": \"rabbit@rabbitmq-disc-node1\" } }, \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"min(rabbitmq_running{node=~\\\"$node\\\"})\", \"format\": \"time_series\", \"instant\": true, \"intervalFactor\": 2, \"legendFormat\": \"nodes\", \"refId\": \"A\" } ], \"thresholds\": \"0.1,0.9\", \"timeFrom\": \"30s\", \"timeShift\": null, \"title\": \"$node\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" }, { \"op\": \"=\", \"text\": \"Up\", \"value\": \"1\" }, { \"op\": \"=\", \"text\": \"Down\", \"value\": \"0\" } ], \"valueName\": \"avg\" }, { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"#d44a3a\", \"rgba(237, 129, 40, 0.89)\", \"#299c46\" ], \"datasource\": \"Prometheus\", \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 8, \"x\": 8, \"y\": 0 }, \"hideTimeOverride\": true, \"id\": 23, \"interval\": null, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"repeat\": null, \"repeatIteration\": 1589530613013, \"repeatPanelId\": 14, \"scopedVars\": { \"node\": { \"selected\": false, \"text\": \"rabbit@rabbitmq-ram-node2\", \"value\": \"rabbit@rabbitmq-ram-node2\" } }, \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"min(rabbitmq_running{node=~\\\"$node\\\"})\", \"format\": \"time_series\", \"instant\": true, \"intervalFactor\": 2, \"legendFormat\": \"nodes\", \"refId\": \"A\" } ], \"thresholds\": \"0.1,0.9\", \"timeFrom\": \"30s\", \"timeShift\": null, \"title\": \"$node\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" }, { \"op\": \"=\", \"text\": \"Up\", \"value\": \"1\" }, { \"op\": \"=\", \"text\": \"Down\", \"value\": \"0\" } ], \"valueName\": \"avg\" }, { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"#d44a3a\", \"rgba(237, 129, 40, 0.89)\", \"#299c46\" ], \"datasource\": \"Prometheus\", \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 8, \"x\": 16, \"y\": 0 }, \"hideTimeOverride\": true, \"id\": 24, \"interval\": null, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"repeat\": null, \"repeatIteration\": 1589530613013, \"repeatPanelId\": 14, \"scopedVars\": { \"node\": { \"selected\": false, \"text\": \"rabbit@rabbitmq-ram-node3\", \"value\": \"rabbit@rabbitmq-ram-node3\" } }, \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"min(rabbitmq_running{node=~\\\"$node\\\"})\", \"format\": \"time_series\", \"instant\": true, \"intervalFactor\": 2, \"legendFormat\": \"nodes\", \"refId\": \"A\" } ], \"thresholds\": \"0.1,0.9\", \"timeFrom\": \"30s\", \"timeShift\": null, \"title\": \"$node\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" }, { \"op\": \"=\", \"text\": \"Up\", \"value\": \"1\" }, { \"op\": \"=\", \"text\": \"Down\", \"value\": \"0\" } ], \"valueName\": \"avg\" }, { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"#299c46\", \"rgba(237, 129, 40, 0.89)\", \"#d44a3a\" ], \"datasource\": \"Prometheus\", \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 12, \"x\": 0, \"y\": 3 }, \"id\": 21, \"interval\": null, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false, \"ymax\": null, \"ymin\": null }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum(rabbitmq_node_disk_free_alarm{node=~\\\"$node\\\"})\", \"instant\": true, \"refId\": \"A\" } ], \"thresholds\": \"1,1\", \"timeFrom\": null, \"timeShift\": null, \"title\": \"Disk limit Alarm\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"avg\" }, { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"#299c46\", \"rgba(237, 129, 40, 0.89)\", \"#d44a3a\" ], \"datasource\": \"Prometheus\", \"description\": \"\", \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 12, \"x\": 12, \"y\": 3 }, \"id\": 22, \"interval\": null, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false, \"ymax\": null, \"ymin\": null }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"sum(rabbitmq_node_mem_alarm{node=~\\\"$node\\\"})\", \"instant\": true, \"refId\": \"A\" } ], \"thresholds\": \"1,1\", \"timeFrom\": null, \"timeShift\": null, \"title\": \"Memory limit Alarm\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"avg\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": 0, \"fill\": 4, \"fillGradient\": 0, \"gridPos\": { \"h\": 4, \"w\": 12, \"x\": 0, \"y\": 6 }, \"id\": 5, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": true, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": { \"dataLinks\": [] }, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"sum(rabbitmq_connections)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"connections\", \"metric\": \"rabbitmq_connectionsTotal\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"sum(rabbitmq_channels)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"channels\", \"refId\": \"B\" }, { \"expr\": \"sum(rabbitmq_queue_consumers)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"consumers\", \"refId\": \"C\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Connections, channels and consumers\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"decimals\": 0, \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": \"0\", \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"alert\": { \"conditions\": [ { \"evaluator\": { \"params\": [ 1 ], \"type\": \"lt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"10s\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"last\" }, \"type\": \"query\" }, { \"evaluator\": { \"params\": [], \"type\": \"no_value\" }, \"operator\": { \"type\": \"or\" }, \"query\": { \"params\": [ \"A\", \"10s\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"last\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"frequency\": \"60s\", \"handler\": 1, \"message\": \"Some of the RabbitMQ node is down\", \"name\": \"Node Stats alert\", \"noDataState\": \"alerting\", \"notifications\": [] }, \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": 0, \"fill\": 1, \"fillGradient\": 0, \"gridPos\": { \"h\": 4, \"w\": 12, \"x\": 12, \"y\": 6 }, \"hideTimeOverride\": true, \"id\": 12, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 1, \"links\": [], \"nullPointMode\": \"null\", \"options\": { \"dataLinks\": [] }, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rabbitmq_running\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{node}}\", \"metric\": \"rabbitmq_running\", \"refId\": \"A\", \"step\": 2 } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"fill\": true, \"line\": true, \"op\": \"lt\", \"value\": 1 } ], \"timeFrom\": \"30s\", \"timeRegions\": [], \"timeShift\": null, \"title\": \"Nodes Up\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"decimals\": 0, \"format\": \"percentunit\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": 0, \"fill\": 4, \"fillGradient\": 0, \"gridPos\": { \"h\": 5, \"w\": 12, \"x\": 0, \"y\": 10 }, \"id\": 2, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": { \"dataLinks\": [] }, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rabbitmq_queue_messages\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}\", \"metric\": \"rabbitmq_queue_messages\", \"refId\": \"A\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Messages per Queue\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"decimals\": 0, \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": \"0\", \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": 0, \"fill\": 4, \"fillGradient\": 0, \"gridPos\": { \"h\": 5, \"w\": 12, \"x\": 12, \"y\": 10 }, \"id\": 8, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": { \"dataLinks\": [] }, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"max(rabbitmq_queue_messages_ready) by (queue)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}:ready\", \"metric\": \"rabbitmq_queue_messages_ready\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"max(rabbitmq_queue_messages_published_total) by (queue)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}:published\", \"metric\": \"rabbitmq_queue_messages_published_total\", \"refId\": \"B\", \"step\": 2 }, { \"expr\": \"max(rabbitmq_queue_messages_delivered_total) by (queue)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}:delivered\", \"metric\": \"rabbitmq_queue_messages_delivered_total\", \"refId\": \"C\", \"step\": 2 }, { \"expr\": \"sum by (queue)(rabbitmq_queue_messages_unacknowledged)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}:unack\", \"metric\": \"ack\", \"refId\": \"D\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Messages status\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"fill\": 1, \"fillGradient\": 0, \"gridPos\": { \"h\": 6, \"w\": 12, \"x\": 0, \"y\": 15 }, \"id\": 17, \"interval\": \"\", \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": { \"dataLinks\": [] }, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"min(rabbitmq_node_disk_free{node=~\\\"$node\\\"}) by (node)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{node}}:free\", \"metric\": \"rabbitmq_node_mem_used\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"min(rabbitmq_node_disk_free_limit{node=~\\\"$node\\\"}) by (node)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{node}}:limit\", \"metric\": \"rabbitmq_node_mem_used\", \"refId\": \"B\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Disk free\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"decimals\": 0, \"format\": \"bits\", \"label\": null, \"logBase\": 1, \"max\": \"100\", \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"alert\": { \"alertRuleTags\": {}, \"conditions\": [ { \"evaluator\": { \"params\": [ 80 ], \"type\": \"gt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"5m\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"avg\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"for\": \"0m\", \"frequency\": \"60s\", \"handler\": 1, \"name\": \"Memory (used / limit) alert\", \"noDataState\": \"no_data\", \"notifications\": [] }, \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"description\": \"\", \"fill\": 1, \"fillGradient\": 0, \"gridPos\": { \"h\": 6, \"w\": 12, \"x\": 12, \"y\": 15 }, \"id\": 9, \"interval\": \"\", \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": { \"dataLinks\": [] }, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"sum(rabbitmq_node_mem_used{node=~\\\"$node\\\"}) by (node) / sum(rabbitmq_node_mem_limit{node=~\\\"$node\\\"}) by (node) *100\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{node}}\", \"metric\": \"rabbitmq_node_mem_used\", \"refId\": \"A\", \"step\": 2 } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"fill\": true, \"line\": true, \"op\": \"gt\", \"value\": 80 } ], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Memory usage\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"decimals\": 0, \"format\": \"percent\", \"label\": \"\", \"logBase\": 1, \"max\": \"100\", \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } } ], \"refresh\": \"5s\", \"schemaVersion\": 18, \"style\": \"dark\", \"tags\": [ \"rabbitmq\", \"prometheus\" ], \"templating\": { \"list\": [ { \"current\": { \"text\": \"Prometheus\", \"value\": \"Prometheus\" }, \"hide\": 0, \"includeAll\": false, \"label\": null, \"multi\": false, \"name\": \"datasource\", \"options\": [], \"query\": \"prometheus\", \"refresh\": 1, \"regex\": \"\", \"skipUrlSync\": false, \"type\": \"datasource\" }, { \"allValue\": null, \"current\": { \"text\": \"All\", \"value\": [ \"$__all\" ] }, \"datasource\": \"Prometheus\", \"definition\": \"label_values(rabbitmq_running{cluster=\\\"rabbit@rabbitmq-disc-node1\\\"}, node)\", \"hide\": 0, \"includeAll\": true, \"label\": null, \"multi\": true, \"name\": \"node\", \"options\": [], \"query\": \"label_values(rabbitmq_running{cluster=\\\"rabbit@rabbitmq-disc-node1\\\"}, node)\", \"refresh\": 1, \"regex\": \"\", \"skipUrlSync\": false, \"sort\": 0, \"tagValuesQuery\": \"\", \"tags\": [], \"tagsQuery\": \"\", \"type\": \"query\", \"useTags\": false } ] }, \"time\": { \"from\": \"now-15m\", \"to\": \"now\" }, \"timepicker\": { \"refresh_intervals\": [ \"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\" ], \"time_options\": [ \"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\" ] }, \"timezone\": \"browser\", \"title\": \"RabbitMQ Monitoring——RabbitMQ集群\" } { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": \"-- Grafana --\", \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"type\": \"dashboard\" } ] }, \"description\": \"Rabbitmq stats and alerting using RabbitMQ Exporter (https://github.com/kbudde/rabbitmq_exporter)\", \"editable\": true, \"gnetId\": 4279, \"graphTooltip\": 1, \"id\": 25, \"iteration\": 1589530913210, \"links\": [], \"panels\": [ { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"#d44a3a\", \"rgba(237, 129, 40, 0.89)\", \"#299c46\" ], \"datasource\": \"Prometheus\", \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 8, \"x\": 0, \"y\": 0 }, \"hideTimeOverride\": true, \"id\": 14, \"interval\": null, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"repeat\": \"node\", \"scopedVars\": { \"node\": { \"selected\": false, \"text\": \"rabbit@rabbitmq-disc-node1\", \"value\": \"rabbit@rabbitmq-disc-node1\" } }, \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"rabbitmq_running{node=\\\"$node\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"node\", \"refId\": \"A\" } ], \"thresholds\": \"0.1,0.9\", \"timeFrom\": \"30s\", \"title\": \"$node\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" }, { \"op\": \"=\", \"text\": \"Up\", \"value\": \"1\" }, { \"op\": \"=\", \"text\": \"Down\", \"value\": \"0\" } ], \"valueName\": \"avg\" }, { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"#d44a3a\", \"rgba(237, 129, 40, 0.89)\", \"#299c46\" ], \"datasource\": \"Prometheus\", \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 8, \"x\": 8, \"y\": 0 }, \"hideTimeOverride\": true, \"id\": 18, \"interval\": null, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"repeat\": null, \"repeatIteration\": 1589530913210, \"repeatPanelId\": 14, \"scopedVars\": { \"node\": { \"selected\": false, \"text\": \"rabbit@rabbitmq-ram-node2\", \"value\": \"rabbit@rabbitmq-ram-node2\" } }, \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"rabbitmq_running{node=\\\"$node\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"node\", \"refId\": \"A\" } ], \"thresholds\": \"0.1,0.9\", \"timeFrom\": \"30s\", \"title\": \"$node\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" }, { \"op\": \"=\", \"text\": \"Up\", \"value\": \"1\" }, { \"op\": \"=\", \"text\": \"Down\", \"value\": \"0\" } ], \"valueName\": \"avg\" }, { \"cacheTimeout\": null, \"colorBackground\": true, \"colorValue\": false, \"colors\": [ \"#d44a3a\", \"rgba(237, 129, 40, 0.89)\", \"#299c46\" ], \"datasource\": \"Prometheus\", \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 3, \"w\": 8, \"x\": 16, \"y\": 0 }, \"hideTimeOverride\": true, \"id\": 19, \"interval\": null, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"repeat\": null, \"repeatIteration\": 1589530913210, \"repeatPanelId\": 14, \"scopedVars\": { \"node\": { \"selected\": false, \"text\": \"rabbit@rabbitmq-ram-node3\", \"value\": \"rabbit@rabbitmq-ram-node3\" } }, \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"rabbitmq_running{node=\\\"$node\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"node\", \"refId\": \"A\" } ], \"thresholds\": \"0.1,0.9\", \"timeFrom\": \"30s\", \"title\": \"$node\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" }, { \"op\": \"=\", \"text\": \"Up\", \"value\": \"1\" }, { \"op\": \"=\", \"text\": \"Down\", \"value\": \"0\" } ], \"valueName\": \"avg\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": 0, \"fill\": 4, \"gridPos\": { \"h\": 4, \"w\": 12, \"x\": 0, \"y\": 3 }, \"id\": 5, \"interval\": \"\", \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": true, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rabbitmq_connections{cluster=\\\"rabbit@rabbit1\\\"}\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"connections\", \"metric\": \"rabbitmq_connectionsTotal\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"rabbitmq_channels{cluster=\\\"rabbit@rabbit1\\\"}\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"channels\", \"refId\": \"B\" }, { \"expr\": \"rabbitmq_consumers{cluster=\\\"rabbit@rabbit1\\\"}\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"consumers\", \"refId\": \"C\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Connections, channels and consumers\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"decimals\": 0, \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": \"0\", \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"alert\": { \"conditions\": [ { \"evaluator\": { \"params\": [ 1 ], \"type\": \"lt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"10s\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"last\" }, \"type\": \"query\" }, { \"evaluator\": { \"params\": [], \"type\": \"no_value\" }, \"operator\": { \"type\": \"or\" }, \"query\": { \"params\": [ \"A\", \"10s\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"last\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"frequency\": \"60s\", \"handler\": 1, \"message\": \"Some of the RabbitMQ node is down\", \"name\": \"Node Stats alert\", \"noDataState\": \"alerting\", \"notifications\": [] }, \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": 0, \"fill\": 1, \"gridPos\": { \"h\": 4, \"w\": 12, \"x\": 12, \"y\": 3 }, \"hideTimeOverride\": true, \"id\": 12, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 1, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rabbitmq_running\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{node}}\", \"metric\": \"rabbitmq_running\", \"refId\": \"A\", \"step\": 2 } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"fill\": true, \"line\": true, \"op\": \"lt\", \"value\": 1 } ], \"timeFrom\": \"30s\", \"timeRegions\": [], \"timeShift\": null, \"title\": \"Nodes Up\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"decimals\": 0, \"format\": \"percentunit\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": false }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": 0, \"fill\": 4, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 7 }, \"id\": 2, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rabbitmq_queue_messages\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}\", \"metric\": \"rabbitmq_queue_messages\", \"refId\": \"A\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Messages per Queue\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"decimals\": 0, \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": \"0\", \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": 0, \"fill\": 4, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 7 }, \"id\": 8, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"sum by (queue)(rabbitmq_queue_messages_ready)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}:ready\", \"metric\": \"rabbitmq_queue_messages_ready\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"sum by (queue)(rabbitmq_queue_messages_published_total)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}:published\", \"metric\": \"rabbitmq_queue_messages_published_total\", \"refId\": \"B\", \"step\": 2 }, { \"expr\": \"sum by (queue)(rabbitmq_queue_messages_delivered_total)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}:delivered\", \"metric\": \"rabbitmq_queue_messages_delivered_total\", \"refId\": \"C\", \"step\": 2 }, { \"expr\": \"sum by (queue)(rabbitmq_queue_messages_unacknowledged)\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{queue}}:unack\", \"metric\": \"ack\", \"refId\": \"D\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Messages status\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"alert\": { \"conditions\": [ { \"evaluator\": { \"params\": [ 167197452 ], \"type\": \"lt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"5m\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"avg\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"frequency\": \"60s\", \"handler\": 1, \"name\": \"Memory (used / limit) alert\", \"noDataState\": \"no_data\", \"notifications\": [] }, \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"fill\": 1, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 14 }, \"id\": 17, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rabbitmq_node_disk_free\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{node}}:free\", \"metric\": \"rabbitmq_node_mem_used\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"rabbitmq_node_disk_free_limit\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{node}}:limit\", \"metric\": \"node_mem\", \"refId\": \"B\", \"step\": 2 } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"fill\": true, \"line\": true, \"op\": \"lt\", \"value\": 167197452 } ], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Free disk space\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"decbytes\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"alert\": { \"conditions\": [ { \"evaluator\": { \"params\": [ 1133956386 ], \"type\": \"gt\" }, \"operator\": { \"type\": \"and\" }, \"query\": { \"params\": [ \"A\", \"5m\", \"now\" ] }, \"reducer\": { \"params\": [], \"type\": \"avg\" }, \"type\": \"query\" } ], \"executionErrorState\": \"alerting\", \"frequency\": \"60s\", \"handler\": 1, \"name\": \"Memory (used / limit) alert\", \"noDataState\": \"no_data\", \"notifications\": [] }, \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"fill\": 1, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 14 }, \"id\": 9, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rabbitmq_node_mem_used\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{node}}:used\", \"metric\": \"rabbitmq_node_mem_used\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"rabbitmq_node_mem_limit\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{node}}:limit\", \"metric\": \"node_mem\", \"refId\": \"B\", \"step\": 2 } ], \"thresholds\": [ { \"colorMode\": \"critical\", \"fill\": true, \"line\": true, \"op\": \"gt\", \"value\": 1133956386 } ], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Used memory\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"decbytes\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } } ], \"refresh\": \"5s\", \"schemaVersion\": 18, \"style\": \"dark\", \"tags\": [ \"rabbitmq\", \"prometheus\" ], \"templating\": { \"list\": [ { \"current\": { \"text\": \"Prometheus\", \"value\": \"Prometheus\" }, \"hide\": 0, \"includeAll\": false, \"label\": null, \"multi\": false, \"name\": \"datasource\", \"options\": [], \"query\": \"prometheus\", \"refresh\": 1, \"regex\": \"Prometheus\", \"skipUrlSync\": false, \"type\": \"datasource\" }, { \"allValue\": null, \"current\": { \"text\": \"All\", \"value\": \"$__all\" }, \"datasource\": \"Prometheus\", \"definition\": \"label_values(rabbitmq_running{cluster=\\\"rabbit@rabbitmq-disc-node1\\\"}, node)\", \"hide\": 0, \"includeAll\": true, \"label\": null, \"multi\": true, \"name\": \"node\", \"options\": [], \"query\": \"label_values(rabbitmq_running{cluster=\\\"rabbit@rabbitmq-disc-node1\\\"}, node)\", \"refresh\": 1, \"regex\": \"\", \"skipUrlSync\": false, \"sort\": 0, \"tagValuesQuery\": \"\", \"tags\": [], \"tagsQuery\": \"\", \"type\": \"query\", \"useTags\": false } ] }, \"time\": { \"from\": \"now-3h\", \"to\": \"now\" }, \"timepicker\": { \"refresh_intervals\": [ \"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\" ], \"time_options\": [ \"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\" ] }, \"timezone\": \"browser\", \"title\": \"RabbitMQ Monitoring\" } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/grafana/grafana-tmpl_rabbitmq.html":{"url":"docs/monitoring/grafana/grafana-tmpl_rabbitmq.html","title":"RabbitMQ","keywords":"","body":"Grafana模板 - RabbitMQ { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": \"-- Grafana --\", \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"type\": \"dashboard\" } ] }, \"editable\": true, \"gnetId\": null, \"graphTooltip\": 0, \"id\": 35, \"iteration\": 1589530511839, \"links\": [], \"panels\": [ { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\" ], \"datasource\": \"Prometheus\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"dtdurationms\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 7, \"w\": 4, \"x\": 0, \"y\": 0 }, \"id\": 9, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"rabbitmq_uptime{instance=\\\"$host\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"\", \"refId\": \"A\", \"step\": 20 } ], \"thresholds\": \"\", \"title\": \"Uptime\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"avg\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 10, \"x\": 4, \"y\": 0 }, \"height\": \"\", \"id\": 2, \"isNew\": true, \"legend\": { \"alignAsTable\": false, \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"sum by (job) (irate(rabbitmq_queue_messages_published_total[5m]))\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Messages Published\", \"metric\": \"\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"sum by (job) (irate(rabbitmq_queue_messages_delivered_total[5m]) + irate(rabbitmq_queue_messages_delivered_no_ack_total[5m]) + irate(rabbitmq_queue_messages_get_total[5m]) + irate(rabbitmq_queue_messages_get_no_ack_total[5m]))\", \"format\": \"time_series\", \"hide\": false, \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"Messages delivered\", \"metric\": \"\", \"refId\": \"B\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Messages Rates\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"none\", \"label\": \"Messages\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 10, \"x\": 14, \"y\": 0 }, \"id\": 1, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rabbitmq_connections\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Connections\", \"metric\": \"rabbitmq_connections\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"rabbitmq_channels\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Channels\", \"metric\": \"rabbitmq_channels\", \"refId\": \"B\", \"step\": 2 }, { \"expr\": \"rabbitmq_consumers\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Consumers\", \"metric\": \"rabbitmq_consumers\", \"refId\": \"C\", \"step\": 2 }, { \"expr\": \"rabbitmq_exchanges\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Exchanges\", \"metric\": \"rabbitmq_exchanges\", \"refId\": \"D\", \"step\": 2 }, { \"expr\": \"rabbitmq_queues\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Queues\", \"metric\": \"rabbitmq_queues\", \"refId\": \"E\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Default VHost stat\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 0, \"y\": 7 }, \"id\": 6, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"irate(erlang_vm_statistics_bytes_output_total[5m])\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Output Bytes\", \"metric\": \"erlang_vm_statistics_bytes_output_total\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"irate(erlang_vm_statistics_bytes_received_total[5m])\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Received Bytes\", \"metric\": \"erlang_vm_statistics_bytes_received_total\", \"refId\": \"B\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Erlang VM IO\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 8, \"y\": 7 }, \"id\": 7, \"isNew\": true, \"legend\": { \"alignAsTable\": false, \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"rightSide\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Words Reclaimed\", \"yaxis\": 2 } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"irate(erlang_vm_statistics_garbage_collection_number_of_gcs[5m])\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Number of GCs\", \"metric\": \"erlang_vm_statistics_garbage_collection_number_of_gcs\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"irate(erlang_vm_statistics_garbage_collection_words_reclaimed[5m])\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Words Reclaimed\", \"metric\": \"erlang_vm_statistics_garbage_collection_words_reclaimed\", \"refId\": \"B\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Erlang VM GC\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 16, \"y\": 7 }, \"id\": 3, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"expr\": \"erlang_vm_memory_bytes_total{kind=\\\"processes\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Processes Memory\", \"refId\": \"B\", \"step\": 2 }, { \"expr\": \"erlang_vm_memory_system_bytes_total{usage=\\\"atom\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Atoms\", \"refId\": \"C\", \"step\": 2 }, { \"expr\": \"erlang_vm_memory_system_bytes_total{usage=\\\"binary\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Binary\", \"refId\": \"D\", \"step\": 2 }, { \"expr\": \"erlang_vm_memory_system_bytes_total{usage=\\\"code\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Code\", \"refId\": \"E\", \"step\": 2 }, { \"expr\": \"erlang_vm_memory_system_bytes_total{usage=\\\"ets\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"ETS\", \"refId\": \"F\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Erlang VM Memory\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 0, \"y\": 14 }, \"id\": 11, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"process_virtual_memory_bytes{instance=\\\"$host\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Virtual Memory\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"process_resident_memory_bytes{instance=\\\"$host\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Resident Memory\", \"refId\": \"B\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Process Memory\", \"tooltip\": { \"msResolution\": true, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 8, \"y\": 14 }, \"id\": 8, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"process_open_fds{instance=\\\"$host\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"Open FDs\", \"metric\": \"\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"process_max_fds{instance=\\\"$host\\\"}\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"Max FDs\", \"refId\": \"B\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"File Descriptors\", \"tooltip\": { \"msResolution\": true, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"none\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": null, \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 8, \"x\": 16, \"y\": 14 }, \"id\": 10, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"Threads\", \"yaxis\": 2 } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"process_threads_total{instance=\\\"$host\\\"}\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"Threads\", \"refId\": \"A\", \"step\": 2 }, { \"expr\": \"sum(irate(process_cpu_seconds_total{instance=\\\"$host\\\"}[30s])) without (kind) * 100\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"CPU\", \"refId\": \"B\", \"step\": 2 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Native Threads & CPU\", \"tooltip\": { \"msResolution\": true, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"percent\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } } ], \"refresh\": \"5s\", \"schemaVersion\": 18, \"style\": \"dark\", \"tags\": [ \"rabbitmq\" ], \"templating\": { \"list\": [ { \"allValue\": null, \"current\": { \"tags\": [], \"text\": \"192.168.101.68:9429\", \"value\": \"192.168.101.68:9429\" }, \"datasource\": \"Prometheus\", \"definition\": \"label_values(rabbitmq_up, instance)\", \"hide\": 0, \"includeAll\": false, \"label\": \"HOST\", \"multi\": false, \"name\": \"host\", \"options\": [], \"query\": \"label_values(rabbitmq_up, instance)\", \"refresh\": 1, \"regex\": \"\", \"skipUrlSync\": false, \"sort\": 1, \"tagValuesQuery\": \"\", \"tags\": [], \"tagsQuery\": \"\", \"type\": \"query\", \"useTags\": false } ] }, \"time\": { \"from\": \"now-15m\", \"to\": \"now\" }, \"timepicker\": { \"now\": true, \"refresh_intervals\": [ \"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\" ], \"time_options\": [ \"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\" ] }, \"timezone\": \"browser\", \"title\": \"RabbitMQ\" } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/grafana/grafana-tmpl_redis.html":{"url":"docs/monitoring/grafana/grafana-tmpl_redis.html","title":"Redis","keywords":"","body":"Grafana模板 - Redis { \"annotations\": { \"list\": [ { \"builtIn\": 1, \"datasource\": \"-- Grafana --\", \"enable\": true, \"hide\": true, \"iconColor\": \"rgba(0, 211, 255, 1)\", \"name\": \"Annotations & Alerts\", \"type\": \"dashboard\" } ] }, \"description\": \"Prometheus dashboard for Redis servers\", \"editable\": true, \"gnetId\": 2751, \"graphTooltip\": 0, \"id\": 34, \"iteration\": 1589530358723, \"links\": [], \"panels\": [ { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\" ], \"datasource\": \"Prometheus\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"s\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 2, \"w\": 5, \"x\": 0, \"y\": 0 }, \"id\": 9, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": false }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"redis_uptime_in_seconds{instance=\\\"$addr\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 1800 } ], \"thresholds\": \"\", \"title\": \"Uptime\", \"type\": \"singlestat\", \"valueFontSize\": \"70%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"avg\" }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\" ], \"datasource\": \"Prometheus\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"none\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": false, \"thresholdLabels\": false, \"thresholdMarkers\": true }, \"gridPos\": { \"h\": 2, \"w\": 3, \"x\": 5, \"y\": 0 }, \"hideTimeOverride\": true, \"id\": 12, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": true }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"redis_connected_clients{instance=\\\"$addr\\\"}\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 2 } ], \"thresholds\": \"\", \"timeFrom\": \"1m\", \"timeShift\": null, \"title\": \"Clients\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 6, \"w\": 8, \"x\": 8, \"y\": 0 }, \"id\": 2, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": false, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rate(redis_commands_processed_total{instance=~\\\"$addr\\\"}[5m])\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"\", \"metric\": \"A\", \"refId\": \"A\", \"step\": 240, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Commands Executed / sec\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"decimals\": 2, \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 6, \"w\": 8, \"x\": 16, \"y\": 0 }, \"id\": 1, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": false, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": true, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"irate(redis_keyspace_hits_total{instance=\\\"$addr\\\"}[5m])\", \"format\": \"time_series\", \"hide\": false, \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"hits\", \"metric\": \"\", \"refId\": \"A\", \"step\": 240, \"target\": \"\" }, { \"expr\": \"irate(redis_keyspace_misses_total{instance=\\\"$addr\\\"}[5m])\", \"format\": \"time_series\", \"hide\": false, \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"misses\", \"metric\": \"\", \"refId\": \"B\", \"step\": 240, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Hits / Misses per Sec\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"description\": \"\", \"fill\": 1, \"gridPos\": { \"h\": 4, \"w\": 5, \"x\": 0, \"y\": 2 }, \"id\": 16, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": false, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null\", \"options\": {}, \"percentage\": false, \"pluginVersion\": \"6.2.0\", \"pointradius\": 2, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"redis_connected_slaves\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 1, \"legendFormat\": \"\", \"refId\": \"A\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Slave数量\", \"tooltip\": { \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"decimals\": 0, \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": \"0\", \"show\": true }, { \"decimals\": null, \"format\": \"short\", \"label\": \"\", \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"cacheTimeout\": null, \"colorBackground\": false, \"colorValue\": false, \"colors\": [ \"rgba(50, 172, 45, 0.97)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(245, 54, 54, 0.9)\" ], \"datasource\": \"Prometheus\", \"decimals\": 0, \"editable\": true, \"error\": false, \"format\": \"percent\", \"gauge\": { \"maxValue\": 100, \"minValue\": 0, \"show\": true, \"thresholdLabels\": false, \"thresholdMarkers\": false }, \"gridPos\": { \"h\": 4, \"w\": 3, \"x\": 5, \"y\": 2 }, \"hideTimeOverride\": true, \"id\": 11, \"interval\": null, \"isNew\": true, \"links\": [], \"mappingType\": 1, \"mappingTypes\": [ { \"name\": \"value to text\", \"value\": 1 }, { \"name\": \"range to text\", \"value\": 2 } ], \"maxDataPoints\": 100, \"nullPointMode\": \"connected\", \"nullText\": null, \"options\": {}, \"postfix\": \"\", \"postfixFontSize\": \"50%\", \"prefix\": \"\", \"prefixFontSize\": \"50%\", \"rangeMaps\": [ { \"from\": \"null\", \"text\": \"N/A\", \"to\": \"null\" } ], \"sparkline\": { \"fillColor\": \"rgba(31, 118, 189, 0.18)\", \"full\": false, \"lineColor\": \"rgb(31, 120, 193)\", \"show\": true }, \"tableColumn\": \"\", \"targets\": [ { \"expr\": \"(100 * redis_memory_used_bytes{instance=~\\\"$addr\\\"} / redis_config_maxmemory{addr=~\\\"$addr\\\"}) or (100 * redis_memory_used_bytes{instance=~\\\"$addr\\\"} / (0.2*1024*1024*1024))\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"\", \"metric\": \"\", \"refId\": \"A\", \"step\": 2 } ], \"thresholds\": \"50,80\", \"timeFrom\": \"1m\", \"timeShift\": null, \"title\": \"Memory Usage\", \"type\": \"singlestat\", \"valueFontSize\": \"80%\", \"valueMaps\": [ { \"op\": \"=\", \"text\": \"N/A\", \"value\": \"null\" } ], \"valueName\": \"current\" }, { \"aliasColors\": { \"max\": \"#BF1B00\" }, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 6 }, \"id\": 7, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"hideEmpty\": false, \"hideZero\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"null as zero\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"redis_memory_used_bytes{instance=~\\\"$addr\\\"} \", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"used\", \"metric\": \"\", \"refId\": \"A\", \"step\": 240, \"target\": \"\" }, { \"expr\": \"redis_config_maxmemory{instance=~\\\"$addr\\\"} \", \"format\": \"time_series\", \"hide\": false, \"intervalFactor\": 2, \"legendFormat\": \"max\", \"refId\": \"B\", \"step\": 240 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Total Memory Usage\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": 0, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 6 }, \"id\": 10, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"rate(redis_net_input_bytes_total{instance=\\\"$addr\\\"}[5m])\", \"format\": \"time_series\", \"intervalFactor\": 2, \"legendFormat\": \"{{ input }}\", \"refId\": \"A\", \"step\": 240 }, { \"expr\": \"rate(redis_net_output_bytes_total{instance=\\\"$addr\\\"}[5m])\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"{{ output }}\", \"refId\": \"B\", \"step\": 240 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Network I/O\", \"tooltip\": { \"msResolution\": true, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"bytes\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 7, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 13 }, \"id\": 5, \"isNew\": true, \"legend\": { \"alignAsTable\": true, \"avg\": false, \"current\": true, \"max\": false, \"min\": false, \"rightSide\": true, \"show\": true, \"total\": false, \"values\": true }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"expr\": \"sum (redis_db_keys{instance=~\\\"$addr\\\"}) by (db)\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"{{ db }} \", \"refId\": \"A\", \"step\": 240, \"target\": \"\" } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Total Items per DB\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"none\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 7, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 13 }, \"id\": 13, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"expr\": \"sum (redis_db_keys{instance=~\\\"$addr\\\"}) - sum (redis_db_keys_expiring{instance=~\\\"$addr\\\"}) \", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"not expiring\", \"refId\": \"A\", \"step\": 240, \"target\": \"\" }, { \"expr\": \"sum (redis_db_keys_expiring{instance=~\\\"$addr\\\"}) \", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"expiring\", \"metric\": \"\", \"refId\": \"B\", \"step\": 240 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Expiring vs Not-Expiring Keys\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"individual\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": { \"evicts\": \"#890F02\", \"memcached_items_evicted_total{instance=\\\"172.17.0.1:9150\\\",job=\\\"prometheus\\\"}\": \"#890F02\", \"reclaims\": \"#3F6833\" }, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 1, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 0, \"y\": 20 }, \"id\": 8, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 2, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [ { \"alias\": \"reclaims\", \"yaxis\": 2 } ], \"spaceLength\": 10, \"stack\": false, \"steppedLine\": false, \"targets\": [ { \"expr\": \"sum(rate(redis_expired_keys_total{instance=~\\\"$addr\\\"}[5m])) by (instance)\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"expired\", \"metric\": \"\", \"refId\": \"A\", \"step\": 240, \"target\": \"\" }, { \"expr\": \"sum(rate(redis_evicted_keys_total{instance=~\\\"$addr\\\"}[5m])) by (instance)\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"evicted\", \"refId\": \"B\", \"step\": 240 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Expired / Evicted\", \"tooltip\": { \"msResolution\": false, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } }, { \"aliasColors\": {}, \"bars\": false, \"dashLength\": 10, \"dashes\": false, \"datasource\": \"Prometheus\", \"editable\": true, \"error\": false, \"fill\": 8, \"grid\": {}, \"gridPos\": { \"h\": 7, \"w\": 12, \"x\": 12, \"y\": 20 }, \"id\": 14, \"isNew\": true, \"legend\": { \"avg\": false, \"current\": false, \"max\": false, \"min\": false, \"show\": true, \"total\": false, \"values\": false }, \"lines\": true, \"linewidth\": 1, \"links\": [], \"nullPointMode\": \"connected\", \"options\": {}, \"percentage\": false, \"pointradius\": 5, \"points\": false, \"renderer\": \"flot\", \"seriesOverrides\": [], \"spaceLength\": 10, \"stack\": true, \"steppedLine\": false, \"targets\": [ { \"expr\": \"topk(5, irate(redis_commands_duration_seconds_total{instance=~\\\"$addr\\\"} [1m]))\", \"format\": \"time_series\", \"interval\": \"\", \"intervalFactor\": 2, \"legendFormat\": \"{{ cmd }}\", \"metric\": \"redis_command_calls_total\", \"refId\": \"A\", \"step\": 240 } ], \"thresholds\": [], \"timeFrom\": null, \"timeRegions\": [], \"timeShift\": null, \"title\": \"Command Calls / sec\", \"tooltip\": { \"msResolution\": true, \"shared\": true, \"sort\": 0, \"value_type\": \"cumulative\" }, \"type\": \"graph\", \"xaxis\": { \"buckets\": null, \"mode\": \"time\", \"name\": null, \"show\": true, \"values\": [] }, \"yaxes\": [ { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true }, { \"format\": \"short\", \"label\": null, \"logBase\": 1, \"max\": null, \"min\": null, \"show\": true } ], \"yaxis\": { \"align\": false, \"alignLevel\": null } } ], \"refresh\": false, \"schemaVersion\": 18, \"style\": \"dark\", \"tags\": [ \"prometheus\", \"redis\" ], \"templating\": { \"list\": [ { \"allValue\": null, \"current\": { \"text\": \"192.168.101.68:9121\", \"value\": \"192.168.101.68:9121\" }, \"datasource\": \"Prometheus\", \"definition\": \"label_values(redis_connected_clients, instance)\", \"hide\": 0, \"includeAll\": false, \"label\": null, \"multi\": false, \"name\": \"addr\", \"options\": [], \"query\": \"label_values(redis_connected_clients, instance)\", \"refresh\": 1, \"regex\": \"\", \"skipUrlSync\": false, \"sort\": 0, \"tagValuesQuery\": \"\", \"tags\": [], \"tagsQuery\": \"\", \"type\": \"query\", \"useTags\": false } ] }, \"time\": { \"from\": \"2020-05-13T20:14:07.716Z\", \"to\": \"2020-05-15T20:14:07.716Z\" }, \"timepicker\": { \"refresh_intervals\": [ \"5s\", \"10s\", \"30s\", \"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"2h\", \"1d\" ], \"time_options\": [ \"5m\", \"15m\", \"1h\", \"6h\", \"12h\", \"24h\", \"2d\", \"7d\", \"30d\" ] }, \"timezone\": \"browser\", \"title\": \"Prometheus Redis\", } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/3rd/":{"url":"docs/monitoring/prometheus/3rd/","title":"常用软件接入Prometheus监控","keywords":"","body":" 第三方应用：MySQL，MongoDB，Redis，RabbitMQ，NginX等 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/3rd/mysql-monitor-steps.html":{"url":"docs/monitoring/prometheus/3rd/mysql-monitor-steps.html","title":"MySQL","keywords":"","body":"MySQL监控接入 Percona Monitoring and Management (PMM)是一款开源的MySQL、MongoDB性能监控工具，PMM客户端负责收集DB监控数据，PMM服务端从已连接的客户端拉取数据，并通过第三方软件Grafana展示图表。 安装pmm-client # 安装pmm-client yum install https://www.percona.com/downloads/pmm/1.1.1/binary/redhat/7/x86_64/pmm-client-1.1.1-1.x86_64.rpm 配置服务端 由服务端192.168.100.99管理数据库监控任务。 在mysql端执行： pmm-admin config --server 192.168.100.99 --bind-address= --client-address= --client-name= 示例： pmm-admin config --server 192.168.100.99 --bind-address=192.168.100.100 --client-address=192.168.100.100 --client-name=Production 执行后会保存到文件/usr/local/percona/pmm-client/pmm.yml： [root@b68-docker-prd pmm]# cat /usr/local/percona/pmm-client/pmm.yml server_address: 192.168.100.99 client_address: 192.168.100.100 bind_address: 192.168.100.100 client_name: Production 添加mysql pmm-admin add mysql --user --password --host --port 示例： pmm-admin add mysql --user root --password xxxxxx --host 192.168.100.100 --port 3306 client-production-3306 查看配置 [root@b68-docker-prd pmm]# pmm-admin list pmm-admin 1.1.1 PMM Server | 192.168.100.99 Client Name | Production Client Address | 192.168.100.100 Service Manager | linux-systemd -------------- ----------------------- ----------- -------- ---------------------------------- ------------------------ SERVICE TYPE NAME LOCAL PORT RUNNING DATA SOURCE OPTIONS -------------- ----------------------- ----------- -------- ---------------------------------- ------------------------ mysql:queries client-production-3306 - YES root:***@tcp(192.168.100.100:3306) query_source=perfschema linux:metrics client-production-3306 42000 YES - mysql:metrics client-production-3306 42002 YES root:***@tcp(192.168.100.100:3306) 图表 数据接入成功后 查询分析页面：http://192.168.100.99/qan/ 监控图表页面：http://192.168.100.99/graph 官方文档：https://www.percona.com/doc/percona-monitoring-and-management/conf-mysql.html Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/3rd/Prometheus-monitor-mysql-replication.html":{"url":"docs/monitoring/prometheus/3rd/Prometheus-monitor-mysql-replication.html","title":"MySQL主从同步","keywords":"","body":"Prometheus监控MySQL主从同步 利用node_exporter从*.prom文件读取指标数据 获取数据的脚本 getKeys.sh: #!/bin/sh mypath=$(cd `dirname $0`; pwd) cd $mypath echo \"executing all shell scripts ...\" for sh in `ls *.sh |grep -v $0` do echo \"will execute: ./$sh > ${sh}.prom\" eval \"./$sh > ${sh}.prom\" done 获取主从同步延迟数据的脚本pt-heart.sh： out=`pt-heartbeat -D your_dbname --table=heartbeat --check --host=x.x.x.x --port=xx --user=xx --password=xxxxxx --master-server-id=xxx --print-master-server-id` v=`echo \"$out\" |awk '{print $1}'` m=`echo \"$out\" |awk '{print $2}'` echo \"pt_heart{server_id=\\\"$m\\\"} $v\" 具体示例： out=`pt-heartbeat -D test_sync --table=heartbeat --check --host=10.1.7.211 --port=3306 --user=root --password=xxxxxx --master-server-id=100 --print-master-server-id` ... 脚本位置： [root@docker-dev node_exporter_keys]# pwd /srv/node_exporter_keys [root@docker-dev node_exporter_keys]# tree . . ├── getkeys.sh ├── procs.sh ├── procs.sh.prom ├── pt-heart.sh └── pt-heart.sh.prom 设置定时任务 设置crontab定时任务： * * * * * /srv/node_exporter_keys/getkeys.sh 输出的文件pt-heart.sh.prom： pt_heart{server_id=\"100\"} 0.00 修改node_exporter启动参数： 分两种情形： 通过docker运行node_exporter version: '3.0' services: node-exporter: image: prom/node-exporter volumes: - /proc:/host/proc:ro - /sys:/host/sys:ro - /:/rootfs:ro - /srv/node_exporter_keys:/var/extra_keys:ro # 映射到/var/extra_keys ports: - 9100:9100 command: - '--collector.textfile.directory=/var/extra_keys' # 指定从/var/extra_keys读取*.prom - '--path.procfs=/host/proc' - '--path.sysfs=/host/sys' - '--collector.filesystem.ignored-mount-points=\"^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)\"' - '--collector.filesystem.ignored-fs-types=\"^(sys|proc|auto|cgroup|devpts|ns|au|fuse\\.lxc|mqueue)(fs|)$$\" 通过supervisor运行node_exporter [program:node_exporter] command=/path/to/node_exporter --collector.textfile.directory=/srv/node_exporter_keys directory=/path/to user=root startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=50MB stdout_logfile_backups=3 stdout_logfile=/var/log/node_exporter.log 最后，访问相应的http://your-host:9100/metrics，查看是否有新增的指标名称pt_heart。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/3rd/mongodb-monitor-steps.html":{"url":"docs/monitoring/prometheus/3rd/mongodb-monitor-steps.html","title":"MongoDB","keywords":"","body":"MongoDB监控接入 Percona Monitoring and Management (PMM)是一款开源的MySQL、MongoDB性能监控工具，PMM客户端负责收集DB监控数据，PMM服务端从已连接的客户端拉取数据，并通过第三方软件Grafana展示图表。 安装pmm-client # 安装pmm-client yum install https://www.percona.com/downloads/pmm/1.1.1/binary/redhat/7/x86_64/pmm-client-1.1.1-1.x86_64.rpm 配置服务端 目前统一由PMM服务端10.1.100.200管理数据库监控任务。 在mysql端执行： pmm-admin config --server 10.1.100.200 --bind-address= --client-address= --client-name= 示例： pmm-admin config --server 10.1.100.200 --bind-address=10.1.7.211 --client-address=10.1.7.211 --client-name=Dev 执行后会保存到文件/usr/local/percona/pmm-client/pmm.yml： [root@b68-docker-prd pmm]# cat /usr/local/percona/pmm-client/pmm.yml server_address: 10.1.100.200 client_address: 10.1.7.211 bind_address: 10.1.7.211 client_name: Dev 添加mongodb [root@docker-dev pmm]# pmm-admin add mongodb --help Usage: pmm-admin add mongodb [name] [flags] Examples: pmm-admin add mongodb pmm-admin add mongodb --cluster bare-metal Flags: --cluster string cluster name --uri string MongoDB URI, format: [mongodb://][user:pass@]host[:port][/database][?options] (default \"localhost:27017\") 示例： pmm-admin add mongodb --cluster rs1 --uri mongodb://10.1.7.211:27017 mongodb-dev 查看配置 [root@docker-dev pmm]# pmm-admin list pmm-admin 1.1.1 PMM Server | 10.1.100.200 Client Name | Dev Client Address | 10.1.7.211 Service Manager | linux-systemd ---------------- ---------------- ----------- -------- ------------------------------ ------------------------ SERVICE TYPE NAME LOCAL PORT RUNNING DATA SOURCE OPTIONS ---------------- ---------------- ----------- -------- ------------------------------ ------------------------ ... mongodb:metrics mongodb-dev 42003 YES 10.1.7.211:27017 cluster=rs1 图表 数据接入成功后 监控图表页面：http://10.1.100.200/graph 官方文档：https://www.percona.com/doc/percona-monitoring-and-management/conf-mongodb.html Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/3rd/redis-monitor-steps.html":{"url":"docs/monitoring/prometheus/3rd/redis-monitor-steps.html","title":"Redis","keywords":"","body":"Redis监控接入 在Docker中运行的redis，用docker镜像版的redis_exporter更方便。也可以使用二进制版的redis_exporter。 Docker中的Redis 可通过docker镜像运行redis exporter： redis-expo: image: oliver006/redis_exporter ports: - 9121:9121 network_mode: host environment: REDIS_PASSWORD: \"xxxxxxxxxxxxxx\" SERVICE_TAGS: \"prometheus-target,redis-expo\" command: \"--redis.addr redis://127.0.0.1:6379\" VM安装的Redis # 安装redis_exporter wget https://github.com/oliver006/redis_exporter/releases/download/v1.0.0/redis_exporter-v1.0.0.linux-amd64.tar.gz tar -xf redis_exporter-v1.0.0.linux-amd64.tar.gz -C /srv/ 运行redis_exporter: nohup ./redis_exporter --redis.addr \"redis://127.0.0.1:6379\" --redis.password \"xxxxxxxxxx\" --web.listen-address \"0.0.0.0:9121\" & 2>&1 通过supervisor保持redis_exporter运行时，可作如下配置: [program:redis_exporter] command=redis_exporter directory=/srv/redis_exporter-v1.0.0.linux-amd64 user=root environment=REDIS_PASSWORD=\"xxxxxx\",REDIS_ADDR=\"redis://127.0.0.1:6379\",REDIS_EXPORTER_WEB_LISTEN_ADDRESS=\"0.0.0.0:9121\" startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=50MB stdout_logfile_backups=3 stdout_logfile=/var/log/redis_exporter.log 运行后，验证是否能输出redis监控数据。以192.168.100.200上的redis为例，打开http://192.168.100.200:9121/metrics，并搜索redis_connected_clients，非0正常，表明redis_exporter已连接上redis。 最后，需要将此接口注册到Consul以便Prometheus能自动添加此target。方法见应用接入说明。 图表 redis_exporter使用说明：https://github.com/oliver006/redis_exporter Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/3rd/rabbitmq-monitor-steps.html":{"url":"docs/monitoring/prometheus/3rd/rabbitmq-monitor-steps.html","title":"RabbitMQ","keywords":"","body":"RabbitMQ监控接入 在Docker中运行的rabbitmq，用docker镜像版的rabbitmq-exporter更方便。也可以使用二进制版的rabbitmq-exporter。 Docker中的RabbitMQ 可通过docker镜像运行rabbitmq exporter： rabbitmq_exporter: image: kbudde/rabbitmq-exporter ports: - 9429:9429 environment: SERVICE_TAGS: \"prometheus-target,rabbitmq-expo\" RABBIT_URL: \"http://127.0.0.1:15672\" RABBIT_USER: \"guest\" RABBIT_PASSWORD: \"guest\" PUBLISH_PORT: \"9429\" OUTPUT_FORMAT: \"JSON\" # LOG_LEVEL: \"debug\" network_mode: host VM安装的RabbitMQ 获取rabbitmq_exporter： # go编译rabbitmq_exporter go get https://github.com/kbudde/rabbitmq_exporter # 或者wget下载release的二进制文件包 https://github.com/kbudde/rabbitmq_exporter/releases/download/v0.29.0/rabbitmq_exporter-0.29.0.linux-amd64.tar.gz 运行rabbitmq_exporter: RABBIT_URL=\"http://127.0.0.1:15672\" RABBIT_USER=guest RABBIT_PASSWORD=guest ./rabbitmq_exporter 通过supervisor保持rabbitmq_exporter运行时，可作如下配置: [program:rabbitmq-expo] command=/srv/rabbitmq_exporter directory=/srv user=rabbitmq environment=RABBIT_USER=admin,RABBIT_PASSWORD=\"xxxxxx\",OUTPUT_FORMAT=JSON,PUBLISH_PORT=9429,RABBIT_URL=http://127.0.0.1:15672 startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=50MB stdout_logfile_backups=3 stdout_logfile=/var/log/rabbitmq-expo.log 运行后，检查是否能导出监控数据。以192.168.100.200上的rabbitmq为例，打开http://192.168.100.200:9429/metrics。 最后，需要将此接口注册到Consul以便Prometheus能自动添加此target。方法见应用接入说明。 图表 单节点rabbitmq： rabbitmq集群： rabbitmq_exporter使用说明：https://github.com/kbudde/rabbitmq_exporter Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/3rd/nginx-monitor-steps.html":{"url":"docs/monitoring/prometheus/3rd/nginx-monitor-steps.html","title":"NginX","keywords":"","body":"NginX监控 nginx需安装nginx-module-vts模块，然后通过nginx-vts-exporter输出监控指标。 nginx-module-vts模块 # 获取nginx-module-vts模块源码 cd /opt git clone https://github.com/vozlt/nginx-module-vts # nginx源码包 wget https://nginx.org/download/nginx-1.17.0.tar.gz tar -xf nginx-1.17.0.tar.gz cd nginx-1.17.0 # 编译nginx，加入nginx-module-vts模块 ./configure --add-module=/opt/nginx-module-vts --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail --with-mail_ssl_module --with-file-aio --with-ipv6 --with-cc-opt='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic' make && make install 配置nginx 修改nginx.conf http { ... vhost_traffic_status_zone; server { listen 8088; location /status { vhost_traffic_status_display; vhost_traffic_status_display_format html; } } ... } server配置示例 upstream jenkins { server 127.0.0.1:8080; } server { listen 80; server_name jenkins.keep.com; #uri访问统计 vhost_traffic_status_filter_by_set_key $uri uri::$server_name; # #国家/地区访问统计，无此模块已注释 # vhost_traffic_status_filter_by_set_key $geoip_country_code country::$server_name; # #UserAgent 统计 # vhost_traffic_status_filter_by_set_key $filter_user_agent agent::$server_name; vhost_traffic_status_filter_by_set_key $status $server_name; #http code统计 vhost_traffic_status_filter_by_set_key $upstream_addr upstream::backend; #后端转发统计 vhost_traffic_status_filter_by_set_key $remote_port client::ports::$server_name; #请求端口统计 vhost_traffic_status_filter_by_set_key $remote_addr client::addr::$server_name; #请求IP统计 #请求路径统计 location ~ ^/storage/(.+)/.*$ { set $volume $1; vhost_traffic_status_filter_by_set_key $volume storage::$server_name; } location / { proxy_pass http://jenkins; proxy_redirect default; } } 添加到系统服务 /etc/systemd/system/nginx.service: [Unit] Description=The nginx HTTP and reverse proxy server After=network.target remote-fs.target nss-lookup.target [Service] Type=forking PIDFile=/run/nginx.pid # Nginx will fail to start if /run/nginx.pid already exists but has the wrong # SELinux context. This might happen when running `nginx -t` from the cmdline. # https://bugzilla.redhat.com/show_bug.cgi?id=1268621 ExecStartPre=/usr/bin/rm -f /run/nginx.pid ExecStartPre=/usr/sbin/nginx -t ExecStart=/usr/sbin/nginx ExecReload=/bin/kill -s HUP $MAINPID KillSignal=SIGQUIT TimeoutStopSec=5 KillMode=process PrivateTmp=true [Install] WantedBy=multi-user.target ln -s /etc/systemd/system/nginx.service /etc/systemd/system/multi-user.target.wants/ 启动、检查、重新加载 systemctl start nginx # 修改过nginx配置后 nginx -t nginx -s reload 查看status 数据转换 通过nginx-vts-exporter将由nginx-module-vts模块提供的nginx监控数据转换成prometheus能直接使用的格式。 转换前：http://192.168.100.150:8088/status/format/json 转换后：http://192.168.100.150:9913/metrics wget https://github.com/hnlq715/nginx-vts-exporter/releases/download/v0.10.3/nginx-vts-exporter-0.10.3.linux-amd64.tar.gz tar -xf nginx-vts-exporter-0.10.3.linux-amd64.tar.gz chown -R nginx:nginx nginx-vts-exporter-0.10.3.linux-amd64 ln -s /srv/nginx-vts-exporter-0.10.3.linux-amd64/nginx-vts-exporter /usr/bin/ # 测试运行exporter nohup nginx-vts-exporter -nginx.scrape_uri=http://localhost:8088/status/format/json 可通过supervisor保持exporter在后台运行： [program:nginx_vts_exporter] command=/usr/bin/nginx-vts-exporter -nginx.scrape_uri=http://localhost:8088/status/format/json user=nginx startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=50MB stdout_logfile_backups=3 stdout_logfile=/var/log/nginx_vts_exporter.log 注册到consul 将nginx监控数据接口注册到consul，使prometheus能获取该target。 curl命令参考： curl http://192.168.100.140:8500/v1/agent/service/register -X PUT -i -H \"Content-Type:application/json\" -d '{ \"ID\": \"nginx_192.168.100.150\", \"Name\": \"nginx_192_168_100_150\", \"Tags\": [\"nginx\", \"development\", \"prometheus-target\"], \"Address\": \"192.168.100.150\", \"Port\": 9913, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"HTTP\": \"http://192.168.100.150:9913/metrics\", \"Interval\": \"15s\" }, \"IsDeleted\": false, \"Meta\": { \"version\": \"1.0\" }, \"EnableTagOverride\": false }' 为了统一管控，应按【应用接入说明】记录到配置仓库中。 注册成功后多了一条service记录： 图表 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/prometheus/self/prometheus-consul-guide.html":{"url":"docs/monitoring/prometheus/self/prometheus-consul-guide.html","title":"自研应用接入Prometheus监控","keywords":"","body":"自研应用接入Prometheus监控 Prometheus支持从Consul数据源自动发现要监控的服务并自动添加到Prometheus Targets。将各服务待监控指标以服务的形式注册到Consul（集群），便于统一管理维护。 前提条件 项目已集成prometheus exporter库，能提供prometheus支持的指标数据API。 步骤 以下以development环境的ETMS服务为例说明： 确认API正常 ETMS bizhost的metrics：http://192.168.100.145:8001/metrics 注册到Consul Consul服务注册——统一配置仓库：http://git.pro.keep.com/YH/ServiceRegistrationConsul 请基于个人分支提交PR ETMS bizhost相关配置的示例： 为了便于管理，可在ServiceRegistrationConsul/conf.d目录下新建一个目录etms。 新建文件ServiceRegistrationConsul/conf.d/etms/etms_bizhost.json： { \"ID\": \"id_dev_etms_bizhost\", \"Name\": \"dev_etms_bizhost\", \"Tags\": [\"etms\", \"bizhost\", \"development\", \"prometheus-target\"], \"Address\": \"192.168.100.145\", \"Port\": 8001, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"HTTP\": \"http://192.168.100.145:8001/metrics\", \"Interval\": \"15s\" }, \"Meta\": { \"version\": \"1.0\" }, \"IsDeleted\": false, \"EnableTagOverride\": false } 如果有多个属于etms的服务地址需要注册，比如还有ETMS webhost，那最好一起写到一个文件。 这时，可新建文件ServiceRegistrationConsul/conf.d/etms/etms.json： [{ \"ID\": \"id_dev_etms_bizhost\", \"Name\": \"dev_etms_bizhost\", \"Tags\": [\"etms\", \"bizhost\", \"development\", \"prometheus-target\"], \"Address\": \"192.168.100.145\", \"Port\": 8001, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"HTTP\": \"http://192.168.100.145:8001/metrics\", \"Interval\": \"15s\" }, \"Meta\": { \"version\": \"1.0\" }, \"IsDeleted\": false, \"EnableTagOverride\": false }, { \"ID\": \"id_dev_etms_webhost\", \"Name\": \"dev_etms_webhost\", \"Tags\": [\"etms\", \"webhost\", \"development\", \"prometheus-target\"], \"Address\": \"192.168.100.145\", \"Port\": 8001, \"Check\": { \"DeregisterCriticalServiceAfter\": \"90m\", \"HTTP\": \"http://192.168.100.145:9001/metrics\", \"Interval\": \"15s\" }, \"Meta\": { \"version\": \"1.0\" }, \"IsDeleted\": false, \"EnableTagOverride\": false }] 验证 查看Consul 在http://192.168.100.140:8500/ui/dc01/services上查看服务是否注册成功。按prometheus的设置，带有prometheus-target标签的服务项会被选择作为一个prometheus target。 查看Prometheus Targets http://prometheus.platform.development.keep.com/targets 指标说明 说明上述metrics接口提供的指标名称和值的含义。 告警条件说明 给出监控数据异常的界定条件，以便添加告警规则。 图表 以下自定义图表展示的是dotnet_collection_count_total的值的变化： dotnet_collection_count_total{generation=\"2\"} N #g2 dotnet_collection_count_total{generation=\"0\"} N #g0 dotnet_collection_count_total{generation=\"1\"} N #g1 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/zabbix/zabbix-intro.html":{"url":"docs/monitoring/zabbix/zabbix-intro.html","title":"Zabbix","keywords":"","body":"Zabbix的安装与使用 Linux环境：CentOS Linux release 7.5.1804 (Core) 安装 安装MySQL 安装mariadb yum -y install mariadb mariadb-server mariadb-devel systemctl start mariadb systemctl enable mariadb mysql_secure_installation # 通过mysql配置向导完成某些设置，也可通过修改表的方式完成设置 配置字符集 在/etc/my.cnf的[mysqld]下添加： init_connect='SET collation_connection = utf8_unicode_ci' init_connect='SET NAMES utf8' character-set-server=utf8 collation-server=utf8_unicode_ci skip-character-set-client-handshake 在/etc/my.cnf.d/client.cnf的[client]中添加： default-character-set=utf8 在/etc/my.cnf.d/mysql-clients.cnf的[mysql]中添加： default-character-set=utf8 重启使生效： systemctl restart mariadb 查看字符集： MariaDB [(none)]> show variables like \"%character%\"; +--------------------------+----------------------------+ | Variable_name | Value | +--------------------------+----------------------------+ | character_set_client | utf8 | | character_set_connection | utf8 | | character_set_database | utf8 | | character_set_filesystem | binary | | character_set_results | utf8 | | character_set_server | utf8 | | character_set_system | utf8 | | character_sets_dir | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ 8 rows in set (0.00 sec) MariaDB [(none)]> show variables like \"%collation%\"; +----------------------+-----------------+ | Variable_name | Value | +----------------------+-----------------+ | collation_connection | utf8_general_ci | | collation_database | utf8_general_ci | | collation_server | utf8_general_ci | +----------------------+-----------------+ 3 rows in set (0.00 sec) MySQL的安装及配置完成。 安装Zabbix Zabbix安装步骤见：CentOS 7安装zabbix 3.0，基于RPM方式安装Zabbix 3.0.25。 如果想通过编译源码安装，可参考Zabbix源码安装过程记录。 另外，安装zabbix_get以便测试： [root@VM_0_6_centos ~]# yum install zabbix-get # 添加监控项时，可在zabbix_server上通过zabbix_get测试命令是否有效 [root@VM_0_6_centos ~]# zabbix_get -s 188.131.133.107 -k vfs.fs.size[/,pused] 17.268719 在安装完zabbix之后，需在MySQL中创建zabbix数据库并导入初始数据表。 安装配置完成并启动所有服务后，以http:///zabbix访问zabbix控制面板，初始用户名/密码为：Admin/zabbix。 监控 以下添加一个被监控主机cvm001，监控其cpu、磁盘、80端口等。 主机 监控项 cvm001 cpu 平均负载、cpu 上下文切换频率 cvm001 根分区剩余空间百分比 cvm001 80端口状态（httpd服务） cvm001 mysql进程数 添加主机 【配置】>【主机】>【创建主机】： 添加监控项 【配置】>【主机】，在刚刚新加的主机所在行，【监控项】>【创建监控项】： 1）CPU负载 设置历史数据保留7天，并为cpu相关的监控定义了一个名为cpu的应用集。 2）CPU上下文切换次数 储存值选择“差量（每秒速率）”： 3）根分区使用率 \"pused\"表示已使用空间所占百分比。 4）mysql的进程 通过proc.num[mysqld,mysql]获取用户mysql的进程mysqld的数目： 5）80端口状态 查看值选择的是Service state，正常状态值是\"Up\"： 如下图，已添加完上面的5个监控项： 查看最新监控数据如下： 查看cpu上下文切换次数的【图形】： 图表标题中文字符显示不出来，是字体的原因，可自行替换，此处从略。 创建触发器 【配置】>【主机】，主机所在行的【触发器】>【创建触发器】： 自定义报警媒介 写一个模拟报警脚本如下，放置在/usr/lib/zabbix/alertscripts/myAlert.sh: #!/bin/sh alert_path=/var/www/html/myalert mkdir -p $alert_path gen_html() { echo \"\"\" Alert \"\"\" echo \"SENDTO:$1\" echo \"SUBJECT:$2\" echo \"MESSAGE:$3\" echo \"\"\" \"\"\" } gen_html $@ > $alert_path/1.html chmod -R 755 $alert_path 并修改/etc/zabbix/zabbix_server.conf配置： AllowRoot=1 User=root 用户-告警绑定 创建动作 模拟报警 模拟报警条件： # 假设当前占用率19%，写一个大小约1GB的文件，使根分区占用率 > 20% 达到触发报警 [root@VM_0_7_centos ~]# dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file 查看监控图形（设定的阈值是16%）： 查看触发器状态： 查看事件记录： 查看报警通知结果： 当报警解除后： 经测试，报警机制正常。正式环境中，配置内置的Email或SMS报警媒介，或使用自定义的邮件、微信、短信告警脚本等替代。 参考 zabbix 3.0 quickstart （End) Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/monitoring/zabbix/zabbix-discovery-rule.html":{"url":"docs/monitoring/zabbix/zabbix-discovery-rule.html","title":"自动发现","keywords":"","body":"通过Zabbix的自动发现（规则）自动创建监控项 下图是一个已配置并启用的自动发现规则: 应用到165.194这个主机后，自动发现的监控项： 服务端配置 创建Template 创建Discovery rule 键值readPorts跟被监控端配置的参数有关，下面再提。 创建监控项原型 宏引用符号{#SERVICE}和{#TCP_PORT}跟被监控端返回的json数据有关。net.tcp.listen[]表示监听目标机器的端口状态，返回值为0或1，0表示Down，1表示Up。另外，$1表示键值里的第一个参数，即。 创建触发器原型 添加完监控项和触发器原型的样子： 最后，添加主机并关联此模板。 被监控端配置 首先，看一下/etc/zabbix目录下的文件。scripts目录是新加的，zabbix_agentd.conf也作了修改。 使用自动发现功能，需要返回符号zabbix要求的json数据： 例如： { \"data\": [ { \"{#SERVICE}\": \"phjd_mysql\", \"{#TCP_PORT}\": \"28001\" }, { \"{#SERVICE}\": \"philips_taxfree_tuangou_payment_management\", \"{#TCP_PORT}\": \"16200\" } ] } 其形式大致如下： { \"data\": [ { \"{#KEY01}\": \"value01_01\", \"{#KEY02}\": \"value01_02\", \"{#KEY03}\": \"value01_03\", ... }, { \"{#KEY01}\": \"value02_01\", \"{#KEY02}\": \"value02_02\", \"{#KEY02}\": \"value02_03\", ... }, ... ] } readPorts.sh脚本的内容很简单，就是读取已准备好的json数据文件ports.json，作为返回给zabbix server的值： [root@172 scripts]# cat readPorts.sh #!/bin/sh mypath=$(cd `dirname $0`; pwd) cat $mypath/ports.json 为了返回给server端，需要再zabbix_agentd.conf中配置： 这样，server端就可以使用readPorts这个键值，以获取写在ports.json中的数据。readPorts下面定义的getPorts、getAllPorts是另外两个可用的自定义键值。 自动发现需监控的服务/端口，难点不在于读取，而在于自动生成json数据文件。此处的ports.json是根据ports.ini转换而来的。 ports.ini文件需人工填写： getPorts.py脚本如下，用于转换ports.ini为ports.json： #!/usr/bin/env python #coding:utf-8 import os, json, re mypath = os.path.dirname(os.path.realpath(__file__)) port_list = [] port_dict = {\"data\":None} with open('%s/ports.ini' % mypath, 'r') as f: for line in f.readlines(): line = line.strip() if line: try: port_srv = line.split(':') port_list.append({\"{#TCP_PORT}\": port_srv[1].strip(), \"{#SERVICE}\": port_srv[0].strip()}) except: pass port_dict[\"data\"] = port_list json_str = json.dumps(port_dict, sort_keys=True, indent=4) # json_str已是json字符串，但每行尾部有一个多余的空格，zabbix不接受，须删除行尾空格 p = re.compile(\"\\s+$\") for line in json_str.split('\\n'): ss = re.sub(p, \"\", line) print ss 转换ports.ini为json形式： 至于getAllPorts.py，它的功能是直接返回主机上实际开放的端口数据： （End) Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/log-analysis/":{"url":"docs/log-analysis/","title":"ELK","keywords":"","body":"日志分析 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/log-analysis/es-xpack.html":{"url":"docs/log-analysis/es-xpack.html","title":"X-pack权限控制版ES","keywords":"","body":"Elasticsearch（启用用户权限控制）镜像构建过程 自动构建&推送ES镜像至Harbor 环境变量： export Harbor_AddRess=x.x.x.x export Harbor_User=xxx export Harbor_Pwd=xxxxxx 构建&推送脚本： #!/bin/sh # 0 mypath=$(cd `dirname $0`; pwd) echo $mypath version=$1 version=${version:=7.5.0} echo \"version: $version\" mkdir $version es_path=$mypath/$version cd $es_path mkdir -p $es_path/{src,build,install} # 1 cd $es_path/src wget https://github.com/elastic/elasticsearch/archive/v${version}.tar.gz tar -xf v${version}.tar.gz cd $es_path/install wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${version}-linux-x86_64.tar.gz tar -xf elasticsearch-${version}-linux-x86_64.tar.gz # 2 cd $es_path/build # lib module ln -s $es_path/install/elasticsearch-${version}/lib . ln -s $es_path/install/elasticsearch-${version}/modules . # License.java find $es_path/src -name \"License.java\" | xargs -r -I {} cp {} . sed -i 's#this.type = type;#this.type = \"platinum\";#g' License.java sed -i 's#validate();#// validate();#g' License.java # compile License.java javac -cp \"`ls lib/elasticsearch-${version}.jar`:`ls lib/elasticsearch-x-content-${version}.jar`:`ls lib/lucene-core-*.jar`:`ls modules/x-pack-core/x-pack-core-${version}.jar`\" License.java echo \"=========================== License.java: in `pwd`/\" # 3 cd $es_path/build mkdir src && cd src find $es_path/install -name \"x-pack-core-${version}.jar\" | xargs -r -I {} cp {} . jar xvf x-pack-core-${version}.jar rm -f x-pack-core-${version}.jar cp -f ../License*.class org/elasticsearch/license/ jar cvf x-pack-core-${version}.jar . # 4 cat Dockerfile FROM elasticsearch:${version} COPY ./x-pack-core-${version}.jar /usr/share/elasticsearch/modules/x-pack-core/ EOF echo \"docker build elasticsearch by running:\" echo \"docker build -t elasticsearch:${version} .\" echo \"under current directory\" echo echo \"End 升级ELK ES镜像改用：lzzeng/es-xpack:7.5.1 设置Kibana中文: 修改Kibana配置文件kibana.yml server.name: kibana server.host: \"0\" elasticsearch.hosts: [ \"http://elasticsearch:9200\" ] xpack.monitoring.ui.container.elasticsearch.enabled: true elasticsearch.username: xxx elasticsearch.password: xxxxxx elasticsearch.requestTimeout: 90000 i18n.locale: \"zh-CN\" Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/log-analysis/es-account-manage.html":{"url":"docs/log-analysis/es-account-manage.html","title":"ELK账号权限分组管理","keywords":"","body":"ES分组权限管理的账号设置 基于X-Pack权限控制版ES，给不同项目组、用户分配不同的权限 创建角色 设置角色的ES权限 设置角色的Kibana权限 创建用户 新用户登录 测试ES索引权限 curl -XPUT -u yh:password \"http://es.platform.development.keep.com/yh-es-privilege-test/_doc/1?pretty\" -H 'Content-Type: application/json' -d ' { \"name\": \"John\" }' { \"error\" : { \"root_cause\" : [ { \"type\" : \"security_exception\", \"reason\" : \"action [indices:admin/create] is unauthorized for user [yh]\" } ], \"type\" : \"security_exception\", \"reason\" : \"action [indices:admin/create] is unauthorized for user [yh]\" }, \"status\" : 403 } 权限不够，不能创建该索引。 使用elastic账号查看已创建的role_yh具体有哪些权限： curl -XGET -u elastic:xxxxxx \"http://es.platform.development.keep.com/_xpack/security/role/role_yh\" { \"role_yh\": { \"cluster\": [], \"indices\": [ { \"names\": [ \"yh.*\" ], \"privileges\": [ \"all\" ], \"field_security\": { \"grant\": [ \"*\" ], \"except\": [] }, \"allow_restricted_indices\": false } ], \"applications\": [ { \"application\": \"kibana-.kibana\", \"privileges\": [ \"feature_discover.all\", \"feature_visualize.all\", \"feature_dashboard.all\", \"feature_dev_tools.all\", \"feature_indexPatterns.all\" ], \"resources\": [ \"space:default\" ] } ], \"run_as\": [], \"metadata\": {}, \"transient_metadata\": { \"enabled\": true } } } 由于给role_yh角色分配的ES索引权限是仅名称以yh.开头，故无权创建。改为创建yh.es.test再试则成功： { \"_index\" : \"yh.es.test\", \"_type\" : \"_doc\", \"_id\" : \"1\", \"_version\" : 1, \"result\" : \"created\", \"_shards\" : { \"total\" : 2, \"successful\" : 1, \"failed\" : 0 }, \"_seq_no\" : 0, \"_primary_term\" : 1 } 账号规划 根据以上，初步设置了以下账号： 角色 现有账号 ES索引权限 Kibana工作区权限 role_yh yh yh.* 发现 feature_discover.all可视化 feature_visualize.all仪表板 feature_dashboard.all开发工具 feature_dev_tools.all索引模式 eature_indexPatterns.all role_erp erp erp.k8s.erp\\ 同上 role_k8s k8s k8s* 同上 role_etms etms etms* 同上 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/log-analysis/elk-problems.html":{"url":"docs/log-analysis/elk-problems.html","title":"ELK若干问题","keywords":"","body":"ELK问题整理 输出日志多耗尽磁盘空闲空间 /usr/share/elasticsearch/config/log4j2.properties 置logLevel: off es默认分片数1000不够的问题 索引es报如下错误： { \"error\" : { \"root_cause\" : [ { \"type\" : \"validation_exception\", \"reason\" : \"Validation Failed: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum shards open;\" } ], \"type\" : \"validation_exception\", \"reason\" : \"Validation Failed: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum shards open;\" }, \"status\" : 400 } 解决：设置最大分片数3000 PUT /_cluster/settings { \"transient\": { \"cluster\": { \"max_shards_per_node\":3000 } } } docker-compose限制ELK的CPU、内存 version: '3.7' services: elasticsearch: image: ... ... deploy: resources: limits: cpus: '0.50' memory: 4096M ... 启动命令： docker-compose --compatibility up -d elasticsearch、kibana 通过NginX作Basic Auth认证 upstream kb443 { server 127.0.0.1:5601; } upstream es443 { server 127.0.0.1:9200; } server { listen 443 ssl; ssl_certificate /etc/letsencrypt/live/keep.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/keep.com/privkey.pem; server_name es.keep.com; location / { auth_basic \"secret\"; auth_basic_user_file /etc/nginx/nginx_passwd.kibana; proxy_pass http://es443; proxy_redirect off; proxy_buffering off; proxy_http_version 1.1; proxy_set_header Connection \"Keep-Alive\"; proxy_set_header Proxy-Connection \"Keep-Alive\"; } } server { listen 443 ssl; ssl_certificate /etc/letsencrypt/live/keep.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/keep.com/privkey.pem; server_name kibana.keep.com; root html; index index.html index.htm; access_log /var/log/nginx/kibana-443.access.log main; error_log /var/log/nginx/kibana-443.error.log ; location / { auth_basic \"secret\"; auth_basic_user_file /etc/nginx/nginx_passwd.kibana; proxy_pass http://kb443; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_redirect http://$host http://$host:$server_port; add_header Strict-Transport-Security \"max-age=31536000\"; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } 更新用户名/密码： # yum install httpd-tools -y htpasswd -c -b /etc/nginx/nginx_passwd.kibana $username $password Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/log-analysis/clean_elk_indices.html":{"url":"docs/log-analysis/clean_elk_indices.html","title":"清理ES索引","keywords":"","body":"清理ELK的旧索引 安装elasticsearch-curator pip install elasticsearch-curator 如果报错\"ERROR: Cannot uninstall 'PyYAML'. It is a distutils installed ...\" pip install pip==8.0.3 pip uninstall pyyaml pip install elasticsearch-curator 配置示例： ~/.curator/curator.yml client: hosts: - 10.1.7.211 port: 9200 url_prefix: use_ssl: False certificate: client_cert: client_key: aws_key: aws_secret_key: aws_region: ssl_no_validate: False http_auth: timeout: 100 master_only: False logging: loglevel: INFO logfile: logformat: default blacklist: [‘elasticsearch’] action文件配置： actions: 1: action: delete_indices description: >- Delete indices older than 10 days (based on index name). options: ignore_empty_list: True timeout_override: continue_if_exception: False disable_action: False filters: - filtertype: pattern kind: prefix value: '[a-z]' #匹配小写字母开头的index exclude: - filtertype: age source: name direction: older timestring: '%Y.%m.%d' unit: days unit_count: 10 exclude: 只按时间匹配： actions: 1: action: delete_indices description: >- Delete indices older than 8 days (based on index name). options: ignore_empty_list: True timeout_override: continue_if_exception: False disable_action: False filters: - filtertype: age source: name direction: older timestring: '%Y.%m.%d' unit: days unit_count: 8 exclude: 执行清理： # 命令用法 curator [--config ] [--dry-run] [root@test-vm150 opt]# curator ac.yml 2019-08-19 12:02:22,174 INFO Preparing Action ID: 1, \"delete_indices\" 2019-08-19 12:02:22,191 INFO GET http://10.1.7.211:9200/ [status:200 request:0.011s] 2019-08-19 12:02:22,191 INFO Trying Action ID: 1, \"delete_indices\": Delete indices older than 30 days (based on index name). ... 2019-08-19 12:02:22,762 INFO Deleting 7 selected indices: [u'yhcorests-log-2019.08.08', u'yhcorests-log-2019.08.09', u'yhweb.mdmadapter-log-2019.08.09', u'fms-log-2019.08.08', u'fms-log-2019.08.09', u'yh_onecardsolution-log-2019.08.08', u'yh_onecardsolution-log-2019.08.09'] 2019-08-19 12:02:22,762 INFO ---deleting index yhcorests-log-2019.08.08 2019-08-19 12:02:22,763 INFO ---deleting index yhcorests-log-2019.08.09 2019-08-19 12:02:22,763 INFO ---deleting index yhweb.mdmadapter-log-2019.08.09 2019-08-19 12:02:22,763 INFO ---deleting index fms-log-2019.08.08 2019-08-19 12:02:22,763 INFO ---deleting index fms-log-2019.08.09 2019-08-19 12:02:22,763 INFO ---deleting index yh_onecardsolution-log-2019.08.08 2019-08-19 12:02:22,763 INFO ---deleting index yh_onecardsolution-log-2019.08.09 2019-08-19 12:02:23,049 INFO DELETE http://10.1.7.211:9200/fms-log-2019.08.08,fms-log-2019.08.09,yh_onecardsolution-log-2019.08.08,yh_onecardsolution-log-2019.08.09,yhcorests-log-2019.08.08,yhcorests-log-2019.08.09,yhweb.mdmadapter-log-2019.08.09?master_timeout=100s [status:200 request:0.286s] ... Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/log-analysis/k8s-elk-auth-kibana-via-ad.html":{"url":"docs/log-analysis/k8s-elk-auth-kibana-via-ad.html","title":"K8s部署ELK并启用AD认证","keywords":"","body":"ELK部署至K8s并启用AD认证（单节点&多节点） 单节点、多节点示例 使用基于NFS的动态PV 启用Windows AD域账号认证 部署 镜像准备 docker push lzzeng/es-xpack:7.5.1 # xpack组件破解版 单节点 K8s ELK single-node # sh run-es.sh; sh run-kb.sh; sh run-logstash.sh 多节点 K8s ELK cluster # sh run-es.sh; sh run-kb.sh; sh run-logstash.sh AD域账号认证 es配置字典 es-cm2.yml: apiVersion: v1 kind: ConfigMap metadata: name: es-config namespace: elk labels: k8s-app: elasticsearch data: # 如果要初始绑定role_mapping.yml: # role_mapping.yml: |- # kibana_user: # - \"CN=elk_user,OU=系统帐号,DC=keep,DC=com\" # - \"CN=堡垒机,CN=Users,DC=keep,DC=com\" # superuser: # - \"CN=elk_admin,OU=系统帐号,DC=keep,DC=com\" elasticsearch.yml: |- cluster.name: \"docker-cluster\" network.host: 0.0.0.0 discovery.zen.minimum_master_nodes: 1 discovery.type: single-node xpack.security.authc.realms.active_directory: my_ad: order: 0 domain_name: keep.com url: ldap://192.168.100.20:389, ldap://192.168.100.29:389 bind_dn: xxx@keep.com bind_password: ****** load_balance: type: \"round_robin\" user_search: base_dn: \"dc=keep,dc=com\" filter: \"(&(objectClass=user)(sAMAccountName={0}))\" group_search: base_dn: \"dc=keep,dc=com\" # 如果要初始绑定role_mapping.yml: #files: # role_mapping: \"/usr/share/elasticsearch/config/role_mapping.yml\" #unmapped_groups_as_roles: true 另有如下命令添加bind_dn的密码： bin/elasticsearch-keystore add xpack.security.authc.realms.active_directory.my_ad.secure_bind_password 集群正常启动后，以管理账号在Kibana的开发工具界面调用ES的API作【用户-角色】后绑定的方法示例： # GET /_security/role_mapping/admins # DELETE /_security/role_mapping/admins # GET /_security/role_mapping/basic_users # DELETE /_security/role_mapping/basic_users # 对管理员的绑定 PUT /_security/role_mapping/admins { \"roles\" : [ \"kibana_user\", ... ], # 需要分配的角色 \"rules\" : { \"field\" : { \"groups\" : \"CN=elk_admin,OU=系统帐号,DC=keep,DC=com\" } }, \"enabled\": true } # 对普通用户的绑定 PUT /_security/role_mapping/basic_users { \"enabled\" : true, \"roles\" : [ \"kibana_user\" ], \"rules\" : { \"any\" : [ { \"field\" : { \"groups\" : \"CN=elk_user,OU=系统帐号,DC=keep,DC=com\" } }, { \"field\" : { \"dn\" : \"CN=堡垒机,CN=Users,DC=keep,DC=com\" } } ] }, \"metadata\" : { } } Logstash配置 kind: ConfigMap metadata: name: log-config namespace: elk apiVersion: v1 data: logstash.yml: |- http.host: \"0.0.0.0\" path.config: /usr/share/logstash/pipeline xpack.monitoring.enabled: false --- kind: ConfigMap metadata: name: log-pipeline namespace: elk apiVersion: v1 data: tcp-input.conf: |- input { tcp { port => 514 type => syslog } beats { port => 5044 type => beatlog } } # kafka-input.conf: |- # input { # kafka { # bootstrap_servers => \"bootstrap.kafka.svc.cluster.local:9092\" # topics => [\"fail2ban\", \"rsyslog\", \"dummy\", \"docker\", \"k8s\", \"twitter\"] # group_id => \"logstash_elastic\" # client_id => \"logstash\" # consumer_threads => 1 # auto_offset_reset => \"earliest\" # codec => plain { format => \"%{message}\" } # decorate_events => true # } # } elasticsearch-output.conf: |- output { elasticsearch { index => \"logstash-%{+YYYY.MM.dd}\" # hosts => \"elasticsearch:9200\" hosts => [\"http://es-cluster-0.elasticsearch-headless.elk:9200\", \"http://es-cluster-1.elasticsearch-headless.elk:9200\", \"http://es-cluster-2.elasticsearch-headless.elk:9200\"] user => \"elastic\" password => \"******\" } } 以NodePort方式暴露logstash服务， The Service \"logstash\" is invalid: spec.clusterIP: Invalid value: \"None\": may not be set to 'None' for NodePort services 此方式 clusterIP不能为None。 其它 Elasticsearch cluster host地址 ES的service描述文件如下： kind: Service apiVersion: v1 metadata: name: elasticsearch namespace: elk labels: app: elasticsearch spec: type: NodePort selector: app: elasticsearch ports: - port: 9200 name: es-http nodePort: 32200 --- apiVersion: v1 kind: Service metadata: name: elasticsearch-headless namespace: elk labels: app: elasticsearch spec: ports: - name: elasticsearch port: 9200 selector: app: elasticsearch clusterIP: None 在集群内部，从kibana访问es： sh-4.2$ curl http://es-cluster-1.elasticsearch.elk:9200 -u elastic:****** curl: (6) Could not resolve host: es-cluster-1.elasticsearch.elk; Unknown error # 负载节点每次都变化 sh-4.2$ curl http://elasticsearch:9200 -u elastic:****** { \"name\" : \"es-cluster-0\", \"cluster_name\" : \"es-cluster\", \"cluster_uuid\" : \"VP2AdLR9RzqPVz3tnmSdEw\", \"version\" : { \"number\" : \"7.5.1\", \"build_flavor\" : \"default\", \"build_type\" : \"docker\", \"build_hash\" : \"3ae9ac9a93c95bd0cdc054951cf95d88e1e18d96\", \"build_date\" : \"2019-12-16T22:57:37.835892Z\", \"build_snapshot\" : false, \"lucene_version\" : \"8.3.0\", \"minimum_wire_compatibility_version\" : \"6.8.0\", \"minimum_index_compatibility_version\" : \"6.0.0-beta1\" }, \"tagline\" : \"You Know, for Search\" } # 负载节点每次都变化 sh-4.2$ curl http://elasticsearch.elk:9200 -u elastic:****** { \"name\" : \"es-cluster-2\", \"cluster_name\" : \"es-cluster\", \"cluster_uuid\" : \"VP2AdLR9RzqPVz3tnmSdEw\", \"version\" : { \"number\" : \"7.5.1\", \"build_flavor\" : \"default\", \"build_type\" : \"docker\", \"build_hash\" : \"3ae9ac9a93c95bd0cdc054951cf95d88e1e18d96\", \"build_date\" : \"2019-12-16T22:57:37.835892Z\", \"build_snapshot\" : false, \"lucene_version\" : \"8.3.0\", \"minimum_wire_compatibility_version\" : \"6.8.0\", \"minimum_index_compatibility_version\" : \"6.0.0-beta1\" }, \"tagline\" : \"You Know, for Search\" } # 负载节点不常变化 sh-4.2$ curl http://elasticsearch-headless.elk:9200 -u elastic:****** { \"name\" : \"es-cluster-0\", \"cluster_name\" : \"es-cluster\", \"cluster_uuid\" : \"VP2AdLR9RzqPVz3tnmSdEw\", \"version\" : { \"number\" : \"7.5.1\", \"build_flavor\" : \"default\", \"build_type\" : \"docker\", \"build_hash\" : \"3ae9ac9a93c95bd0cdc054951cf95d88e1e18d96\", \"build_date\" : \"2019-12-16T22:57:37.835892Z\", \"build_snapshot\" : false, \"lucene_version\" : \"8.3.0\", \"minimum_wire_compatibility_version\" : \"6.8.0\", \"minimum_index_compatibility_version\" : \"6.0.0-beta1\" }, \"tagline\" : \"You Know, for Search\" } # 指定节点 sh-4.2$ curl http://es-cluster-0.elasticsearch-headless.elk:9200 -u elastic:****** { \"name\" : \"es-cluster-0\", \"cluster_name\" : \"es-cluster\", \"cluster_uuid\" : \"VP2AdLR9RzqPVz3tnmSdEw\", \"version\" : { \"number\" : \"7.5.1\", \"build_flavor\" : \"default\", \"build_type\" : \"docker\", \"build_hash\" : \"3ae9ac9a93c95bd0cdc054951cf95d88e1e18d96\", \"build_date\" : \"2019-12-16T22:57:37.835892Z\", \"build_snapshot\" : false, \"lucene_version\" : \"8.3.0\", \"minimum_wire_compatibility_version\" : \"6.8.0\", \"minimum_index_compatibility_version\" : \"6.0.0-beta1\" }, \"tagline\" : \"You Know, for Search\" } helm 安装ELK参考 # helm repo add stable https://kubernetes-charts.storage.googleapis.com helm repo add elastic https://helm.elastic.co # 获取helm chart helm fetch stable/elasticsearch # 修改后应用 helm install elastic/elasticsearch -n elk-es --namespace elk -f elasticsearch/values.yaml 强制删除pod： kubectl delete pod -n elk kibana-75cd5fcbc5-jxn44 --force --grace-period=0 AD认证：https://www.elastic.co/guide/en/elasticsearch/reference/7.x/active-directory-realm.html#ad-realm-configuration Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/log-analysis/k8s-elk-improvement.html":{"url":"docs/log-analysis/k8s-elk-improvement.html","title":"ELK部署整改","keywords":"","body":"ELK 整改优化 为了将测试环境、仿真环境和生产环境的ELK合并为一个部署到K8s中管理，作一些测试验证，并尝试集成STS单点登录。 测试NFS可用性 测试应用使用的MySQL数据目录是通过NFS挂载的，每GET请求一次 http://192.168.100.157:9000/visit/add/ 会新增一条记录到数据库。通过脚本每0.01秒请求一次，共请求10000次的过程中：当人为停止NFS服务时，MySQL数据目录挂载失效，导致请求接口无法访问；重新开启NFS服务后，恢复正常，并且最终记录总数一致。 NFS供应节点 [root@zabbix02 elk]# cat /etc/exports /testPV *(rw,sync) /helloPV *(rw,no_root_squash,async) 测试节点 [root@157-xxl-job testPV]# df -h Filesystem Size Used Avail Use% Mounted on ... 192.168.100.150:/helloPV 292G 42G 250G 15% /helloPV db: image: mysql:5.7 environment: TZ: 'Asia/Shanghai' MYSQL_ROOT_PASSWORD: qwerasdf MYSQL_DATABASE: testpv restart: always command: ['mysqld', '--character-set-server=utf8'] volumes: - \"/helloPV/db:/var/lib/mysql\" 查看数据库 mysql> select count(id) from visit_record; +-----------+ | count(id) | +-----------+ | 9999 | +-----------+ 1 row in set (0.00 sec) mysql> select * from visit_record limit 1; +----+----------------------+----------------------------+ | id | ip_addr | visit_date | +----+----------------------+----------------------------+ | 1 | 192.168.100.157:9000 | 2020-02-28 01:13:38.370327 | +----+----------------------+----------------------------+ 1 row in set (0.00 sec) mysql> select * from visit_record order by id desc limit 1; +------+----------------------+----------------------------+ | id | ip_addr | visit_date | +------+----------------------+----------------------------+ | 9999 | 192.168.100.157:9000 | 2020-02-28 01:18:10.755606 | +------+----------------------+----------------------------+ 1 row in set (0.00 sec) PV数据恢复验证 文档写入、更新 初始写入2个文档 curl -X PUT \"http://es.staging.keep.com/customer/_doc/1?pretty\" -H 'Content-Type: application/json' -u elastic:elastic -d ' { \"datetime\": \"2020-02-27 10:50:00\", \"name\": \"Jim Green\" }' curl -X PUT \"http://es.staging.keep.com/customer/_doc/2?pretty\" -H 'Content-Type: application/json' -u elastic:elastic -d ' { \"datetime\": \"2020-02-27 10:51:00\", \"name\": \"Jim Green2\" } 更新文档 curl -X PUT \"http://es.staging.keep.com/customer/_doc/1?pretty\" -H 'Content-Type: application/json' -u elastic:elastic -d ' { \"datetime\": \"2020-02-27 10:54:00\", \"name\": \"Jim Green3\" }' curl -X PUT \"http://es.staging.keep.com/customer/_doc/2?pretty\" -H 'Content-Type: application/json' -u elastic:elastic -d ' { \"datetime\": \"2020-02-27 10:54:02\", \"name\": \"Jim Green4\" } 增加2个文档 curl -X PUT \"http://es.staging.keep.com/customer/_doc/3?pretty\" -H 'Content-Type: application/json' -u elastic:elastic -d ' { \"datetime\": \"2020-02-27 10:58:00\", \"name\": \"Jim Green5\" }' curl -X PUT \"http://es.staging.keep.com/customer/_doc/4?pretty\" -H 'Content-Type: application/json' -u elastic:elastic -d ' { \"datetime\": \"2020-02-27 10:58:02\", \"name\": \"Jim Green6\" }' 修改请求的容量 NFS StorageClass Provider自动为ES创建的PV目录为： [root@zabbix02 ~]# ls /testPV/ yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1 不删PV仅修改编排的容量需求 # 原先20Gi volumeClaimTemplates: - metadata: name: es-data spec: storageClassName: \"managed-nfs-storage\" accessModes: [ \"ReadWriteOnce\" ] resources: requests: storage: 40Gi 重新部署ES [root@zabbix02 4cp]# kubectl apply -f es-ss.yml The StatefulSet \"elasticsearch\" is invalid: spec: Forbidden: updates to statefulset spec for fields other than 'replicas', 'template', and 'updateStrategy' are forbidden 因为是statefulset.apps，提示不能直接apply，先delete再apply [root@zabbix02 4cp]# kubectl delete -f es-ss.yml statefulset.apps \"elasticsearch\" deleted [root@zabbix02 4cp]# kubectl apply -f es-ss.yml statefulset.apps/elasticsearch created PV目录未变化，并且从Kibana查看数据还是容量变更前的样子 说明不删除已创建的PV情况下，修改请求PV容量值resources.requests.storage，不影响已有数据。 删PV重建ES [root@zabbix02 4cp]# sh run-es.sh down ingress.extensions \"elasticsearch\" deleted service \"elasticsearch\" deleted statefulset.apps \"elasticsearch\" deleted configmap \"es-config\" deleted secret \"rp-client-secret\" deleted [root@zabbix02 4cp]# kubectl delete pvc -n yhelk es-data-elasticsearch-0 persistentvolumeclaim \"es-data-elasticsearch-0\" deleted [root@zabbix02 4cp]# sh run-es.sh namespace/yhelk unchanged secret/rp-client-secret created configmap/es-config created statefulset.apps/elasticsearch created service/elasticsearch created ingress.extensions/elasticsearch created 删除PV后，PV目录被归档 [root@zabbix02 4cp]# ls /testPV/ archived-yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1 重建后，生成了新的PV目录 [root@zabbix02 4cp]# ls /testPV/ archived-yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1 yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1 显然，之前的保存的文档不在新目录中，查看Kibana也显示没有任何索引： 尝试恢复旧数据如下： 通过移动归档的PV目录替换现在使用的PV目录，并删除es的pod以使其被重新调度： [root@zabbix02 4cp]# mv /testPV/yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1/ /testPV/yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1.old [root@zabbix02 4cp]# ls /testPV/ archived-yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1 yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1.old [root@zabbix02 4cp]# mv /testPV/archived-yhelk-es-data-elasticsearch-0-pvc-94de2142-590a-11ea-ac5d-005056a941c1/ /testPV/yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1 [root@zabbix02 4cp]# ls /testPV/ yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1 yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1.old [root@zabbix02 4cp]# kubectl get pod -n yhelk NAME READY STATUS RESTARTS AGE elasticsearch-0 1/1 Running 0 7m17s kibana-6564b7c688-bvmf4 1/1 Running 0 61m [root@zabbix02 4cp]# kubectl delete pod -n yhelk elasticsearch-0 pod \"elasticsearch-0\" deleted [root@zabbix02 4cp]# kubectl get pod -n yhelk NAME READY STATUS RESTARTS AGE elasticsearch-0 1/1 Running 0 16s kibana-6564b7c688-bvmf4 1/1 Running 0 62m 待kibana重新连接es后，显示旧文档已恢复： 数据迁移到新的集群 创建一个新ELK环境 在另一个名称空间 yhelk2 再创建一个ELK环境： 对应的PV目录： 复制迁移数据 先删除刚创建出来的ES，仅保留PVC和PV。如果删除PVC（和PV），原数据（目录）会被归档，重新部署后会重建PV。 再将对应yhelk空间的原有ELK环境的PV目录复制一份替换新ELK环境的PV目录 mv /testPV/yhelk2-es-data-elasticsearch-0-pvc-a2488669-5929-11ea-ac5d-005056a941c1{,.old} cp -rp /testPV/yhelk-es-data-elasticsearch-0-pvc-cb8ea87c-5912-11ea-ac5d-005056a941c1 /testPV/yhelk2-es-data-elasticsearch-0-pvc-a2488669-5929-11ea-ac5d-005056a941c1 重建yhelk2空间的ES，因对应的PV目录名称不变，将会加载该目录中的数据。在Kibana中可以看到，新、旧环境ELK中的索引、文档是相同的： 这说明两个不同名称空间的ELK集群的数据，可以通过复制数据目录的方式从一个环境迁移到另一个。可以作出合理推测：1. 如果两个ES集群的节点数一样（对应的PV目录数一样），数据可以通过直接复制的方式迁移。2. ES对供应PV的NFS文件系统是无感知的，NFS文件系统自身扩容、缩容，只要满足pod需求，数据就可以正常使用。 ES账号设置 启用了AD认证后，除了几个内置的用户和已授权的AD账号外，新创建的用户（未被AD管理的）无法使用： { \"error\" : { \"root_cause\" : [ { \"type\" : \"security_exception\", \"reason\" : \"unable to authenticate user [etms_dev] for REST request [/dev.etms.abc/_doc/1?pretty]\", \"header\" : { \"WWW-Authenticate\" : \"Basic realm=\\\"security\\\" charset=\\\"UTF-8\\\"\" } } ], \"type\" : \"security_exception\", \"reason\" : \"unable to authenticate user [etms_dev] for REST request [/dev.etms.abc/_doc/1?pretty]\", \"header\" : { \"WWW-Authenticate\" : \"Basic realm=\\\"security\\\" charset=\\\"UTF-8\\\"\" } }, \"status\" : 401 } 用户组权限设置 只能设置两类权限 PUT /_security/role_mapping/admins { \"roles\" : [ \"superuser\" ], \"rules\" : { \"field\" : { \"groups\" : \"CN=elk_admin,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com\" } }, \"enabled\": true } PUT /_security/role_mapping/basic_users { \"enabled\" : true, \"roles\" : [ \"kibana_user\" ], \"rules\" : { \"any\" : [ { \"field\" : { \"groups\" : \"CN=elk_user,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com\" } } ] }, \"metadata\" : { } } 设置指定用户的权限 刚开始所有用户要么属于elk_admin组，要么属于elk_user组，并具有对应的两类权限。如果要进一步单独设置组内某个用户的权限，可按以下步骤进行： 先按传统方法添加一个包含所需权限的角色 在kibana手动创建一个与AD账号同名的用户，密码随意设置，并与刚刚创建的角色绑定 以该用户名及相应的AD密码登录Kibana即可发现权限已变更 # 查看、删除admins的role_mapping GET /_security/role_mapping/admins DELETE /_security/role_mapping/admins # 查看、删除basic_users的role_mapping GET /_security/role_mapping/basic_users DELETE /_security/role_mapping/basic_users PUT /_security/role_mapping/admins { \"roles\" : [ \"superuser\" ], \"rules\" : { \"field\" : { \"groups\" : \"CN=elk_admin,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com\" } }, \"enabled\": true } PUT /_security/role_mapping/basic_users { \"enabled\" : true, \"roles\" : [ \"kibana_user\" ], \"rules\" : { \"any\" : [ { \"field\" : { \"groups\" : \"CN=elk_user,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com\" } } ] }, \"metadata\" : { } } 索引名称规范 建议按 .[.][.]_ 的形式取索引名称，例如： dev.etms.webhost.error-log_2020.02.28 据以上，可以针对 项目组及个人设置ELK权限。比如设置ETMS组成员dev环境的权限： 创建角色role_etms_dev PUT /_security/role/role_etms_dev { \"cluster\" : [ ], \"indices\" : [ { \"names\" : [ \"dev.etms.*\" ], \"privileges\" : [ \"all\" ], \"field_security\" : { \"grant\" : [ \"*\" ], \"except\" : [ ] }, \"allow_restricted_indices\" : false } ], \"applications\" : [ { \"application\" : \"kibana-.kibana\", \"privileges\" : [ \"feature_discover.all\", \"feature_visualize.all\", \"feature_dashboard.all\", \"feature_dev_tools.all\", \"feature_indexPatterns.all\" ], \"resources\" : [ \"space:default\" ] } ], \"run_as\" : [ ], \"metadata\" : { }, \"transient_metadata\" : { \"enabled\" : true } } 创建etms组成员AD账号同名的ES账号并绑定角色 登录查看效果 ELK集成STS登录调试过程记录 因为ES不支持在配置文件中直接配置：rp.client_secret ，以及其它一些集成OpenID的参数设置不清晰，作了如下大量尝试： 使用配置字典的方式 OIDC realm配置到es-cm.yml apiVersion: v1 kind: ConfigMap metadata: name: es-config namespace: elk labels: k8s-app: elasticsearch data: #role_mapping.yml: |- # kibana_user: # - \"CN=elk_user,OU=系统帐号,DC=keep,DC=com\" # - \"CN=堡垒机,CN=Users,DC=keep,DC=com\" # superuser: # - \"CN=elk_admin,OU=系统帐号,DC=keep,DC=com\" elasticsearch.yml: |- cluster.name: \"docker-cluster\" network.host: 0.0.0.0 discovery.zen.minimum_master_nodes: 1 discovery.type: single-node xpack.security.authc.realms.active_directory: my_ad: order: 0 domain_name: keep.com url: ldap://192.168.100.120:389, ldap://192.168.100.129:389 bind_dn: xxx@keep.com bind_password: ****** load_balance: type: \"round_robin\" user_search: base_dn: \"dc=keep,dc=com\" filter: \"(&(objectClass=user)(sAMAccountName={0}))\" group_search: base_dn: \"dc=keep,dc=com\" #files: # role_mapping: \"/usr/share/elasticsearch/config/role_mapping.yml\" #unmapped_groups_as_roles: true xpack.security.authc.realms.oidc.oidc1: order: 2 rp.client_id: \"kibana\" # rp.client_secret: \"secret\" # rp.client_secret 不能这样写在配置文件，有下面报错信息 rp.response_type: code rp.requested_scopes: [openid,profile] rp.redirect_uri: \"http://kibana.staging.keep.com/api/security/v1/oidc\" rp.post_logout_redirect_uri: \"http://kibana.staging.keep.com/logged_out\" op.issuer: \"https://sts.keep.cn\" op.authorization_endpoint: \"http://sts.staging.keep.com/connect/authorize\" op.token_endpoint: \"http://sts.staging.keep.com/connect/token\" #op.userinfo_endpoint: \"http://sts.staging.keep.com/connect/userinfo\" #op.end_session_endpoint: \"http://sts.staging.keep.com/connect/endsession\" claims.principal: email_verified claim_patterns.principal: \"^([^@]+)@keep\\\\.com$\" kb-cm.yml xpack.security.authc.providers: [oidc, basic] xpack.security.authc.oidc.realm: \"oidc1\" server.xsrf.whitelist: [/api/security/v1/oidc, /logged_out] 错误信息如下： \"Caused by: java.lang.IllegalArgumentException: unknown setting [xpack.security.authc.realms.oidc.oidc1.op.end_session_endpoint] please check that any required plugins are installed, or check the breaking changes documentation for removed settings\", ... [xpack.security.authc.realms.oidc.oidc1.rp.client_secret] is a secure setting and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml\", ... 遇到的异常主要有： [xpack.security.authc.realms.oidc.oidc1.op.end_session_endpoint] please check that any required plugins are installed, or check the breaking changes documentation for removed settings\" Setting [xpack.security.authc.realms.oidc.oidc1.rp.client_secret] is a secure setting and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml java.lang.IllegalStateException: security initialization failed\" The configuration setting [xpack.security.authc.realms.oidc.oidc1.rp.client_secret] is required\" 使用环境变量+保密字典的方式 apiVersion: v1 kind: Secret metadata: name: rp-client-secret type: Opaque data: xpack.security.authc.realms.oidc.oidc1.rp.client_secret: c2VjcmV0Cg== env: - name: \"xpack.security.authc.realms.oidc.oidc1.rp.client_secret\" valueFrom: secretKeyRef: name: rp-client-secret key: xpack.security.authc.realms.oidc.oidc1.rp.client_secret 报错同上，失败 initContainers方式 spec: initContainers: - image: lzzeng/es-xpack:7.5.1 name: inites command: - sh - -c - | echo -e \"y\\nsecret\" | /usr/share/elasticsearch/bin/elasticsearch-keystore add --stdin xpack.security.authc.realms.oidc.oidc1.rp.client_secret exit 0 volumeMounts: - name: config subPath: elasticsearch.keystore mountPath: /usr/share/elasticsearch/config/elasticsearch.keystore 企图通过initContainer与es共享配置的方式设置rp.client_secret，initContainer正常初始化后，es pod异常退出，主要错误原因如下： [root@zabbix02 4cp-err]# kubectl logs -f -n yhelk elasticsearch-0 Exception in thread \"main\" java.lang.IllegalStateException: unable to read from standard input; is standard input open and a tty attached? at org.elasticsearch.cli.Terminal$SystemTerminal.readText(Terminal.java:207) at org.elasticsearch.cli.Terminal.promptYesNo(Terminal.java:140) at org.elasticsearch.common.settings.CreateKeyStoreCommand.execute(CreateKeyStoreCommand.java:43) at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:125) at org.elasticsearch.cli.MultiCommand.execute(MultiCommand.java:77) at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:125) at org.elasticsearch.cli.Command.main(Command.java:90) at org.elasticsearch.common.settings.KeyStoreCli.main(KeyStoreCli.java:41) 失败 直接修改es镜像的方式 直接修改es镜像，在镜像中生成elasticsearch.keystore，并完成其它配置。 FROM lzzeng/es-xpack:7.5.1 ENV RP_CLIENT_SECRET secret ADD elasticsearch.yml /usr/share/elasticsearch/config/ RUN echo -e \"y\\n${RP_CLIENT_SECRET}\" | /usr/share/elasticsearch/bin/elasticsearch-keystore add --stdin xpack.security.authc.realms.oidc.oidc1.rp.client_secret; /usr/share/elasticsearch/bin/elasticsearch-keystore list > /opt/elasticsearch.keystore elasticsearch.yml: cluster.name: \"docker-cluster\" network.host: 0.0.0.0 discovery.zen.minimum_master_nodes: 1 discovery.type: single-node xpack.security.authc.realms.active_directory: my_ad: order: 0 domain_name: keep.com url: ldap://192.168.100.120:389, ldap://192.168.100.129:389 bind_dn: xxx@keep.com bind_password: xxxxxx load_balance: type: \"round_robin\" user_search: base_dn: \"dc=keep,dc=com\" filter: \"(&(objectClass=user)(sAMAccountName={0}))\" group_search: base_dn: \"dc=keep,dc=com\" #files: # role_mapping: \"/usr/share/elasticsearch/config/role_mapping.yml\" #unmapped_groups_as_roles: true xpack.security.authc.realms.oidc.oidc1: order: 2 rp.client_id: \"kibana\" rp.response_type: code rp.requested_scopes: [openid, profile] rp.redirect_uri: \"http://kibana.staging.keep.com/api/security/v1/oidc\" op.issuer: \"https://sts.keep.cn\" op.authorization_endpoint: \"http://sts.staging.keep.com/connect/authorize\" op.token_endpoint: \"http://sts.staging.keep.com/connect/token\" claims.principal: email_verified claim_patterns.principal: \"^([^@]+)@keep\\\\.com$\" 重新部署，报错如下： \"Caused by: org.elasticsearch.common.settings.SettingsException: found settings for the realm [oidc1] (with type [oidc]) in the secure settings (elasticsearch.keystore), but this realm does not have any settings in elasticsearch.yml. Please remove these settings from the keystore, or update their names to match one of the realms that are defined in elasticsearch.yml - [xpack.security.authc.realms.oidc.oidc1.rp.client_secret]\", 失败 postStart方式 containers: - image: ... lifecycle: postStart: exec: command: - sh - -c - | rm -f /usr/share/elasticsearch/config/elasticsearch.keystore* echo -e \"y\\nsecret\" | /usr/share/elasticsearch/bin/elasticsearch-keystore add --stdin xpack.security.authc.realms.oidc.oidc1.rp.client_secret exit 0 再反复根据错误提示修改配置字典，报错信息有： \"Caused by: org.elasticsearch.common.settings.SettingsException: The configuration setting [xpack.security.authc.realms.oidc.oidc1.op.jwkset_path] is required\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.require(OpenIdConnectRealm.java:329) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.buildOpenIdConnectProviderConfiguration(OpenIdConnectRealm.java:283) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.(OpenIdConnectRealm.java:105) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.InternalRealms.lambda$getFactories$7(InternalRealms.java:119) ~[?:?]\", \"Caused by: org.elasticsearch.common.settings.SettingsException: The configuration setting [xpack.security.authc.realms.oidc.oidc1.rp.client_secret] is required\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.buildRelyingPartyConfiguration(OpenIdConnectRealm.java:259) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.(OpenIdConnectRealm.java:104) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.InternalRealms.lambda$getFactories$7(InternalRealms.java:119) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.Realms.initRealms(Realms.java:218) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.Realms.(Realms.java:72) ~[?:?]\", \"Caused by: java.lang.IllegalStateException: OpenID Connect Realm requires that the token service be enabled (xpack.security.authc.token.enabled)\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.(OpenIdConnectRealm.java:114) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.InternalRealms.lambda$getFactories$7(InternalRealms.java:119) ~[?:?]\", {\"type\": \"server\", \"timestamp\": \"2020-02-27T01:47:32,863Z\", \"level\": \"WARN\", \"component\": \"o.e.b.ElasticsearchUncaughtExceptionHandler\", \"cluster.name\": \"docker-cluster\", \"node.name\": \"elasticsearch-0\", \"message\": \"uncaught exception in thread [main]\", \"stacktrace\": [\"org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: security initialization failed\", \"at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:163) ~[elasticsearch-7.5.1.jar:7.5.1]\", ... \"Caused by: java.lang.IllegalStateException: Unable to create a IDTokenValidator instance\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectAuthenticator.createIdTokenValidator(OpenIdConnectAuthenticator.java:619) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectAuthenticator.(OpenIdConnectAuthenticator.java:143) ~[?:?]\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectRealm.(OpenIdConnectRealm.java:116) ~[?:?]\", \"Caused by: java.lang.IllegalStateException: security initialization failed\", ... \"Caused by: java.lang.IllegalStateException: Unable to create a IDTokenValidator instance\", \"at org.elasticsearch.xpack.security.authc.oidc.OpenIdConnectAuthenticator.createIdTokenValidator(OpenIdConnectAuthenticator.java:619) ~[?:?]\", ... \"Caused by: java.nio.file.NoSuchFileException: /usr/share/elasticsearch/config/oidc/jwkset.json\", \"at sun.nio.fs.UnixException.translateToIOException(UnixException.java:92) ~[?:?]\", op.jwkset_path The path to a file or a URL containing a JSON Web Key Set with the key material that the OpenID Connect Provider uses for signing tokens and claims responses. 当前错误原因：缺少JSON Web密钥集的文件或URL，需由STS提供 op.jwkset_path 信息，以进一步尝试。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/log-analysis/elk-grafana.html":{"url":"docs/log-analysis/elk-grafana.html","title":"使用Grafana","keywords":"","body":"ELK - Grafana图表 配置数据源 示例： 安装piechart控件 grafana-cli plugins install grafana-piechart-panel 自定义图表 以其中Security日志表为例，配置如下： 识图 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/log-analysis/es-api-memo.html":{"url":"docs/log-analysis/es-api-memo.html","title":"ES APIs","keywords":"","body":"常用的几个ES设置API PUT /_settings { \"index\" : { \"number_of_replicas\" : 0 } } PUT /_cluster/settings { \"transient\": { \"cluster\": { \"max_shards_per_node\": 4096 } } } GET /_cluster/state?pretty GET /_cat/indices?v GET /_cluster/health?pretty GET /_xpack/security/role/role_dev GET /_security/role/role_dev PUT /_security/role/role_dev { \"indices\": [ { \"names\": [ \"dev.*\" ], \"privileges\": [ \"all\" ], \"field_security\": { \"grant\": [ \"*\" ], \"except\": [] }, \"allow_restricted_indices\": false } ], \"applications\": [ { \"application\": \"kibana-.kibana\", \"privileges\": [ \"feature_discover.all\", \"feature_visualize.all\", \"feature_dashboard.all\", \"feature_dev_tools.all\", \"feature_indexPatterns.all\" ], \"resources\": [ \"space:default\" ] } ], \"run_as\": [], \"metadata\": {}, \"transient_metadata\": { \"enabled\": true } } PUT /dev.a_2020.02.28/_doc/1 { \"datetime\": \"2020-02-28T12:47:00\", \"msg\": \"dev.a 1\" } GET /dev.a_2020.02.28/_search { \"query\": { \"\" \"regexp\": { \"msg\": \".*1\" }} } GET /_security/role_mapping/admins DELETE /_security/role_mapping/admins GET /_security/role_mapping/basic_users DELETE /_security/role_mapping/basic_users PUT /_security/role_mapping/admins { \"roles\" : [ \"superuser\" ], \"rules\" : { \"field\" : { \"groups\" : \"CN=elk_admin,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com\" } }, \"enabled\": true } PUT /_security/role_mapping/basic_users { \"enabled\" : true, \"roles\" : [ \"role_default\" ], \"rules\" : { \"any\" : [ { \"field\" : { \"groups\" : \"CN=elk_user,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com\" } }, { \"field\" : { \"groups\" : \"CN=elk_admin,OU=Elasticsearch,OU=系统帐号,DC=keep,DC=com\" } } ] }, \"metadata\" : { } } Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/cicd/":{"url":"docs/cicd/","title":"CI/CD","keywords":"","body":"持续集成 GitLab CI/CD ... Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/cicd/gitlab/":{"url":"docs/cicd/gitlab/","title":"GitLab CI/CD","keywords":"","body":" GitLab CI/CD是GitLab内置的工具，用于项目持续集成、持续部署。GitLab CI/CD 由位于代码仓库根目录的名为.gitlab-ci.yml的文件配置。而此文件中设置的脚本由GitLab Runner执行。 本书 通过GitLab CI/CD自动发布： Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/cicd/gitlab/gitlab-runner.html":{"url":"docs/cicd/gitlab/gitlab-runner.html","title":"GitLab Runner","keywords":"","body":"添加Gitlab Runner 启动gitlab-runner（提供自动创建、销毁runner的服务） docker run -d --name gitlab-runner --restart always \\ -v /srv/gitlab-runner/config:/etc/gitlab-runner \\ -v /var/run/docker.sock:/var/run/docker.sock \\ gitlab/gitlab-runner:latest 注册runner gitlab-runner register -n \\ --url http://git.pro.keep.com/ \\ --registration-token your-token*** \\ --executor docker \\ --description \"Docker in Docker Runner\" \\ --docker-image alpine:latest \\ --tag-list \"dind-v19\" 查看注册后生成的/etc/gitlab-runner/config.toml： [[runners]] name = \"Docker in Docker Runner\" url = \"http://git.pro.keep.com/\" token = \"xxxxx\" executor = \"docker\" [runners.custom_build_dir] [runners.docker] tls_verify = false image = \"alpine:latest\" privileged = false disable_entrypoint_overwrite = false oom_kill_disable = false disable_cache = false volumes = [\"/cache\"] shm_size = 0 [runners.cache] [runners.cache.s3] [runners.cache.gcs] [runners.custom] run_exec = \"\" gitlab cicd日志： Running with gitlab-runner 12.1.0 (de7731dd) on Docker in Docker Runner PdsMyiEk Using Docker executor with image docker:stable ... Pulling docker image docker:stable ... Using docker image sha256:9a38a85b1e4e7bb53b7c7cc45afff6ba7b1cdfe01b9738f36a3b4ad0cdb10b00 for docker:stable ... Running on runner-PdsMyiEk-project-238-concurrent-0 via 521aa7f3c946... Fetching changes... Initialized empty Git repository in /builds/devops/docs/.git/ Created fresh repository. From http://git.pro.keep.com/devops/docs - [new branch] master -> origin/master Checking out 78455dad as master... Skipping Git submodules setup $ docker info Client: Debug Mode: false Server: ERROR: Cannot connect to the Docker daemon at tcp://docker:2375. Is the docker daemon running? errors pretty printing info ERROR: Job failed: exit code 1 要支持docker in docker，改为： [[runners]] name = \"Docker in Docker Runner\" url = \"http://git.pro.keep.com/\" token = \"PdsMyiEkyfbPsVZgboPd\" executor = \"docker\" [runners.custom_build_dir] [runners.docker] tls_verify = false image = \"alpine:latest\" privileged = true disable_entrypoint_overwrite = false oom_kill_disable = false disable_cache = false volumes = [\"/cache\", \"/var/run/docker.sock:/var/run/docker.sock\", \"/etc/default/docker:/etc/default/docker\", \"/etc/docker/daemon.json:/etc/docker/daemon.json\"] shm_size = 0 [runners.cache] [runners.cache.s3] [runners.cache.gcs] [runners.custom] run_exec = \"\" Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/cicd/gitlab/gitlab-cicd.html":{"url":"docs/cicd/gitlab/gitlab-cicd.html","title":"GitLab CI/CD","keywords":"","body":"Gitlab CI -- gitlab ci 配置文件 Gitlab CI （持续集成）自动构建任务需编写配置文件 .gitlab-ci.yml 以本书的.gitlab-ci.yml为例： stages: - build - deploy build: image: docker:stable stage: build tags: - dind-v19 script: - docker info - image_name=lzzeng/docs:latest - docker build -t $image_name . - docker login $Harbor_AddRess -u $Harbor_User -p $Harbor_Pwd - docker push $image_name only: - master # this job will affect only the 'master' branch ansible-docker: image: ansible-alpine:2.8.0 stage: deploy tags: - dind-v19 script: - echo \"GITBOOK_HOST is $GITBOOK_HOST_DEV\" - echo \"$SSH_PRIVATE_KEY_DEV\" > ~/.key - chmod 600 ~/.key - echo \"$ANSIBLE_CFG_CONTENT\" > ~/.ansible.cfg - ansible-playbook -i \"$GITBOOK_HOST_DEV,\" --private-key ~/.key -u root deploy/inDocker.yml 解释： stages 段落表示有 有两个构建阶段，标识分别是build 和 deploy build段落，stage域（或属性）的值为 build, 表示这段脚本是上述build的具体执行过程 tags域为 dind-v19， 表示本阶段构建选择tag为dind-v19的gitlab runner，这是事先已注册的一个允许构建docker镜像的执行器，且这个执行器自身也是docker容器，即 docker in docker (dind） build的script段：docker build 构建镜像 -> docker login 登录Harbor -> docker push 推送镜像至Harbor only master 表示只接受master分支更新后触发CI ansible-docker阶段的作用是远程登录目标机器拉取镜像、创建并运行容器 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/config-management/":{"url":"docs/config-management/","title":"CMDB","keywords":"","body":"配置管理 配置管理工具可以提高应用部署和变更的效率，还可以让这些流程变得可重用、可扩展、可预测，甚至让它们维持在期望的状态，从而让资产的可控性提高。 使用配置管理工具的优势还包括： 让代码遵守编码规范，提高代码可读性； 具有 幂等性(Idempotency)，也就是说，无论执行多少次重复的配置管理操作，得到的结果都是一致的； 分布式的设计可以方便地管理大量的远程服务器。 配置管理工具主要分为 拉取(pull)模式和 推送(push)模式。拉取模式是指安装在各台服务器上的 代理(agent)定期从 中央存储库(central repository)拉取最新的配置并应用到对应的服务器上；而推送模式则由 中央服务器(central server)的中央服务器会触发其它受管服务器的更新。 下列是几款开源配置管理工具，全都具有开源许可证、使用外部配置文件、支持无人值守运行、可以通过脚本自定义运行。 Ansible “Ansible 是一个极其简洁的 IT 自动化平台，可以让你的应用和系统以更简单的方式部署。不需要安装任何代理，只需要使用 SSH 的方式和简单的语言，就可以免去脚本或代码部署应用的过程。”——GitHub Ansible 代码库 由于 Ansible 不需要代理，因此对服务器的资源消耗会很少。Ansible 默认使用的推送模式需要借助 SSH 连接，但 Ansible 也支持拉取模式。剧本 可以使用最少的命令集编写，当然也可以扩展为更加精细的自动化任务，包括引入角色、变量和其它人写的模块。 Puppet “Puppet 是一个可以在 Linux、Unix 和 Windows 系统上运行的自动化管理引擎，它可以根据集中的规范来执行诸如添加用户、安装软件包、更新服务器配置等等管理任务。”——GitHub Puppet 代码库 官网 文档 社区 Puppet 作为一款面向运维工程师和系统管理员的工具，在更多情况下是作为配置管理工具来使用。它通过客户端-服务端的模式工作，使用代理从主服务器获取配置指令。 Puppet 使用 声明式语言(declarative language)或 Ruby 来描述系统配置。它包含了不同的模块，并使用 清单文件(manifest files)记录期望达到的目标状态。Puppet 默认使用推送模式，但也支持拉取模式。 Salt “为大规模基础结构或应用程序实现自动化管理的软件。”——GitHub Salt 代码库 官网 文档 社区 Salt 的专长就是快速收集数据，即使是上万台服务器也能够轻松完成任务。它使用 Python 模块来管理配置信息和执行特定的操作，这些模块可以让 Salt 实现所有远程操作和状态管理。但配置 Salt 模块对技术水平有一定的要求。 Salt 使用客户端-服务端的结构（Salt minions 是客户端，而 Salt master 是服务端），并以 Salt 状态文件记录需要达到的目标状态。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/config-management/ansible-tower.html":{"url":"docs/config-management/ansible-tower.html","title":"Ansible Tower","keywords":"","body":"Ansible Tower Ansible Tower (以前叫’AWX’)是能够帮助任何IT团队更容易使用Ansible的解决方案。该方案基于web。 Tower允许对用户进行权限控制，即使某用户不能传送某SSH凭证，你也可以通过Tower来对该用户共享该凭证。我们可以通过图形化界面来管理Inventory，也可以对各种各样的云资源做同步。Tower可以记录所有job的日志，也可以与LDAP集成，并且拥有强大的可浏览的REST API。Tower也提供了命令行工具，可以与Jenkins轻松集成。Provisioning回调对自动伸缩拓扑图提供了强大的支持。 Tower的免费版本最多支持10个节点。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/config-management/bk-cmdb.html":{"url":"docs/config-management/bk-cmdb.html","title":"BlueKing","keywords":"","body":" 蓝鲸配置平台（蓝鲸CMDB）是一个面向资产及应用的企业级配置管理平台。 蓝鲸配置平台提供了全新自定义模型管理，用户不仅可以方便地实现内置模型属性的拓展，同时也能够根据不同的企业需求随时新增模型和关联关系，把网络、中间件、虚拟资源等纳入到CMDB的管理中。除此之外还增加了更多符合场景需要的新功能：机器数据快照、数据自动发现、变更事件主动推送、更加精细的权限管理、可拓展的业务拓扑等功能。 在技术构建上，架构的核心聚焦于资源，我们把CMDB管理的原子资源分为主机、进程和通用对象三种类型，并构建了对这些资源的原子操作层。在这些原子操作之上，我们构建了更贴近用户操作的场景层，场景层通过对不同资源的组合操作来完成用户的请求。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/task-scheduling/":{"url":"docs/task-scheduling/","title":"简介","keywords":"","body":"任务调度 分布式调度在互联网企业中占据着十分重要的作用，尤其是电子商务领域，由于存在数据量大、高并发的特点，对数据处理的要求较高，既要保证高效性，也要保证准确性和安全性，相对比较耗时的业务逻辑往往会从中剥离开来进行异步处理。 . 下列是几款优秀和极具潜力的国产开源分布式任务调度系统： opencron opencron 是一个功能完善且通用的开源定时任务调度系统，拥有先进可靠的自动化任务管理调度功能，提供可操作的 web 图形化管理满足多种场景下各种复杂的定时任务调度，同时集成了 linux 实时监控、webssh 等功能特性。 LTS LTS，light-task-scheduler，是一款分布式任务调度框架, 支持实时任务、定时任务和 Cron 任务。有较好的伸缩性和扩展性，提供对 Spring 的支持（包括 Xml 和注解），提供业务日志记录器。支持节点监控、任务执行监、JVM 监控，支持动态提交、更改、停止任务。 XXL-JOB XXL-JOB 是一个轻量级分布式任务调度框架，支持通过 Web 页面对任务进行 CRUD 操作，支持动态修改任务状态、暂停/恢复任务，以及终止运行中任务，支持在线配置调度任务入参和在线查看调度结果。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/task-scheduling/xxl-job.html":{"url":"docs/task-scheduling/xxl-job.html","title":"XXL-JOB","keywords":"","body":"xxl-job 新增执行器 编译执行器项目 源码：https://github.com/xuxueli/xxl-job/ xxl-job-executor-sample是通过源码配置、编译后的组件xxl-job-executor-sample-springboot运行时提供的一个server，源码中修改的位置如下： 执行mvn clean package编译打包可生成jar文件 然后，通过supervisor使其在后台持续运行。 添加执行器到xxl-job-admin 注意：AppName与编译源码时配置的appname一致，才可以自动获取机器地址（端口）。否则，手动录入。 添加示例任务 任务设置 0 * * * * ? *表示每分钟（0秒时）调度一次，因间隔短，不设置任务超时及失败重试。任务参数内填多行也是作为一个参数（$1）传递给脚本的。路由策略“第一个”表示总是在第一个OnLine机器上执行。 该任务的示例脚本如下： #!/bin/bash echo \"xxl-job: hello shell\" echo \"脚本位置：$0\" echo \"任务参数：$1\" echo \"分片序号 = $2\" echo \"分片总数 = $3\" failed=0 succeed=0 failed_urls=\"\" for url in $1 # 对每一行的url do echo \"current url: [$url]\" status_code=$(curl -s -o /dev/null -w \"%{http_code}\" $url) # 检测http响应状态码 echo \"status_code: $status_code\" if [ \"$status_code\" -ne 200 ]; then echo \"Failed: Access $url failed.\" failed_urls=\"$failed_urls,$url\" let failed=failed+1 # 失败+1 else let succeed=succeed+1 # 成功+1 fi done echo \"Good bye!\" echo \"Total: $failed failed $succeed succeed\" # 日志中打印统计结果 if [ $failed -lt 0 ]; then echo \"Failed Urls: $failed_urls\" fi exit $failed # 退出状态值，非0表示失败 如果执行状态失败，将发出报警邮件。 Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/task-scheduling/upgrade-xxl-job.html":{"url":"docs/task-scheduling/upgrade-xxl-job.html","title":"XXL-JOB升级","keywords":"","body":"编译xxl-job-2.1.2 xxl-job-2.0.2 只有一个admin用户，不能设置创建多个账号。v2.1.2可以设置多个账号。 运行一个maven容器 docker-compose.yml如下： mvn: image: maven:3.5-jdk-8-alpine volumes: - ./data:/data # 源码包xxl-job-2.1.2.tar.gz在./data下 command: [\"tail\", \"-f\", \"/dev/null\"] 或者 docker run -d --name mvn3 maven:3.5-jdk-8-alpine tail -f /dev/null # 复制源码包到容器/data目录中 docker cp data/xxl-job-2.1.2.tar.gz mvn3:/data/ 进入容器编译 docker exec -it mvn3 bash # 编包 cd /data/xxl-job-{版本号} mvn clean package # 拷包 mkdir target mv xxl-job-admin/target/*.jar target/ mv xxl-job-executor-samples/xxl-job-executor-sample-springboot/target/*.jar target/ 将其从容器中拷贝到宿主机目录下： 停止xxl-job，替换原相应的所有jar包并重新启动。 升级失败处理 替换jar包并重新启动，发现启动失败。经分析是版本之间 数据库 的设计发生较大变化。因未提供数据迁移功能，通过手动复制旧版本的所有任务到新版本重建任务，完成本次升级过程。 Supervisord配置 执行器（作为客户端）： [program:xxl-job-executor] command=java -jar /srv/xxl-job-executor-sample-springboot-2.1.2.jar --server.port=10080 --xxl.job.executor.ip=10.1.7.211 --xxl.job.executor.port=9999 --xxl.job.admin.addresses=https://job.keep.com/xxl-job-admin --xxl.job.executor.appname=xxl-job-executor-7-211 directory=/srv user=root startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=50MB stdout_logfile_backups=3 stdout_logfile=/var/log/xxl-job-executor.log 调度服务（作为服务端）： [program:xxl-job-admin_212] command=java -jar /srv/xxl-target-2.1.2/xxl-job-admin-2.1.2.jar --spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?Unicode=true&characterEncoding=UTF-8 --spring.datasource.username=root --spring.datasource.password=mysql@dmin --server.port=8080 directory=/srv user=root startsecs=3 redirect_stderr=true stdout_logfile_maxbytes=50MB stdout_logfile_backups=3 stdout_logfile=/var/log/xxl-job-admin.log Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/my-gitbook.html":{"url":"docs/my-gitbook.html","title":"制作","keywords":"","body":"使用GitBook 文档结构（示例） [root@VM_0_13_centos docs]# tree -L 1 . . |-- book.json |-- docs |-- node_modules # 可不预先安装js依赖 |-- README.md `-- SUMMARY.md 基于node:alpine构建gitbook-cli镜像 Dockerfile: FROM node:alpine RUN npm install gitbook-cli -g && \\ gitbook fetch 3.2.3 WORKDIR /opt/data 部署gitbook compose: version: '3' services: pages: image: mynode:alpine build: . environment: SERVICE_NAME: pages SERVICE_TAGS: \"prometheus-target,pages,http\" command: [\"sh\", \"-c\", \"cd /opt/data && gitbook install && gitbook serve\"] volumes: - ./docs:/opt/data ports: - 4000:4000 如果未事先下载好相关依赖，启动后gitbook install过程需要一定的时间。 node:alpine的entrypoint是默认的docker-entrypoint.sh，构建gitbook-cli镜像时未另外指定。 docker-entrypoint.sh: #!/bin/sh set -e if [ \"${1#-}\" != \"${1}\" ] || [ -z \"$(command -v \"${1}\")\" ]; then set -- node \"$@\" fi exec \"$@\" 因此，compose中command的以下写法均可： command: - /bin/sh - -c - | cd /opt/data #当镜像默认workdir不是/opt/data时，可在command中cd；是则不必cd gitbook serve command: - sh - -c - | gitbook serve command: [\"gitbook\", \"serve\"] command: [\"sh\", \"-c\", \"gitbook serve\"] command: [\"sh\", \"-c\", \"cd /opt/data && gitbook serve\"] command: [sh, -c, \"gitbook serve\"] command: [sh, -c, gitbook serve] command: [sh, -c, cd /opt/data && gitbook serve] command: sh -c \"cd /opt/data && gitbook serve\" Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/cicd/publish-gitbook.html":{"url":"docs/cicd/publish-gitbook.html","title":"发布","keywords":"","body":"通过Gitlab发布Gitbook 安装git客户端 Windows版Git客户端：https://gitforwindows.org/ 创建gitbook项目docs gitbook项目docs的目录结构： docs # 仓库根目录 ├── book.json # gitbook配置文件 ├── deploy/ # 存放部署脚本 ├── .gitlab-ci.yml # gitlab ci配置文件 ├── Dockerfile # docker镜像编译脚本 ├── docs/ # 文档集中存放目录 │ ├── assets/ # 图片目录 │ ├── cicd/ # 持续集成 │ ├── deployment/ # 应用部署 │ ├── task-sheduling/ # 任务调度 │ ├── config-management/ # 配置管理 │ └── monitoring/ # 运维监控 ├── README.md # 书籍首页 ├── styles/ # css文件 └── SUMMARY.md # 书籍目录文件 克隆gitbook项目 已安装好git客户端，空白处右键如图打开git客户端： git clone 项目文件到本地： 添加一个文档 以下在原项目的docs/else目录下添加一个文档es-maximum-shards.md 并修改书籍目录 添加修改、提交、推送 查看、添加改动 提交到本地版本库、推送到远程版本库（master分支） git commit 提交时，\"-m\"参数写一点简明的备注信息。 自动构建、发布 git push成功之后，在gitlab上可以查看构建进度： Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "},"docs/HELP.html":{"url":"docs/HELP.html","title":"官方示例","keywords":"","body":"GitBook Example GitBook website using GitLab Pages. Learn more about GitLab Pages at https://pages.gitlab.io and the official documentation https://docs.gitlab.com/ce/user/project/pages/. Table of Contents generated with DocToc GitLab CI Building locally GitLab User or Group Pages Did you fork this project? Troubleshooting GitLab CI This project's static Pages are built by GitLab CI, following the steps defined in .gitlab-ci.yml: # requiring the environment of NodeJS 8.9.x LTS (carbon) image: node:8.9 # add 'node_modules' to cache for speeding up builds cache: paths: - node_modules/ # Node modules and dependencies before_script: - npm install gitbook-cli -g # install gitbook - gitbook fetch latest # fetch latest stable version - gitbook install # add any requested plugins in book.json #- gitbook fetch pre # fetch latest pre-release version #- gitbook fetch 2.6.7 # fetch specific version # the 'pages' job will deploy and build your site to the 'public' path pages: stage: deploy script: - gitbook build . public # build to public path artifacts: paths: - public only: - master # this job will affect only the 'master' branch Building locally To work locally with this project, you'll have to follow the steps below: Fork, clone or download this project Install GitBook npm install gitbook-cli -g Fetch GitBook's latest stable version gitbook fetch latest Preview your project: gitbook serve Add content Generate the website: gitbook build (optional) Push your changes to the master branch: git push Read more at GitBook's documentation. GitLab User or Group Pages To use this project as your user/group website, you will need one additional step: just rename your project to namespace.gitlab.io, where namespace is your username or groupname. This can be done by navigating to your project's Settings. Read more about user/group Pages and project Pages. Did you fork this project? If you forked this project for your own use, please go to your project's Settings and remove the forking relationship, which won't be necessary unless you want to contribute back to the upstream project. Troubleshooting CSS is missing! That means two things: Either that you have wrongly set up the CSS URL in your templates, or your static generator has a configuration option that needs to be explicitly set in order to serve static assets under a relative URL. Forked from @virtuacreative Copyright © Zeng 2019 all right reserved，powered by GitbookModified @ 2020-12-12 17:04:11 "}}